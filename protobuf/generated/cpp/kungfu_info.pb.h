// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kungfu_info.proto

#ifndef PROTOBUF_kungfu_5finfo_2eproto__INCLUDED
#define PROTOBUF_kungfu_5finfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "constants.pb.h"
#include "open_kungfu_slot_condition.pb.h"
// @@protoc_insertion_point(includes)

namespace sanguo {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_kungfu_5finfo_2eproto();
void protobuf_AssignDesc_kungfu_5finfo_2eproto();
void protobuf_ShutdownFile_kungfu_5finfo_2eproto();

class MsgKungFuInfo;

// ===================================================================

class MsgKungFuInfo : public ::google::protobuf::MessageLite {
 public:
  MsgKungFuInfo();
  virtual ~MsgKungFuInfo();

  MsgKungFuInfo(const MsgKungFuInfo& from);

  inline MsgKungFuInfo& operator=(const MsgKungFuInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const MsgKungFuInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const MsgKungFuInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(MsgKungFuInfo* other);

  // implements Message ----------------------------------------------

  MsgKungFuInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const MsgKungFuInfo& from);
  void MergeFrom(const MsgKungFuInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 kungfuMainID = 1;
  inline bool has_kungfumainid() const;
  inline void clear_kungfumainid();
  static const int kKungfuMainIDFieldNumber = 1;
  inline ::google::protobuf::uint32 kungfumainid() const;
  inline void set_kungfumainid(::google::protobuf::uint32 value);

  // required uint32 kungfuSlotNum = 2;
  inline bool has_kungfuslotnum() const;
  inline void clear_kungfuslotnum();
  static const int kKungfuSlotNumFieldNumber = 2;
  inline ::google::protobuf::uint32 kungfuslotnum() const;
  inline void set_kungfuslotnum(::google::protobuf::uint32 value);

  // required string equipKungfuId = 3;
  inline bool has_equipkungfuid() const;
  inline void clear_equipkungfuid();
  static const int kEquipKungfuIdFieldNumber = 3;
  inline const ::std::string& equipkungfuid() const;
  inline void set_equipkungfuid(const ::std::string& value);
  inline void set_equipkungfuid(const char* value);
  inline void set_equipkungfuid(const char* value, size_t size);
  inline ::std::string* mutable_equipkungfuid();
  inline ::std::string* release_equipkungfuid();
  inline void set_allocated_equipkungfuid(::std::string* equipkungfuid);

  // required .sanguo.MsgOpenKungfuSlotCondition openSlotCondition = 4;
  inline bool has_openslotcondition() const;
  inline void clear_openslotcondition();
  static const int kOpenSlotConditionFieldNumber = 4;
  inline const ::sanguo::MsgOpenKungfuSlotCondition& openslotcondition() const;
  inline ::sanguo::MsgOpenKungfuSlotCondition* mutable_openslotcondition();
  inline ::sanguo::MsgOpenKungfuSlotCondition* release_openslotcondition();
  inline void set_allocated_openslotcondition(::sanguo::MsgOpenKungfuSlotCondition* openslotcondition);

  // required uint32 openStatus = 5;
  inline bool has_openstatus() const;
  inline void clear_openstatus();
  static const int kOpenStatusFieldNumber = 5;
  inline ::google::protobuf::uint32 openstatus() const;
  inline void set_openstatus(::google::protobuf::uint32 value);

  // repeated uint32 slotChildrenLevel = 6;
  inline int slotchildrenlevel_size() const;
  inline void clear_slotchildrenlevel();
  static const int kSlotChildrenLevelFieldNumber = 6;
  inline ::google::protobuf::uint32 slotchildrenlevel(int index) const;
  inline void set_slotchildrenlevel(int index, ::google::protobuf::uint32 value);
  inline void add_slotchildrenlevel(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      slotchildrenlevel() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_slotchildrenlevel();

  // repeated uint32 slotChildrenProperty = 7;
  inline int slotchildrenproperty_size() const;
  inline void clear_slotchildrenproperty();
  static const int kSlotChildrenPropertyFieldNumber = 7;
  inline ::google::protobuf::uint32 slotchildrenproperty(int index) const;
  inline void set_slotchildrenproperty(int index, ::google::protobuf::uint32 value);
  inline void add_slotchildrenproperty(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      slotchildrenproperty() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_slotchildrenproperty();

  // @@protoc_insertion_point(class_scope:sanguo.MsgKungFuInfo)
 private:
  inline void set_has_kungfumainid();
  inline void clear_has_kungfumainid();
  inline void set_has_kungfuslotnum();
  inline void clear_has_kungfuslotnum();
  inline void set_has_equipkungfuid();
  inline void clear_has_equipkungfuid();
  inline void set_has_openslotcondition();
  inline void clear_has_openslotcondition();
  inline void set_has_openstatus();
  inline void clear_has_openstatus();

  ::google::protobuf::uint32 kungfumainid_;
  ::google::protobuf::uint32 kungfuslotnum_;
  ::std::string* equipkungfuid_;
  ::sanguo::MsgOpenKungfuSlotCondition* openslotcondition_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > slotchildrenlevel_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > slotchildrenproperty_;
  ::google::protobuf::uint32 openstatus_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_kungfu_5finfo_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_kungfu_5finfo_2eproto();
  #endif
  friend void protobuf_AssignDesc_kungfu_5finfo_2eproto();
  friend void protobuf_ShutdownFile_kungfu_5finfo_2eproto();

  void InitAsDefaultInstance();
  static MsgKungFuInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// MsgKungFuInfo

// required uint32 kungfuMainID = 1;
inline bool MsgKungFuInfo::has_kungfumainid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgKungFuInfo::set_has_kungfumainid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgKungFuInfo::clear_has_kungfumainid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgKungFuInfo::clear_kungfumainid() {
  kungfumainid_ = 0u;
  clear_has_kungfumainid();
}
inline ::google::protobuf::uint32 MsgKungFuInfo::kungfumainid() const {
  return kungfumainid_;
}
inline void MsgKungFuInfo::set_kungfumainid(::google::protobuf::uint32 value) {
  set_has_kungfumainid();
  kungfumainid_ = value;
}

// required uint32 kungfuSlotNum = 2;
inline bool MsgKungFuInfo::has_kungfuslotnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgKungFuInfo::set_has_kungfuslotnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgKungFuInfo::clear_has_kungfuslotnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgKungFuInfo::clear_kungfuslotnum() {
  kungfuslotnum_ = 0u;
  clear_has_kungfuslotnum();
}
inline ::google::protobuf::uint32 MsgKungFuInfo::kungfuslotnum() const {
  return kungfuslotnum_;
}
inline void MsgKungFuInfo::set_kungfuslotnum(::google::protobuf::uint32 value) {
  set_has_kungfuslotnum();
  kungfuslotnum_ = value;
}

// required string equipKungfuId = 3;
inline bool MsgKungFuInfo::has_equipkungfuid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgKungFuInfo::set_has_equipkungfuid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgKungFuInfo::clear_has_equipkungfuid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgKungFuInfo::clear_equipkungfuid() {
  if (equipkungfuid_ != &::google::protobuf::internal::kEmptyString) {
    equipkungfuid_->clear();
  }
  clear_has_equipkungfuid();
}
inline const ::std::string& MsgKungFuInfo::equipkungfuid() const {
  return *equipkungfuid_;
}
inline void MsgKungFuInfo::set_equipkungfuid(const ::std::string& value) {
  set_has_equipkungfuid();
  if (equipkungfuid_ == &::google::protobuf::internal::kEmptyString) {
    equipkungfuid_ = new ::std::string;
  }
  equipkungfuid_->assign(value);
}
inline void MsgKungFuInfo::set_equipkungfuid(const char* value) {
  set_has_equipkungfuid();
  if (equipkungfuid_ == &::google::protobuf::internal::kEmptyString) {
    equipkungfuid_ = new ::std::string;
  }
  equipkungfuid_->assign(value);
}
inline void MsgKungFuInfo::set_equipkungfuid(const char* value, size_t size) {
  set_has_equipkungfuid();
  if (equipkungfuid_ == &::google::protobuf::internal::kEmptyString) {
    equipkungfuid_ = new ::std::string;
  }
  equipkungfuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgKungFuInfo::mutable_equipkungfuid() {
  set_has_equipkungfuid();
  if (equipkungfuid_ == &::google::protobuf::internal::kEmptyString) {
    equipkungfuid_ = new ::std::string;
  }
  return equipkungfuid_;
}
inline ::std::string* MsgKungFuInfo::release_equipkungfuid() {
  clear_has_equipkungfuid();
  if (equipkungfuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = equipkungfuid_;
    equipkungfuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MsgKungFuInfo::set_allocated_equipkungfuid(::std::string* equipkungfuid) {
  if (equipkungfuid_ != &::google::protobuf::internal::kEmptyString) {
    delete equipkungfuid_;
  }
  if (equipkungfuid) {
    set_has_equipkungfuid();
    equipkungfuid_ = equipkungfuid;
  } else {
    clear_has_equipkungfuid();
    equipkungfuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .sanguo.MsgOpenKungfuSlotCondition openSlotCondition = 4;
inline bool MsgKungFuInfo::has_openslotcondition() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgKungFuInfo::set_has_openslotcondition() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgKungFuInfo::clear_has_openslotcondition() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgKungFuInfo::clear_openslotcondition() {
  if (openslotcondition_ != NULL) openslotcondition_->::sanguo::MsgOpenKungfuSlotCondition::Clear();
  clear_has_openslotcondition();
}
inline const ::sanguo::MsgOpenKungfuSlotCondition& MsgKungFuInfo::openslotcondition() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return openslotcondition_ != NULL ? *openslotcondition_ : *default_instance().openslotcondition_;
#else
  return openslotcondition_ != NULL ? *openslotcondition_ : *default_instance_->openslotcondition_;
#endif
}
inline ::sanguo::MsgOpenKungfuSlotCondition* MsgKungFuInfo::mutable_openslotcondition() {
  set_has_openslotcondition();
  if (openslotcondition_ == NULL) openslotcondition_ = new ::sanguo::MsgOpenKungfuSlotCondition;
  return openslotcondition_;
}
inline ::sanguo::MsgOpenKungfuSlotCondition* MsgKungFuInfo::release_openslotcondition() {
  clear_has_openslotcondition();
  ::sanguo::MsgOpenKungfuSlotCondition* temp = openslotcondition_;
  openslotcondition_ = NULL;
  return temp;
}
inline void MsgKungFuInfo::set_allocated_openslotcondition(::sanguo::MsgOpenKungfuSlotCondition* openslotcondition) {
  delete openslotcondition_;
  openslotcondition_ = openslotcondition;
  if (openslotcondition) {
    set_has_openslotcondition();
  } else {
    clear_has_openslotcondition();
  }
}

// required uint32 openStatus = 5;
inline bool MsgKungFuInfo::has_openstatus() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MsgKungFuInfo::set_has_openstatus() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MsgKungFuInfo::clear_has_openstatus() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MsgKungFuInfo::clear_openstatus() {
  openstatus_ = 0u;
  clear_has_openstatus();
}
inline ::google::protobuf::uint32 MsgKungFuInfo::openstatus() const {
  return openstatus_;
}
inline void MsgKungFuInfo::set_openstatus(::google::protobuf::uint32 value) {
  set_has_openstatus();
  openstatus_ = value;
}

// repeated uint32 slotChildrenLevel = 6;
inline int MsgKungFuInfo::slotchildrenlevel_size() const {
  return slotchildrenlevel_.size();
}
inline void MsgKungFuInfo::clear_slotchildrenlevel() {
  slotchildrenlevel_.Clear();
}
inline ::google::protobuf::uint32 MsgKungFuInfo::slotchildrenlevel(int index) const {
  return slotchildrenlevel_.Get(index);
}
inline void MsgKungFuInfo::set_slotchildrenlevel(int index, ::google::protobuf::uint32 value) {
  slotchildrenlevel_.Set(index, value);
}
inline void MsgKungFuInfo::add_slotchildrenlevel(::google::protobuf::uint32 value) {
  slotchildrenlevel_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
MsgKungFuInfo::slotchildrenlevel() const {
  return slotchildrenlevel_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
MsgKungFuInfo::mutable_slotchildrenlevel() {
  return &slotchildrenlevel_;
}

// repeated uint32 slotChildrenProperty = 7;
inline int MsgKungFuInfo::slotchildrenproperty_size() const {
  return slotchildrenproperty_.size();
}
inline void MsgKungFuInfo::clear_slotchildrenproperty() {
  slotchildrenproperty_.Clear();
}
inline ::google::protobuf::uint32 MsgKungFuInfo::slotchildrenproperty(int index) const {
  return slotchildrenproperty_.Get(index);
}
inline void MsgKungFuInfo::set_slotchildrenproperty(int index, ::google::protobuf::uint32 value) {
  slotchildrenproperty_.Set(index, value);
}
inline void MsgKungFuInfo::add_slotchildrenproperty(::google::protobuf::uint32 value) {
  slotchildrenproperty_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
MsgKungFuInfo::slotchildrenproperty() const {
  return slotchildrenproperty_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
MsgKungFuInfo::mutable_slotchildrenproperty() {
  return &slotchildrenproperty_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sanguo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_kungfu_5finfo_2eproto__INCLUDED
