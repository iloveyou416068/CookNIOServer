// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: get_yijun_capture_info.proto

#ifndef PROTOBUF_get_5fyijun_5fcapture_5finfo_2eproto__INCLUDED
#define PROTOBUF_get_5fyijun_5fcapture_5finfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "msg_id.pb.h"
#include "msg_status_code.pb.h"
// @@protoc_insertion_point(includes)

namespace sanguo {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_get_5fyijun_5fcapture_5finfo_2eproto();
void protobuf_AssignDesc_get_5fyijun_5fcapture_5finfo_2eproto();
void protobuf_ShutdownFile_get_5fyijun_5fcapture_5finfo_2eproto();

class GetYijunCaptureInfoRequest;
class GetYijunCaptureInfoResponse;

// ===================================================================

class GetYijunCaptureInfoRequest : public ::google::protobuf::MessageLite {
 public:
  GetYijunCaptureInfoRequest();
  virtual ~GetYijunCaptureInfoRequest();

  GetYijunCaptureInfoRequest(const GetYijunCaptureInfoRequest& from);

  inline GetYijunCaptureInfoRequest& operator=(const GetYijunCaptureInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const GetYijunCaptureInfoRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const GetYijunCaptureInfoRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(GetYijunCaptureInfoRequest* other);

  // implements Message ----------------------------------------------

  GetYijunCaptureInfoRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GetYijunCaptureInfoRequest& from);
  void MergeFrom(const GetYijunCaptureInfoRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .sanguo.MsgID msgID = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline ::sanguo::MsgID msgid() const;
  inline void set_msgid(::sanguo::MsgID value);

  // @@protoc_insertion_point(class_scope:sanguo.GetYijunCaptureInfoRequest)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();

  int msgid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_get_5fyijun_5fcapture_5finfo_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_get_5fyijun_5fcapture_5finfo_2eproto();
  #endif
  friend void protobuf_AssignDesc_get_5fyijun_5fcapture_5finfo_2eproto();
  friend void protobuf_ShutdownFile_get_5fyijun_5fcapture_5finfo_2eproto();

  void InitAsDefaultInstance();
  static GetYijunCaptureInfoRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetYijunCaptureInfoResponse : public ::google::protobuf::MessageLite {
 public:
  GetYijunCaptureInfoResponse();
  virtual ~GetYijunCaptureInfoResponse();

  GetYijunCaptureInfoResponse(const GetYijunCaptureInfoResponse& from);

  inline GetYijunCaptureInfoResponse& operator=(const GetYijunCaptureInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const GetYijunCaptureInfoResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const GetYijunCaptureInfoResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(GetYijunCaptureInfoResponse* other);

  // implements Message ----------------------------------------------

  GetYijunCaptureInfoResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GetYijunCaptureInfoResponse& from);
  void MergeFrom(const GetYijunCaptureInfoResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .sanguo.MsgID msgID = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline ::sanguo::MsgID msgid() const;
  inline void set_msgid(::sanguo::MsgID value);

  // required .sanguo.StatusCode status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::sanguo::StatusCode status() const;
  inline void set_status(::sanguo::StatusCode value);

  // optional string recoders = 3;
  inline bool has_recoders() const;
  inline void clear_recoders();
  static const int kRecodersFieldNumber = 3;
  inline const ::std::string& recoders() const;
  inline void set_recoders(const ::std::string& value);
  inline void set_recoders(const char* value);
  inline void set_recoders(const char* value, size_t size);
  inline ::std::string* mutable_recoders();
  inline ::std::string* release_recoders();
  inline void set_allocated_recoders(::std::string* recoders);

  // @@protoc_insertion_point(class_scope:sanguo.GetYijunCaptureInfoResponse)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_recoders();
  inline void clear_has_recoders();

  int msgid_;
  int status_;
  ::std::string* recoders_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_get_5fyijun_5fcapture_5finfo_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_get_5fyijun_5fcapture_5finfo_2eproto();
  #endif
  friend void protobuf_AssignDesc_get_5fyijun_5fcapture_5finfo_2eproto();
  friend void protobuf_ShutdownFile_get_5fyijun_5fcapture_5finfo_2eproto();

  void InitAsDefaultInstance();
  static GetYijunCaptureInfoResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// GetYijunCaptureInfoRequest

// required .sanguo.MsgID msgID = 1;
inline bool GetYijunCaptureInfoRequest::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetYijunCaptureInfoRequest::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetYijunCaptureInfoRequest::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetYijunCaptureInfoRequest::clear_msgid() {
  msgid_ = 1;
  clear_has_msgid();
}
inline ::sanguo::MsgID GetYijunCaptureInfoRequest::msgid() const {
  return static_cast< ::sanguo::MsgID >(msgid_);
}
inline void GetYijunCaptureInfoRequest::set_msgid(::sanguo::MsgID value) {
  assert(::sanguo::MsgID_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// -------------------------------------------------------------------

// GetYijunCaptureInfoResponse

// required .sanguo.MsgID msgID = 1;
inline bool GetYijunCaptureInfoResponse::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetYijunCaptureInfoResponse::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetYijunCaptureInfoResponse::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetYijunCaptureInfoResponse::clear_msgid() {
  msgid_ = 1;
  clear_has_msgid();
}
inline ::sanguo::MsgID GetYijunCaptureInfoResponse::msgid() const {
  return static_cast< ::sanguo::MsgID >(msgid_);
}
inline void GetYijunCaptureInfoResponse::set_msgid(::sanguo::MsgID value) {
  assert(::sanguo::MsgID_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// required .sanguo.StatusCode status = 2;
inline bool GetYijunCaptureInfoResponse::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetYijunCaptureInfoResponse::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetYijunCaptureInfoResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetYijunCaptureInfoResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::sanguo::StatusCode GetYijunCaptureInfoResponse::status() const {
  return static_cast< ::sanguo::StatusCode >(status_);
}
inline void GetYijunCaptureInfoResponse::set_status(::sanguo::StatusCode value) {
  assert(::sanguo::StatusCode_IsValid(value));
  set_has_status();
  status_ = value;
}

// optional string recoders = 3;
inline bool GetYijunCaptureInfoResponse::has_recoders() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetYijunCaptureInfoResponse::set_has_recoders() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetYijunCaptureInfoResponse::clear_has_recoders() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetYijunCaptureInfoResponse::clear_recoders() {
  if (recoders_ != &::google::protobuf::internal::kEmptyString) {
    recoders_->clear();
  }
  clear_has_recoders();
}
inline const ::std::string& GetYijunCaptureInfoResponse::recoders() const {
  return *recoders_;
}
inline void GetYijunCaptureInfoResponse::set_recoders(const ::std::string& value) {
  set_has_recoders();
  if (recoders_ == &::google::protobuf::internal::kEmptyString) {
    recoders_ = new ::std::string;
  }
  recoders_->assign(value);
}
inline void GetYijunCaptureInfoResponse::set_recoders(const char* value) {
  set_has_recoders();
  if (recoders_ == &::google::protobuf::internal::kEmptyString) {
    recoders_ = new ::std::string;
  }
  recoders_->assign(value);
}
inline void GetYijunCaptureInfoResponse::set_recoders(const char* value, size_t size) {
  set_has_recoders();
  if (recoders_ == &::google::protobuf::internal::kEmptyString) {
    recoders_ = new ::std::string;
  }
  recoders_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetYijunCaptureInfoResponse::mutable_recoders() {
  set_has_recoders();
  if (recoders_ == &::google::protobuf::internal::kEmptyString) {
    recoders_ = new ::std::string;
  }
  return recoders_;
}
inline ::std::string* GetYijunCaptureInfoResponse::release_recoders() {
  clear_has_recoders();
  if (recoders_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = recoders_;
    recoders_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetYijunCaptureInfoResponse::set_allocated_recoders(::std::string* recoders) {
  if (recoders_ != &::google::protobuf::internal::kEmptyString) {
    delete recoders_;
  }
  if (recoders) {
    set_has_recoders();
    recoders_ = recoders;
  } else {
    clear_has_recoders();
    recoders_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sanguo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_get_5fyijun_5fcapture_5finfo_2eproto__INCLUDED
