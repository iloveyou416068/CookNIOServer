// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: get_rank_reward.proto

#ifndef PROTOBUF_get_5frank_5freward_2eproto__INCLUDED
#define PROTOBUF_get_5frank_5freward_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "msg_id.pb.h"
#include "msg_status_code.pb.h"
// @@protoc_insertion_point(includes)

namespace sanguo {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_get_5frank_5freward_2eproto();
void protobuf_AssignDesc_get_5frank_5freward_2eproto();
void protobuf_ShutdownFile_get_5frank_5freward_2eproto();

class GetRankRewardRequest;
class GetRankRewardResponse;

// ===================================================================

class GetRankRewardRequest : public ::google::protobuf::MessageLite {
 public:
  GetRankRewardRequest();
  virtual ~GetRankRewardRequest();

  GetRankRewardRequest(const GetRankRewardRequest& from);

  inline GetRankRewardRequest& operator=(const GetRankRewardRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const GetRankRewardRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const GetRankRewardRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(GetRankRewardRequest* other);

  // implements Message ----------------------------------------------

  GetRankRewardRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GetRankRewardRequest& from);
  void MergeFrom(const GetRankRewardRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .sanguo.MsgID msgID = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline ::sanguo::MsgID msgid() const;
  inline void set_msgid(::sanguo::MsgID value);

  // required bool flag = 2;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 2;
  inline bool flag() const;
  inline void set_flag(bool value);

  // @@protoc_insertion_point(class_scope:sanguo.GetRankRewardRequest)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_flag();
  inline void clear_has_flag();

  int msgid_;
  bool flag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_get_5frank_5freward_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_get_5frank_5freward_2eproto();
  #endif
  friend void protobuf_AssignDesc_get_5frank_5freward_2eproto();
  friend void protobuf_ShutdownFile_get_5frank_5freward_2eproto();

  void InitAsDefaultInstance();
  static GetRankRewardRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetRankRewardResponse : public ::google::protobuf::MessageLite {
 public:
  GetRankRewardResponse();
  virtual ~GetRankRewardResponse();

  GetRankRewardResponse(const GetRankRewardResponse& from);

  inline GetRankRewardResponse& operator=(const GetRankRewardResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const GetRankRewardResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const GetRankRewardResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(GetRankRewardResponse* other);

  // implements Message ----------------------------------------------

  GetRankRewardResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GetRankRewardResponse& from);
  void MergeFrom(const GetRankRewardResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .sanguo.MsgID msgID = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline ::sanguo::MsgID msgid() const;
  inline void set_msgid(::sanguo::MsgID value);

  // required .sanguo.StatusCode status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::sanguo::StatusCode status() const;
  inline void set_status(::sanguo::StatusCode value);

  // optional uint64 rank = 3;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 3;
  inline ::google::protobuf::uint64 rank() const;
  inline void set_rank(::google::protobuf::uint64 value);

  // optional uint64 currentHonourReward = 4;
  inline bool has_currenthonourreward() const;
  inline void clear_currenthonourreward();
  static const int kCurrentHonourRewardFieldNumber = 4;
  inline ::google::protobuf::uint64 currenthonourreward() const;
  inline void set_currenthonourreward(::google::protobuf::uint64 value);

  // optional uint32 nextMinuteHonourReward = 5;
  inline bool has_nextminutehonourreward() const;
  inline void clear_nextminutehonourreward();
  static const int kNextMinuteHonourRewardFieldNumber = 5;
  inline ::google::protobuf::uint32 nextminutehonourreward() const;
  inline void set_nextminutehonourreward(::google::protobuf::uint32 value);

  // optional uint64 lostHonourReward = 6;
  inline bool has_losthonourreward() const;
  inline void clear_losthonourreward();
  static const int kLostHonourRewardFieldNumber = 6;
  inline ::google::protobuf::uint64 losthonourreward() const;
  inline void set_losthonourreward(::google::protobuf::uint64 value);

  // optional uint64 totalHonourReward = 7;
  inline bool has_totalhonourreward() const;
  inline void clear_totalhonourreward();
  static const int kTotalHonourRewardFieldNumber = 7;
  inline ::google::protobuf::uint64 totalhonourreward() const;
  inline void set_totalhonourreward(::google::protobuf::uint64 value);

  // optional uint64 currentCopperReward = 8;
  inline bool has_currentcopperreward() const;
  inline void clear_currentcopperreward();
  static const int kCurrentCopperRewardFieldNumber = 8;
  inline ::google::protobuf::uint64 currentcopperreward() const;
  inline void set_currentcopperreward(::google::protobuf::uint64 value);

  // optional uint64 lostCopperReward = 9;
  inline bool has_lostcopperreward() const;
  inline void clear_lostcopperreward();
  static const int kLostCopperRewardFieldNumber = 9;
  inline ::google::protobuf::uint64 lostcopperreward() const;
  inline void set_lostcopperreward(::google::protobuf::uint64 value);

  // optional uint64 totalCopperReward = 10;
  inline bool has_totalcopperreward() const;
  inline void clear_totalcopperreward();
  static const int kTotalCopperRewardFieldNumber = 10;
  inline ::google::protobuf::uint64 totalcopperreward() const;
  inline void set_totalcopperreward(::google::protobuf::uint64 value);

  // optional uint32 nextMinuteCopperReward = 11;
  inline bool has_nextminutecopperreward() const;
  inline void clear_nextminutecopperreward();
  static const int kNextMinuteCopperRewardFieldNumber = 11;
  inline ::google::protobuf::uint32 nextminutecopperreward() const;
  inline void set_nextminutecopperreward(::google::protobuf::uint32 value);

  // optional bool rewardFlag = 12;
  inline bool has_rewardflag() const;
  inline void clear_rewardflag();
  static const int kRewardFlagFieldNumber = 12;
  inline bool rewardflag() const;
  inline void set_rewardflag(bool value);

  // optional uint64 captureTimes = 13;
  inline bool has_capturetimes() const;
  inline void clear_capturetimes();
  static const int kCaptureTimesFieldNumber = 13;
  inline ::google::protobuf::uint64 capturetimes() const;
  inline void set_capturetimes(::google::protobuf::uint64 value);

  // optional uint32 consecutiveVictories = 14;
  inline bool has_consecutivevictories() const;
  inline void clear_consecutivevictories();
  static const int kConsecutiveVictoriesFieldNumber = 14;
  inline ::google::protobuf::uint32 consecutivevictories() const;
  inline void set_consecutivevictories(::google::protobuf::uint32 value);

  // optional uint64 honourReward = 15;
  inline bool has_honourreward() const;
  inline void clear_honourreward();
  static const int kHonourRewardFieldNumber = 15;
  inline ::google::protobuf::uint64 honourreward() const;
  inline void set_honourreward(::google::protobuf::uint64 value);

  // optional uint64 copperReward = 16;
  inline bool has_copperreward() const;
  inline void clear_copperreward();
  static const int kCopperRewardFieldNumber = 16;
  inline ::google::protobuf::uint64 copperreward() const;
  inline void set_copperreward(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:sanguo.GetRankRewardResponse)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_currenthonourreward();
  inline void clear_has_currenthonourreward();
  inline void set_has_nextminutehonourreward();
  inline void clear_has_nextminutehonourreward();
  inline void set_has_losthonourreward();
  inline void clear_has_losthonourreward();
  inline void set_has_totalhonourreward();
  inline void clear_has_totalhonourreward();
  inline void set_has_currentcopperreward();
  inline void clear_has_currentcopperreward();
  inline void set_has_lostcopperreward();
  inline void clear_has_lostcopperreward();
  inline void set_has_totalcopperreward();
  inline void clear_has_totalcopperreward();
  inline void set_has_nextminutecopperreward();
  inline void clear_has_nextminutecopperreward();
  inline void set_has_rewardflag();
  inline void clear_has_rewardflag();
  inline void set_has_capturetimes();
  inline void clear_has_capturetimes();
  inline void set_has_consecutivevictories();
  inline void clear_has_consecutivevictories();
  inline void set_has_honourreward();
  inline void clear_has_honourreward();
  inline void set_has_copperreward();
  inline void clear_has_copperreward();

  int msgid_;
  int status_;
  ::google::protobuf::uint64 rank_;
  ::google::protobuf::uint64 currenthonourreward_;
  ::google::protobuf::uint64 losthonourreward_;
  ::google::protobuf::uint64 totalhonourreward_;
  ::google::protobuf::uint64 currentcopperreward_;
  ::google::protobuf::uint32 nextminutehonourreward_;
  ::google::protobuf::uint32 nextminutecopperreward_;
  ::google::protobuf::uint64 lostcopperreward_;
  ::google::protobuf::uint64 totalcopperreward_;
  ::google::protobuf::uint64 capturetimes_;
  bool rewardflag_;
  ::google::protobuf::uint32 consecutivevictories_;
  ::google::protobuf::uint64 honourreward_;
  ::google::protobuf::uint64 copperreward_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_get_5frank_5freward_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_get_5frank_5freward_2eproto();
  #endif
  friend void protobuf_AssignDesc_get_5frank_5freward_2eproto();
  friend void protobuf_ShutdownFile_get_5frank_5freward_2eproto();

  void InitAsDefaultInstance();
  static GetRankRewardResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// GetRankRewardRequest

// required .sanguo.MsgID msgID = 1;
inline bool GetRankRewardRequest::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetRankRewardRequest::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetRankRewardRequest::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetRankRewardRequest::clear_msgid() {
  msgid_ = 1;
  clear_has_msgid();
}
inline ::sanguo::MsgID GetRankRewardRequest::msgid() const {
  return static_cast< ::sanguo::MsgID >(msgid_);
}
inline void GetRankRewardRequest::set_msgid(::sanguo::MsgID value) {
  assert(::sanguo::MsgID_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// required bool flag = 2;
inline bool GetRankRewardRequest::has_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetRankRewardRequest::set_has_flag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetRankRewardRequest::clear_has_flag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetRankRewardRequest::clear_flag() {
  flag_ = false;
  clear_has_flag();
}
inline bool GetRankRewardRequest::flag() const {
  return flag_;
}
inline void GetRankRewardRequest::set_flag(bool value) {
  set_has_flag();
  flag_ = value;
}

// -------------------------------------------------------------------

// GetRankRewardResponse

// required .sanguo.MsgID msgID = 1;
inline bool GetRankRewardResponse::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetRankRewardResponse::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetRankRewardResponse::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetRankRewardResponse::clear_msgid() {
  msgid_ = 1;
  clear_has_msgid();
}
inline ::sanguo::MsgID GetRankRewardResponse::msgid() const {
  return static_cast< ::sanguo::MsgID >(msgid_);
}
inline void GetRankRewardResponse::set_msgid(::sanguo::MsgID value) {
  assert(::sanguo::MsgID_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// required .sanguo.StatusCode status = 2;
inline bool GetRankRewardResponse::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetRankRewardResponse::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetRankRewardResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetRankRewardResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::sanguo::StatusCode GetRankRewardResponse::status() const {
  return static_cast< ::sanguo::StatusCode >(status_);
}
inline void GetRankRewardResponse::set_status(::sanguo::StatusCode value) {
  assert(::sanguo::StatusCode_IsValid(value));
  set_has_status();
  status_ = value;
}

// optional uint64 rank = 3;
inline bool GetRankRewardResponse::has_rank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetRankRewardResponse::set_has_rank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetRankRewardResponse::clear_has_rank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetRankRewardResponse::clear_rank() {
  rank_ = GOOGLE_ULONGLONG(0);
  clear_has_rank();
}
inline ::google::protobuf::uint64 GetRankRewardResponse::rank() const {
  return rank_;
}
inline void GetRankRewardResponse::set_rank(::google::protobuf::uint64 value) {
  set_has_rank();
  rank_ = value;
}

// optional uint64 currentHonourReward = 4;
inline bool GetRankRewardResponse::has_currenthonourreward() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetRankRewardResponse::set_has_currenthonourreward() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetRankRewardResponse::clear_has_currenthonourreward() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetRankRewardResponse::clear_currenthonourreward() {
  currenthonourreward_ = GOOGLE_ULONGLONG(0);
  clear_has_currenthonourreward();
}
inline ::google::protobuf::uint64 GetRankRewardResponse::currenthonourreward() const {
  return currenthonourreward_;
}
inline void GetRankRewardResponse::set_currenthonourreward(::google::protobuf::uint64 value) {
  set_has_currenthonourreward();
  currenthonourreward_ = value;
}

// optional uint32 nextMinuteHonourReward = 5;
inline bool GetRankRewardResponse::has_nextminutehonourreward() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GetRankRewardResponse::set_has_nextminutehonourreward() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GetRankRewardResponse::clear_has_nextminutehonourreward() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GetRankRewardResponse::clear_nextminutehonourreward() {
  nextminutehonourreward_ = 0u;
  clear_has_nextminutehonourreward();
}
inline ::google::protobuf::uint32 GetRankRewardResponse::nextminutehonourreward() const {
  return nextminutehonourreward_;
}
inline void GetRankRewardResponse::set_nextminutehonourreward(::google::protobuf::uint32 value) {
  set_has_nextminutehonourreward();
  nextminutehonourreward_ = value;
}

// optional uint64 lostHonourReward = 6;
inline bool GetRankRewardResponse::has_losthonourreward() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GetRankRewardResponse::set_has_losthonourreward() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GetRankRewardResponse::clear_has_losthonourreward() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GetRankRewardResponse::clear_losthonourreward() {
  losthonourreward_ = GOOGLE_ULONGLONG(0);
  clear_has_losthonourreward();
}
inline ::google::protobuf::uint64 GetRankRewardResponse::losthonourreward() const {
  return losthonourreward_;
}
inline void GetRankRewardResponse::set_losthonourreward(::google::protobuf::uint64 value) {
  set_has_losthonourreward();
  losthonourreward_ = value;
}

// optional uint64 totalHonourReward = 7;
inline bool GetRankRewardResponse::has_totalhonourreward() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GetRankRewardResponse::set_has_totalhonourreward() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GetRankRewardResponse::clear_has_totalhonourreward() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GetRankRewardResponse::clear_totalhonourreward() {
  totalhonourreward_ = GOOGLE_ULONGLONG(0);
  clear_has_totalhonourreward();
}
inline ::google::protobuf::uint64 GetRankRewardResponse::totalhonourreward() const {
  return totalhonourreward_;
}
inline void GetRankRewardResponse::set_totalhonourreward(::google::protobuf::uint64 value) {
  set_has_totalhonourreward();
  totalhonourreward_ = value;
}

// optional uint64 currentCopperReward = 8;
inline bool GetRankRewardResponse::has_currentcopperreward() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GetRankRewardResponse::set_has_currentcopperreward() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GetRankRewardResponse::clear_has_currentcopperreward() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GetRankRewardResponse::clear_currentcopperreward() {
  currentcopperreward_ = GOOGLE_ULONGLONG(0);
  clear_has_currentcopperreward();
}
inline ::google::protobuf::uint64 GetRankRewardResponse::currentcopperreward() const {
  return currentcopperreward_;
}
inline void GetRankRewardResponse::set_currentcopperreward(::google::protobuf::uint64 value) {
  set_has_currentcopperreward();
  currentcopperreward_ = value;
}

// optional uint64 lostCopperReward = 9;
inline bool GetRankRewardResponse::has_lostcopperreward() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GetRankRewardResponse::set_has_lostcopperreward() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GetRankRewardResponse::clear_has_lostcopperreward() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GetRankRewardResponse::clear_lostcopperreward() {
  lostcopperreward_ = GOOGLE_ULONGLONG(0);
  clear_has_lostcopperreward();
}
inline ::google::protobuf::uint64 GetRankRewardResponse::lostcopperreward() const {
  return lostcopperreward_;
}
inline void GetRankRewardResponse::set_lostcopperreward(::google::protobuf::uint64 value) {
  set_has_lostcopperreward();
  lostcopperreward_ = value;
}

// optional uint64 totalCopperReward = 10;
inline bool GetRankRewardResponse::has_totalcopperreward() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GetRankRewardResponse::set_has_totalcopperreward() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GetRankRewardResponse::clear_has_totalcopperreward() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GetRankRewardResponse::clear_totalcopperreward() {
  totalcopperreward_ = GOOGLE_ULONGLONG(0);
  clear_has_totalcopperreward();
}
inline ::google::protobuf::uint64 GetRankRewardResponse::totalcopperreward() const {
  return totalcopperreward_;
}
inline void GetRankRewardResponse::set_totalcopperreward(::google::protobuf::uint64 value) {
  set_has_totalcopperreward();
  totalcopperreward_ = value;
}

// optional uint32 nextMinuteCopperReward = 11;
inline bool GetRankRewardResponse::has_nextminutecopperreward() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GetRankRewardResponse::set_has_nextminutecopperreward() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GetRankRewardResponse::clear_has_nextminutecopperreward() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GetRankRewardResponse::clear_nextminutecopperreward() {
  nextminutecopperreward_ = 0u;
  clear_has_nextminutecopperreward();
}
inline ::google::protobuf::uint32 GetRankRewardResponse::nextminutecopperreward() const {
  return nextminutecopperreward_;
}
inline void GetRankRewardResponse::set_nextminutecopperreward(::google::protobuf::uint32 value) {
  set_has_nextminutecopperreward();
  nextminutecopperreward_ = value;
}

// optional bool rewardFlag = 12;
inline bool GetRankRewardResponse::has_rewardflag() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GetRankRewardResponse::set_has_rewardflag() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GetRankRewardResponse::clear_has_rewardflag() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GetRankRewardResponse::clear_rewardflag() {
  rewardflag_ = false;
  clear_has_rewardflag();
}
inline bool GetRankRewardResponse::rewardflag() const {
  return rewardflag_;
}
inline void GetRankRewardResponse::set_rewardflag(bool value) {
  set_has_rewardflag();
  rewardflag_ = value;
}

// optional uint64 captureTimes = 13;
inline bool GetRankRewardResponse::has_capturetimes() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void GetRankRewardResponse::set_has_capturetimes() {
  _has_bits_[0] |= 0x00001000u;
}
inline void GetRankRewardResponse::clear_has_capturetimes() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void GetRankRewardResponse::clear_capturetimes() {
  capturetimes_ = GOOGLE_ULONGLONG(0);
  clear_has_capturetimes();
}
inline ::google::protobuf::uint64 GetRankRewardResponse::capturetimes() const {
  return capturetimes_;
}
inline void GetRankRewardResponse::set_capturetimes(::google::protobuf::uint64 value) {
  set_has_capturetimes();
  capturetimes_ = value;
}

// optional uint32 consecutiveVictories = 14;
inline bool GetRankRewardResponse::has_consecutivevictories() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void GetRankRewardResponse::set_has_consecutivevictories() {
  _has_bits_[0] |= 0x00002000u;
}
inline void GetRankRewardResponse::clear_has_consecutivevictories() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void GetRankRewardResponse::clear_consecutivevictories() {
  consecutivevictories_ = 0u;
  clear_has_consecutivevictories();
}
inline ::google::protobuf::uint32 GetRankRewardResponse::consecutivevictories() const {
  return consecutivevictories_;
}
inline void GetRankRewardResponse::set_consecutivevictories(::google::protobuf::uint32 value) {
  set_has_consecutivevictories();
  consecutivevictories_ = value;
}

// optional uint64 honourReward = 15;
inline bool GetRankRewardResponse::has_honourreward() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void GetRankRewardResponse::set_has_honourreward() {
  _has_bits_[0] |= 0x00004000u;
}
inline void GetRankRewardResponse::clear_has_honourreward() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void GetRankRewardResponse::clear_honourreward() {
  honourreward_ = GOOGLE_ULONGLONG(0);
  clear_has_honourreward();
}
inline ::google::protobuf::uint64 GetRankRewardResponse::honourreward() const {
  return honourreward_;
}
inline void GetRankRewardResponse::set_honourreward(::google::protobuf::uint64 value) {
  set_has_honourreward();
  honourreward_ = value;
}

// optional uint64 copperReward = 16;
inline bool GetRankRewardResponse::has_copperreward() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void GetRankRewardResponse::set_has_copperreward() {
  _has_bits_[0] |= 0x00008000u;
}
inline void GetRankRewardResponse::clear_has_copperreward() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void GetRankRewardResponse::clear_copperreward() {
  copperreward_ = GOOGLE_ULONGLONG(0);
  clear_has_copperreward();
}
inline ::google::protobuf::uint64 GetRankRewardResponse::copperreward() const {
  return copperreward_;
}
inline void GetRankRewardResponse::set_copperreward(::google::protobuf::uint64 value) {
  set_has_copperreward();
  copperreward_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sanguo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_get_5frank_5freward_2eproto__INCLUDED
