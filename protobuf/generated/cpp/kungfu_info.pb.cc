// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kungfu_info.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "kungfu_info.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace sanguo {

void protobuf_ShutdownFile_kungfu_5finfo_2eproto() {
  delete MsgKungFuInfo::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_kungfu_5finfo_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_kungfu_5finfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::sanguo::protobuf_AddDesc_constants_2eproto();
  ::sanguo::protobuf_AddDesc_open_5fkungfu_5fslot_5fcondition_2eproto();
  MsgKungFuInfo::default_instance_ = new MsgKungFuInfo();
  MsgKungFuInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_kungfu_5finfo_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_kungfu_5finfo_2eproto_once_);
void protobuf_AddDesc_kungfu_5finfo_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_kungfu_5finfo_2eproto_once_,
                 &protobuf_AddDesc_kungfu_5finfo_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_kungfu_5finfo_2eproto {
  StaticDescriptorInitializer_kungfu_5finfo_2eproto() {
    protobuf_AddDesc_kungfu_5finfo_2eproto();
  }
} static_descriptor_initializer_kungfu_5finfo_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int MsgKungFuInfo::kKungfuMainIDFieldNumber;
const int MsgKungFuInfo::kKungfuSlotNumFieldNumber;
const int MsgKungFuInfo::kEquipKungfuIdFieldNumber;
const int MsgKungFuInfo::kOpenSlotConditionFieldNumber;
const int MsgKungFuInfo::kOpenStatusFieldNumber;
const int MsgKungFuInfo::kSlotChildrenLevelFieldNumber;
const int MsgKungFuInfo::kSlotChildrenPropertyFieldNumber;
#endif  // !_MSC_VER

MsgKungFuInfo::MsgKungFuInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void MsgKungFuInfo::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  openslotcondition_ = const_cast< ::sanguo::MsgOpenKungfuSlotCondition*>(
      ::sanguo::MsgOpenKungfuSlotCondition::internal_default_instance());
#else
  openslotcondition_ = const_cast< ::sanguo::MsgOpenKungfuSlotCondition*>(&::sanguo::MsgOpenKungfuSlotCondition::default_instance());
#endif
}

MsgKungFuInfo::MsgKungFuInfo(const MsgKungFuInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void MsgKungFuInfo::SharedCtor() {
  _cached_size_ = 0;
  kungfumainid_ = 0u;
  kungfuslotnum_ = 0u;
  equipkungfuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  openslotcondition_ = NULL;
  openstatus_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgKungFuInfo::~MsgKungFuInfo() {
  SharedDtor();
}

void MsgKungFuInfo::SharedDtor() {
  if (equipkungfuid_ != &::google::protobuf::internal::kEmptyString) {
    delete equipkungfuid_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete openslotcondition_;
  }
}

void MsgKungFuInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgKungFuInfo& MsgKungFuInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_kungfu_5finfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_kungfu_5finfo_2eproto();
#endif
  return *default_instance_;
}

MsgKungFuInfo* MsgKungFuInfo::default_instance_ = NULL;

MsgKungFuInfo* MsgKungFuInfo::New() const {
  return new MsgKungFuInfo;
}

void MsgKungFuInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    kungfumainid_ = 0u;
    kungfuslotnum_ = 0u;
    if (has_equipkungfuid()) {
      if (equipkungfuid_ != &::google::protobuf::internal::kEmptyString) {
        equipkungfuid_->clear();
      }
    }
    if (has_openslotcondition()) {
      if (openslotcondition_ != NULL) openslotcondition_->::sanguo::MsgOpenKungfuSlotCondition::Clear();
    }
    openstatus_ = 0u;
  }
  slotchildrenlevel_.Clear();
  slotchildrenproperty_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool MsgKungFuInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 kungfuMainID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kungfumainid_)));
          set_has_kungfumainid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_kungfuSlotNum;
        break;
      }

      // required uint32 kungfuSlotNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kungfuSlotNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kungfuslotnum_)));
          set_has_kungfuslotnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_equipKungfuId;
        break;
      }

      // required string equipKungfuId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipKungfuId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_equipkungfuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_openSlotCondition;
        break;
      }

      // required .sanguo.MsgOpenKungfuSlotCondition openSlotCondition = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_openSlotCondition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_openslotcondition()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_openStatus;
        break;
      }

      // required uint32 openStatus = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_openStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &openstatus_)));
          set_has_openstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_slotChildrenLevel;
        break;
      }

      // repeated uint32 slotChildrenLevel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slotChildrenLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_slotchildrenlevel())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_slotchildrenlevel())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_slotChildrenLevel;
        if (input->ExpectTag(56)) goto parse_slotChildrenProperty;
        break;
      }

      // repeated uint32 slotChildrenProperty = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slotChildrenProperty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_slotchildrenproperty())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_slotchildrenproperty())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_slotChildrenProperty;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgKungFuInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 kungfuMainID = 1;
  if (has_kungfumainid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->kungfumainid(), output);
  }

  // required uint32 kungfuSlotNum = 2;
  if (has_kungfuslotnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->kungfuslotnum(), output);
  }

  // required string equipKungfuId = 3;
  if (has_equipkungfuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->equipkungfuid(), output);
  }

  // required .sanguo.MsgOpenKungfuSlotCondition openSlotCondition = 4;
  if (has_openslotcondition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->openslotcondition(), output);
  }

  // required uint32 openStatus = 5;
  if (has_openstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->openstatus(), output);
  }

  // repeated uint32 slotChildrenLevel = 6;
  for (int i = 0; i < this->slotchildrenlevel_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->slotchildrenlevel(i), output);
  }

  // repeated uint32 slotChildrenProperty = 7;
  for (int i = 0; i < this->slotchildrenproperty_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->slotchildrenproperty(i), output);
  }

}

int MsgKungFuInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 kungfuMainID = 1;
    if (has_kungfumainid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kungfumainid());
    }

    // required uint32 kungfuSlotNum = 2;
    if (has_kungfuslotnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kungfuslotnum());
    }

    // required string equipKungfuId = 3;
    if (has_equipkungfuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->equipkungfuid());
    }

    // required .sanguo.MsgOpenKungfuSlotCondition openSlotCondition = 4;
    if (has_openslotcondition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->openslotcondition());
    }

    // required uint32 openStatus = 5;
    if (has_openstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->openstatus());
    }

  }
  // repeated uint32 slotChildrenLevel = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->slotchildrenlevel_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->slotchildrenlevel(i));
    }
    total_size += 1 * this->slotchildrenlevel_size() + data_size;
  }

  // repeated uint32 slotChildrenProperty = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->slotchildrenproperty_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->slotchildrenproperty(i));
    }
    total_size += 1 * this->slotchildrenproperty_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgKungFuInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgKungFuInfo*>(&from));
}

void MsgKungFuInfo::MergeFrom(const MsgKungFuInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  slotchildrenlevel_.MergeFrom(from.slotchildrenlevel_);
  slotchildrenproperty_.MergeFrom(from.slotchildrenproperty_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kungfumainid()) {
      set_kungfumainid(from.kungfumainid());
    }
    if (from.has_kungfuslotnum()) {
      set_kungfuslotnum(from.kungfuslotnum());
    }
    if (from.has_equipkungfuid()) {
      set_equipkungfuid(from.equipkungfuid());
    }
    if (from.has_openslotcondition()) {
      mutable_openslotcondition()->::sanguo::MsgOpenKungfuSlotCondition::MergeFrom(from.openslotcondition());
    }
    if (from.has_openstatus()) {
      set_openstatus(from.openstatus());
    }
  }
}

void MsgKungFuInfo::CopyFrom(const MsgKungFuInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgKungFuInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_openslotcondition()) {
    if (!this->openslotcondition().IsInitialized()) return false;
  }
  return true;
}

void MsgKungFuInfo::Swap(MsgKungFuInfo* other) {
  if (other != this) {
    std::swap(kungfumainid_, other->kungfumainid_);
    std::swap(kungfuslotnum_, other->kungfuslotnum_);
    std::swap(equipkungfuid_, other->equipkungfuid_);
    std::swap(openslotcondition_, other->openslotcondition_);
    std::swap(openstatus_, other->openstatus_);
    slotchildrenlevel_.Swap(&other->slotchildrenlevel_);
    slotchildrenproperty_.Swap(&other->slotchildrenproperty_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MsgKungFuInfo::GetTypeName() const {
  return "sanguo.MsgKungFuInfo";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sanguo

// @@protoc_insertion_point(global_scope)
