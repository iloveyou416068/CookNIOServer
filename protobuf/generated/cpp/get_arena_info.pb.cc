// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: get_arena_info.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "get_arena_info.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace sanguo {

void protobuf_ShutdownFile_get_5farena_5finfo_2eproto() {
  delete GetArenaInfoRequest::default_instance_;
  delete GetArenaInfoResponse::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_get_5farena_5finfo_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_get_5farena_5finfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::sanguo::protobuf_AddDesc_msg_5fid_2eproto();
  ::sanguo::protobuf_AddDesc_msg_5fstatus_5fcode_2eproto();
  ::sanguo::protobuf_AddDesc_role_2eproto();
  GetArenaInfoRequest::default_instance_ = new GetArenaInfoRequest();
  GetArenaInfoResponse::default_instance_ = new GetArenaInfoResponse();
  GetArenaInfoRequest::default_instance_->InitAsDefaultInstance();
  GetArenaInfoResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_get_5farena_5finfo_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_get_5farena_5finfo_2eproto_once_);
void protobuf_AddDesc_get_5farena_5finfo_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_get_5farena_5finfo_2eproto_once_,
                 &protobuf_AddDesc_get_5farena_5finfo_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_get_5farena_5finfo_2eproto {
  StaticDescriptorInitializer_get_5farena_5finfo_2eproto() {
    protobuf_AddDesc_get_5farena_5finfo_2eproto();
  }
} static_descriptor_initializer_get_5farena_5finfo_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int GetArenaInfoRequest::kMsgIDFieldNumber;
#endif  // !_MSC_VER

GetArenaInfoRequest::GetArenaInfoRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GetArenaInfoRequest::InitAsDefaultInstance() {
}

GetArenaInfoRequest::GetArenaInfoRequest(const GetArenaInfoRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GetArenaInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetArenaInfoRequest::~GetArenaInfoRequest() {
  SharedDtor();
}

void GetArenaInfoRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetArenaInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetArenaInfoRequest& GetArenaInfoRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_get_5farena_5finfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_get_5farena_5finfo_2eproto();
#endif
  return *default_instance_;
}

GetArenaInfoRequest* GetArenaInfoRequest::default_instance_ = NULL;

GetArenaInfoRequest* GetArenaInfoRequest::New() const {
  return new GetArenaInfoRequest;
}

void GetArenaInfoRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GetArenaInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sanguo.MsgID msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::sanguo::MsgID >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetArenaInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .sanguo.MsgID msgID = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

}

int GetArenaInfoRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .sanguo.MsgID msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetArenaInfoRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetArenaInfoRequest*>(&from));
}

void GetArenaInfoRequest::MergeFrom(const GetArenaInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
}

void GetArenaInfoRequest::CopyFrom(const GetArenaInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetArenaInfoRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetArenaInfoRequest::Swap(GetArenaInfoRequest* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetArenaInfoRequest::GetTypeName() const {
  return "sanguo.GetArenaInfoRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int GetArenaInfoResponse::kMsgIDFieldNumber;
const int GetArenaInfoResponse::kStatusFieldNumber;
const int GetArenaInfoResponse::kArenaRankFieldNumber;
const int GetArenaInfoResponse::kFreeBattleCountFieldNumber;
const int GetArenaInfoResponse::kBattleCountCostFieldNumber;
const int GetArenaInfoResponse::kBattleLogFieldNumber;
const int GetArenaInfoResponse::kVictoryCountFieldNumber;
const int GetArenaInfoResponse::kDefeatCountFieldNumber;
const int GetArenaInfoResponse::kCaptureTimesFieldNumber;
const int GetArenaInfoResponse::kBuyPkCountTodayFieldNumber;
const int GetArenaInfoResponse::kTopsFieldNumber;
#endif  // !_MSC_VER

GetArenaInfoResponse::GetArenaInfoResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GetArenaInfoResponse::InitAsDefaultInstance() {
}

GetArenaInfoResponse::GetArenaInfoResponse(const GetArenaInfoResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GetArenaInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 1;
  status_ = 0;
  arenarank_ = GOOGLE_ULONGLONG(0);
  freebattlecount_ = 0u;
  battlecountcost_ = 0u;
  battlelog_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  victorycount_ = 0u;
  defeatcount_ = 0u;
  capturetimes_ = GOOGLE_ULONGLONG(0);
  buypkcounttoday_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetArenaInfoResponse::~GetArenaInfoResponse() {
  SharedDtor();
}

void GetArenaInfoResponse::SharedDtor() {
  if (battlelog_ != &::google::protobuf::internal::kEmptyString) {
    delete battlelog_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetArenaInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetArenaInfoResponse& GetArenaInfoResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_get_5farena_5finfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_get_5farena_5finfo_2eproto();
#endif
  return *default_instance_;
}

GetArenaInfoResponse* GetArenaInfoResponse::default_instance_ = NULL;

GetArenaInfoResponse* GetArenaInfoResponse::New() const {
  return new GetArenaInfoResponse;
}

void GetArenaInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 1;
    status_ = 0;
    arenarank_ = GOOGLE_ULONGLONG(0);
    freebattlecount_ = 0u;
    battlecountcost_ = 0u;
    if (has_battlelog()) {
      if (battlelog_ != &::google::protobuf::internal::kEmptyString) {
        battlelog_->clear();
      }
    }
    victorycount_ = 0u;
    defeatcount_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    capturetimes_ = GOOGLE_ULONGLONG(0);
    buypkcounttoday_ = 0u;
  }
  tops_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GetArenaInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sanguo.MsgID msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::sanguo::MsgID >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .sanguo.StatusCode status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::StatusCode_IsValid(value)) {
            set_status(static_cast< ::sanguo::StatusCode >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_arenaRank;
        break;
      }

      // optional uint64 arenaRank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arenaRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &arenarank_)));
          set_has_arenarank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_freeBattleCount;
        break;
      }

      // optional uint32 freeBattleCount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freeBattleCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &freebattlecount_)));
          set_has_freebattlecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_battleCountCost;
        break;
      }

      // optional uint32 battleCountCost = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battleCountCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battlecountcost_)));
          set_has_battlecountcost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_battleLog;
        break;
      }

      // optional string battleLog = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battleLog:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_battlelog()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_victoryCount;
        break;
      }

      // optional uint32 victoryCount = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_victoryCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &victorycount_)));
          set_has_victorycount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_defeatCount;
        break;
      }

      // optional uint32 defeatCount = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defeatCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defeatcount_)));
          set_has_defeatcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_captureTimes;
        break;
      }

      // optional uint64 captureTimes = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_captureTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &capturetimes_)));
          set_has_capturetimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_buyPkCountToday;
        break;
      }

      // optional uint32 buyPkCountToday = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyPkCountToday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buypkcounttoday_)));
          set_has_buypkcounttoday();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_tops;
        break;
      }

      // repeated .sanguo.MsgRoleData tops = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tops:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tops()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_tops;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetArenaInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .sanguo.MsgID msgID = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // required .sanguo.StatusCode status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // optional uint64 arenaRank = 3;
  if (has_arenarank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->arenarank(), output);
  }

  // optional uint32 freeBattleCount = 4;
  if (has_freebattlecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->freebattlecount(), output);
  }

  // optional uint32 battleCountCost = 5;
  if (has_battlecountcost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->battlecountcost(), output);
  }

  // optional string battleLog = 6;
  if (has_battlelog()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->battlelog(), output);
  }

  // optional uint32 victoryCount = 7;
  if (has_victorycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->victorycount(), output);
  }

  // optional uint32 defeatCount = 8;
  if (has_defeatcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->defeatcount(), output);
  }

  // optional uint64 captureTimes = 9;
  if (has_capturetimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->capturetimes(), output);
  }

  // optional uint32 buyPkCountToday = 10;
  if (has_buypkcounttoday()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->buypkcounttoday(), output);
  }

  // repeated .sanguo.MsgRoleData tops = 11;
  for (int i = 0; i < this->tops_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->tops(i), output);
  }

}

int GetArenaInfoResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .sanguo.MsgID msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // required .sanguo.StatusCode status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional uint64 arenaRank = 3;
    if (has_arenarank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->arenarank());
    }

    // optional uint32 freeBattleCount = 4;
    if (has_freebattlecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->freebattlecount());
    }

    // optional uint32 battleCountCost = 5;
    if (has_battlecountcost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battlecountcost());
    }

    // optional string battleLog = 6;
    if (has_battlelog()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->battlelog());
    }

    // optional uint32 victoryCount = 7;
    if (has_victorycount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->victorycount());
    }

    // optional uint32 defeatCount = 8;
    if (has_defeatcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defeatcount());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 captureTimes = 9;
    if (has_capturetimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->capturetimes());
    }

    // optional uint32 buyPkCountToday = 10;
    if (has_buypkcounttoday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buypkcounttoday());
    }

  }
  // repeated .sanguo.MsgRoleData tops = 11;
  total_size += 1 * this->tops_size();
  for (int i = 0; i < this->tops_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tops(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetArenaInfoResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetArenaInfoResponse*>(&from));
}

void GetArenaInfoResponse::MergeFrom(const GetArenaInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  tops_.MergeFrom(from.tops_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_arenarank()) {
      set_arenarank(from.arenarank());
    }
    if (from.has_freebattlecount()) {
      set_freebattlecount(from.freebattlecount());
    }
    if (from.has_battlecountcost()) {
      set_battlecountcost(from.battlecountcost());
    }
    if (from.has_battlelog()) {
      set_battlelog(from.battlelog());
    }
    if (from.has_victorycount()) {
      set_victorycount(from.victorycount());
    }
    if (from.has_defeatcount()) {
      set_defeatcount(from.defeatcount());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_capturetimes()) {
      set_capturetimes(from.capturetimes());
    }
    if (from.has_buypkcounttoday()) {
      set_buypkcounttoday(from.buypkcounttoday());
    }
  }
}

void GetArenaInfoResponse::CopyFrom(const GetArenaInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetArenaInfoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < tops_size(); i++) {
    if (!this->tops(i).IsInitialized()) return false;
  }
  return true;
}

void GetArenaInfoResponse::Swap(GetArenaInfoResponse* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(status_, other->status_);
    std::swap(arenarank_, other->arenarank_);
    std::swap(freebattlecount_, other->freebattlecount_);
    std::swap(battlecountcost_, other->battlecountcost_);
    std::swap(battlelog_, other->battlelog_);
    std::swap(victorycount_, other->victorycount_);
    std::swap(defeatcount_, other->defeatcount_);
    std::swap(capturetimes_, other->capturetimes_);
    std::swap(buypkcounttoday_, other->buypkcounttoday_);
    tops_.Swap(&other->tops_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetArenaInfoResponse::GetTypeName() const {
  return "sanguo.GetArenaInfoResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sanguo

// @@protoc_insertion_point(global_scope)
