// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: constants.proto

#ifndef PROTOBUF_constants_2eproto__INCLUDED
#define PROTOBUF_constants_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace sanguo {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_constants_2eproto();
void protobuf_AssignDesc_constants_2eproto();
void protobuf_ShutdownFile_constants_2eproto();


enum RoleProfession {
  WARRIOR = 1,
  ASSASSIN = 2,
  MAGICIAN = 4,
  SWORDSMAN = 8
};
bool RoleProfession_IsValid(int value);
const RoleProfession RoleProfession_MIN = WARRIOR;
const RoleProfession RoleProfession_MAX = SWORDSMAN;
const int RoleProfession_ARRAYSIZE = RoleProfession_MAX + 1;

enum RoleDataType {
  MINE = 1,
  OTHERS = 2,
  ARENA = 3,
  STATUES = 4,
  COMRADE = 5,
  WORLDBOSS = 6,
  YIJUN_CAPTURER = 7
};
bool RoleDataType_IsValid(int value);
const RoleDataType RoleDataType_MIN = MINE;
const RoleDataType RoleDataType_MAX = YIJUN_CAPTURER;
const int RoleDataType_ARRAYSIZE = RoleDataType_MAX + 1;

enum BagPetCount {
  BAG_PET_COUNT_MAX = 50
};
bool BagPetCount_IsValid(int value);
const BagPetCount BagPetCount_MIN = BAG_PET_COUNT_MAX;
const BagPetCount BagPetCount_MAX = BAG_PET_COUNT_MAX;
const int BagPetCount_ARRAYSIZE = BagPetCount_MAX + 1;

enum BagCount {
  BAG_COUNT_INIT = 32,
  BAG_COUNT_MAX = 80
};
bool BagCount_IsValid(int value);
const BagCount BagCount_MIN = BAG_COUNT_INIT;
const BagCount BagCount_MAX = BAG_COUNT_MAX;
const int BagCount_ARRAYSIZE = BagCount_MAX + 1;

enum BagGuaxiangCount {
  BAG_GUAXIANG_COUNT_INIT = 8,
  BAG_GUAXIANG_COUNT_MAX = 16
};
bool BagGuaxiangCount_IsValid(int value);
const BagGuaxiangCount BagGuaxiangCount_MIN = BAG_GUAXIANG_COUNT_INIT;
const BagGuaxiangCount BagGuaxiangCount_MAX = BAG_GUAXIANG_COUNT_MAX;
const int BagGuaxiangCount_ARRAYSIZE = BagGuaxiangCount_MAX + 1;

enum GoodsStatus {
  GOODS_NORMAL = 0,
  GOODS_EQUIPED = 1,
  GOODS_SELLED = 2,
  GOODS_DELETE = 3,
  GOODS_LOCK = 4
};
bool GoodsStatus_IsValid(int value);
const GoodsStatus GoodsStatus_MIN = GOODS_NORMAL;
const GoodsStatus GoodsStatus_MAX = GOODS_LOCK;
const int GoodsStatus_ARRAYSIZE = GoodsStatus_MAX + 1;

enum GoodsType {
  GOODS_EQUIPMENT = 1,
  GOODS_JEWELRY = 2,
  GOODS_SKILLBOOKFRAGMENT = 3,
  GOODS_SKILLBOOK = 4,
  GOODS_GEM = 5,
  GOODS_GIFTINBAG = 6,
  GOODS_GUAXIANG = 7,
  GOODS_YUNTIE = 9,
  GOODS_KUNGFU = 10,
  GOODS_BATTLE = 11,
  GOODS_VIP_EXP_CARD = 12,
  GOODS_KUNGFU_ENHANCE_TAOLU = 13,
  GOODS_PET_EGG = 15,
  GOODS_PET_FEED = 16
};
bool GoodsType_IsValid(int value);
const GoodsType GoodsType_MIN = GOODS_EQUIPMENT;
const GoodsType GoodsType_MAX = GOODS_PET_FEED;
const int GoodsType_ARRAYSIZE = GoodsType_MAX + 1;

enum CooldownType {
  COOLDOWN_ENHANCE_EQUIP = 1,
  COOLDOWN_UPGRADE_SKILL = 2,
  COOLDOWN_OPENCHEST_COPPER = 3,
  COOLDOWN_OPENCHEST_SILVER = 4,
  COOLDOWN_OPENCHEST_GOLD = 5,
  COOLDOWN_SWEEP_DUNGEON = 6,
  COOLDOWN_KUNGFU = 7,
  COOLDOWN_VIP_EXPERENCED_LV = 8,
  COOLDOWN_MONTH_CARD = 9,
  COOLDOWN_PET_BORNING_SLOT_ONE = 10,
  COOLDOWN_PET__SLOT_TWO = 11,
  COOLDOWN_PET__SLOT_THREE = 12
};
bool CooldownType_IsValid(int value);
const CooldownType CooldownType_MIN = COOLDOWN_ENHANCE_EQUIP;
const CooldownType CooldownType_MAX = COOLDOWN_PET__SLOT_THREE;
const int CooldownType_ARRAYSIZE = CooldownType_MAX + 1;

enum RoleEquipPlace {
  WEAPON = 1,
  HELMET = 2,
  ARMOR = 3,
  PANTS = 4,
  JEWULRY1 = 5,
  JEWULRY2 = 6
};
bool RoleEquipPlace_IsValid(int value);
const RoleEquipPlace RoleEquipPlace_MIN = WEAPON;
const RoleEquipPlace RoleEquipPlace_MAX = JEWULRY2;
const int RoleEquipPlace_ARRAYSIZE = RoleEquipPlace_MAX + 1;

enum KungfuConstans {
  MAX_STAR = 5,
  MAX_LEVEL = 70
};
bool KungfuConstans_IsValid(int value);
const KungfuConstans KungfuConstans_MIN = MAX_STAR;
const KungfuConstans KungfuConstans_MAX = MAX_LEVEL;
const int KungfuConstans_ARRAYSIZE = KungfuConstans_MAX + 1;

enum GemType {
  GEM_HP = 1,
  GEM_PHYSICALATK = 2,
  GEM_PHYSICALDEF = 3,
  GEM_SKILLATK = 4,
  GEM_SKILLDEF = 5,
  GEM_MAGICATK = 6,
  GEM_MAGICDEF = 7
};
bool GemType_IsValid(int value);
const GemType GemType_MIN = GEM_HP;
const GemType GemType_MAX = GEM_MAGICDEF;
const int GemType_ARRAYSIZE = GemType_MAX + 1;

enum PropertyType {
  HP = 1,
  PHYSICALATK = 2,
  PHYSICALDEF = 3,
  SKILLATK = 4,
  SKILLDEF = 5,
  MAGICATK = 6,
  MAGICDEF = 7,
  CRITICAL = 8,
  TOUGHNESS = 9,
  DODGE = 10,
  HIT = 11,
  BLOCK = 12,
  SUNDER = 13
};
bool PropertyType_IsValid(int value);
const PropertyType PropertyType_MIN = HP;
const PropertyType PropertyType_MAX = SUNDER;
const int PropertyType_ARRAYSIZE = PropertyType_MAX + 1;

enum EquipmentQuality {
  EQUIPMENT_GREEN = 1,
  EQUIPMENT_BLUE = 2,
  EQUIPMENT_PURPLE = 3,
  EQUIPMENT_ORANGE = 4,
  EQUIPMENT_RED = 5
};
bool EquipmentQuality_IsValid(int value);
const EquipmentQuality EquipmentQuality_MIN = EQUIPMENT_GREEN;
const EquipmentQuality EquipmentQuality_MAX = EQUIPMENT_RED;
const int EquipmentQuality_ARRAYSIZE = EquipmentQuality_MAX + 1;

enum GuaxiangQuality {
  GUAXIANG_GREEN = 1,
  GUAXIANG_BLUE = 2,
  GUAXIANG_PURPLE = 3,
  GUAXIANG_ORANGE = 4,
  GUAXIANG_RED = 5,
  GUAXIANG_GRAY = 11,
  GUAXIANG_YIN_YANG_YU = 12
};
bool GuaxiangQuality_IsValid(int value);
const GuaxiangQuality GuaxiangQuality_MIN = GUAXIANG_GREEN;
const GuaxiangQuality GuaxiangQuality_MAX = GUAXIANG_YIN_YANG_YU;
const int GuaxiangQuality_ARRAYSIZE = GuaxiangQuality_MAX + 1;

enum DiceRewordType {
  REWORD_TWICE = 1,
  REWORD_COPPER = 2,
  REWORD_HONOR = 3,
  REWORD_GOLD = 4,
  REWORD_GEM = 5,
  REWORD_SKILLBOOKFRAGMENT = 6,
  REWORD_POWER = 7,
  REWORD_GUNGFU = 8
};
bool DiceRewordType_IsValid(int value);
const DiceRewordType DiceRewordType_MIN = REWORD_TWICE;
const DiceRewordType DiceRewordType_MAX = REWORD_GUNGFU;
const int DiceRewordType_ARRAYSIZE = DiceRewordType_MAX + 1;

enum ChestType {
  CHEST_COPPER = 1,
  CHEST_SILVER = 2,
  CHEST_GOLD = 3
};
bool ChestType_IsValid(int value);
const ChestType ChestType_MIN = CHEST_COPPER;
const ChestType ChestType_MAX = CHEST_GOLD;
const int ChestType_ARRAYSIZE = ChestType_MAX + 1;

enum MissionType {
  NORMAL_MISSION = 1,
  DAILY_MISSION = 2,
  YIJUN_MISSION = 3
};
bool MissionType_IsValid(int value);
const MissionType MissionType_MIN = NORMAL_MISSION;
const MissionType MissionType_MAX = YIJUN_MISSION;
const int MissionType_ARRAYSIZE = MissionType_MAX + 1;

enum NormalMissionType {
  NORMAL_MISSION_TRUNK = 1,
  NORMAL_MISSION_BRANCH = 2
};
bool NormalMissionType_IsValid(int value);
const NormalMissionType NormalMissionType_MIN = NORMAL_MISSION_TRUNK;
const NormalMissionType NormalMissionType_MAX = NORMAL_MISSION_BRANCH;
const int NormalMissionType_ARRAYSIZE = NormalMissionType_MAX + 1;

enum MissionFinishType {
  MISSION_FINISH_CERTEN_STAGE = 1,
  MISSION_ONE_KEY_UPDETE_KONGFU = 2,
  MISSION_KILL_ENEMY_ON_CERTEN_STAGE = 3,
  MISSION_VIP_LEVEL_TO_CERTAIN_LEVEL = 4,
  MISSION_FINISH_CERTEN_STAGE_FULL_STAR = 5,
  MISSION_USE_GOLD = 6,
  MISSION_COMPOSE_GEM = 7,
  MISSION_EAT_EQUIP = 8,
  MISSION_KUNGFU_LEVEL_UP = 9,
  MISSION_PASSIVE_SKILL_LEVELUP = 10,
  MISSION_FIGHT_ON_ARENA = 11,
  MISSION_SHAKE_MONEY_TREE = 12,
  MISSION_DIVING = 13,
  MISSION_DONATE_FOR_YIJUN = 14,
  MISSION_PRAY_FOR_YIJUN = 15,
  MISSION_GAMBLE_EQUIPMENT = 16,
  MISSION_TALK_WITH_NPC = 17,
  MISSION_FULL_STAR_ON_STAGE_WORLD_MAP = 18,
  MISSION_EQUIP_EQUIPMENT = 19,
  MISSION_EQUIP_GEM = 20,
  MISSION_EQUIP_GUAXIANG = 21,
  MISSION_OPEN_YIJUN_SCEEN = 22,
  MISSION_ACCEPT_DAILY_MISSION = 23,
  MISSION_HAVE_NUM_JADE = 24,
  MISSION_KILL_BOSS_ON_STAGE = 25,
  MISSION_KILL_CERTAIN_TYPE_ENEMY = 26,
  MISSION_ACCEPT_NORMAL_BRANCH_MISSION = 27,
  MISSION_UPGRADE_EQUIPMENT_TO_CERTAIN_LEVEL = 28,
  MISSION_UPGRADE_KONGFU_TO_CERTAIN_LEVEL = 29,
  MISSION_HAVE_NUM_CERTAIN_LEVEL_KONGFU = 30,
  MISSION_HAVE_NUM_DIFFER_CERTAIN_LEVEL_KONGFU = 31,
  MISSION_CERTAIN_TAOLU_HAVE_NUM_KONGFU = 32,
  MISSION_EQUIP_NUM_KONGFU_TO_CERTAIN_KONGFU_SLOT = 33,
  MISSION_REPLACE_NUM_KONGFU_FROM_KONGFU_SLOT = 34,
  MISSION_EQUIP_FULL_GEM_ON_CERTAIN_GEM_SLOT = 35,
  MISSION_HAVE_NUM_CERTAIN_LEVEL_AND_CERTAIN_PRIORITY_GOODS = 36,
  MISSION_HAVE_NUM_CERTAIN_LEVEL_SKILL = 37,
  MISSION_FINISH_NUM_DAILY_MISSION = 38,
  MISSION_JOIN_OR_SETUP_YIJUN = 39,
  MISSION_HAVE_NUM_YIJUN_BUILDING = 40,
  MISSION_HAVE_NUM_YIJUN_SKILL = 41,
  MISSION_UPGRADE_YIJUN_SKILL_NUM_TIMES = 42,
  MISSION_YIJUN_LEVEL_TO_CERTAIN_LEVEL = 43,
  MISSION_HAVE_CERTAIN_TAOLU = 44,
  MISSION_COMPLETED_LIBRARY_TIMES = 45,
  MISSION_WORLDBOSS_FIGHT_TIMES = 46,
  MISSION_WORSHIP_TIMES = 47,
  MISSION_CAPTURE_ATTACK_TIMES = 48,
  MISSION_CAPTURE_DEFENCE_TIMES = 49,
  MISSION_KUNGFU_STAR_LEVEL_UP_TIMES = 50,
  MISSION_HAVE_NUM_DIFFER_CERTAIN_STARLEVEL_KONGFU = 51
};
bool MissionFinishType_IsValid(int value);
const MissionFinishType MissionFinishType_MIN = MISSION_FINISH_CERTEN_STAGE;
const MissionFinishType MissionFinishType_MAX = MISSION_HAVE_NUM_DIFFER_CERTAIN_STARLEVEL_KONGFU;
const int MissionFinishType_ARRAYSIZE = MissionFinishType_MAX + 1;

enum MissionState {
  MISSION_STATE_UNACCEPT = 1,
  MISSION_STATE_IS_DOING = 2,
  MISSION_STATE_FINISH = 3,
  MISSION_STATE_GIVE_UP = 4,
  MISSION_STATE_COMPLETEED = 5,
  MISSION_STATE_CANNOT_ACCEPT = 6
};
bool MissionState_IsValid(int value);
const MissionState MissionState_MIN = MISSION_STATE_UNACCEPT;
const MissionState MissionState_MAX = MISSION_STATE_CANNOT_ACCEPT;
const int MissionState_ARRAYSIZE = MissionState_MAX + 1;

enum YijunPosition {
  YIJUN_POSITION_SOLDIER = 1,
  YIJUN_POSITION_GENERAL = 4,
  YIJUN_POSITION_MARSHAL = 7
};
bool YijunPosition_IsValid(int value);
const YijunPosition YijunPosition_MIN = YIJUN_POSITION_SOLDIER;
const YijunPosition YijunPosition_MAX = YIJUN_POSITION_MARSHAL;
const int YijunPosition_ARRAYSIZE = YijunPosition_MAX + 1;

enum YijunCaptureResult {
  TYPE_FAILUER_DEFENSE = 1,
  TYPE_SUCCESS_DEFENSE = 0
};
bool YijunCaptureResult_IsValid(int value);
const YijunCaptureResult YijunCaptureResult_MIN = TYPE_SUCCESS_DEFENSE;
const YijunCaptureResult YijunCaptureResult_MAX = TYPE_FAILUER_DEFENSE;
const int YijunCaptureResult_ARRAYSIZE = YijunCaptureResult_MAX + 1;

enum GetYijunInfoType {
  TYPE_YIJUN = 0,
  TYPE_YIJUN_CAPTURE = 1
};
bool GetYijunInfoType_IsValid(int value);
const GetYijunInfoType GetYijunInfoType_MIN = TYPE_YIJUN;
const GetYijunInfoType GetYijunInfoType_MAX = TYPE_YIJUN_CAPTURE;
const int GetYijunInfoType_ARRAYSIZE = GetYijunInfoType_MAX + 1;

enum DungeonType {
  DUNGEON_NORMAL = 1,
  DUNGEON_ELITE = 2
};
bool DungeonType_IsValid(int value);
const DungeonType DungeonType_MIN = DUNGEON_NORMAL;
const DungeonType DungeonType_MAX = DUNGEON_ELITE;
const int DungeonType_ARRAYSIZE = DungeonType_MAX + 1;

enum StoryOrder {
  AFTER_ACCEPT_MISSION = 1,
  START_DUNGEON = 2,
  BEFORE_BOSS = 3,
  AFTER_BOSS = 4,
  AFTER_COMPLETE_MISSION = 5
};
bool StoryOrder_IsValid(int value);
const StoryOrder StoryOrder_MIN = AFTER_ACCEPT_MISSION;
const StoryOrder StoryOrder_MAX = AFTER_COMPLETE_MISSION;
const int StoryOrder_ARRAYSIZE = StoryOrder_MAX + 1;

enum StoryType {
  STORY_TALK = 1,
  STORY_ANIMATION = 2,
  STORY_LEAD = 3,
  STORY_OPEN_LAYER = 4,
  STORY_FIND_NPC = 5,
  STORY_FIND_DUNGEON = 6
};
bool StoryType_IsValid(int value);
const StoryType StoryType_MIN = STORY_TALK;
const StoryType StoryType_MAX = STORY_FIND_DUNGEON;
const int StoryType_ARRAYSIZE = StoryType_MAX + 1;

enum ChatType {
  CHAT_WORLD = 1,
  CHAT_YIJUN = 2,
  CHAT_PRIVATE = 3,
  CHAT_BROADCAST = 4,
  CHAT_SYSTEM = 5
};
bool ChatType_IsValid(int value);
const ChatType ChatType_MIN = CHAT_WORLD;
const ChatType ChatType_MAX = CHAT_SYSTEM;
const int ChatType_ARRAYSIZE = ChatType_MAX + 1;

enum MarqueType {
  TYPE_GAMBLE = 1,
  TYPE_ACTIVITY = 2,
  TYPE_GUAXIANG = 3,
  TYPE_VIP_GIFT = 4,
  TYPE_STONE_COMBINE = 5,
  TYPE_VIP_LEVEL_UP = 6,
  TYPE_EQUIPE_STRONG = 7,
  TYPE_ARENA = 8,
  TYPE_YIJUN_LEVEL_UP = 9,
  TYPE_YIJUN_JIANZHU = 10,
  TYPE_SKILL_MAX = 11,
  TYPE_ACTIVE_SKILL = 12,
  TYPE_SENIOR_PASSIVE_SKILL = 13,
  TYPE_JUNIOR_PASSIVE_SKILL = 14,
  TYPE_SUCCESS_JOIN_YIJUN = 15,
  TYPE_YIJUN_MEMBER_UP = 16,
  TYPE_YIJUN_TRANSFER = 17,
  TYPE_YIJUN_GENERAL_DEMOTION = 18,
  TYPE_YIJUN_KICKEDOUT = 19,
  TYPE_SYSTEM = 20,
  TYPE_FULL_STAR_DUNGEON = 21,
  TYPE_OPEN_SENIOR_PAASIVE_SKILL = 22,
  TYPE_OPEN_JUNIOR_PAASIVE_SKILL = 23,
  TYPE_EVERY_FIVE_INTERVAL_ENHANCE_EQUIPMENT = 24,
  TYPE_KUNGFU_OPEN = 25,
  TYPE_KUNGFU_LEVEL_UP = 26,
  TYPE_WORLDBOSS_WILL_OPEN = 27,
  TYPE_WORLDBOSS_RANK = 28,
  TYPE_WORLDBOSS_OPENED = 29,
  TYPE_WORLDBOSS_FINAL_ATTACK = 30,
  TYPE_STATUES = 31,
  TYPE_ACHIEVEMENT_KILL_MONSTER = 32,
  TYPE_ACHIEVEMENT_KILL_BOSS = 33,
  TYPE_ACHIEVEMENT_ENHANCE_EQUIP = 34,
  TYPE_ACHIEVEMENT_COMPOSE_GEM = 35,
  TYPE_ACHIEVEMENT_DICE = 36,
  TYPE_ACHIEVEMENT_ROLE_LEVEL = 37,
  TYPE_ACHIEVEMENT_AREANA_RANK = 38,
  TYPE_ACHIEVEMENT_FIGHT = 39,
  TYPE_ACHIEVEMENT_COPPER_0 = 40,
  TYPE_ACHIEVEMENT_COPPER_1 = 41,
  TYPE_ACHIEVEMENT_COPPER_OTHER = 42,
  TYPE_ACHIEVEMENT_ONLINE_TIME = 43,
  TYPE_ACHIEVEMENT_DUNGEON = 44,
  TYPE_ACHIEVEMENT_DAILY_MISSION = 45,
  TYPE_ACHIEVEMENT_KUNGFU_LEVEL_UP = 46,
  TYPE_ACHIEVEMENT_PASSIVE_LEVEL_UP = 47,
  TYPE_ACHIEVEMENT_YIJUNSKILL_LEVEL_UP = 48,
  TYPE_ACHIEVEMENT_GAMBLE = 49,
  TYPE_ACHIEVEMENT_GOLDCHEST = 50,
  TYPE_ACHIEVEMENT_SPECIAL_DUNGEON = 51,
  TYPE_ACHIEVEMENT_WORLDBOSS = 52,
  TYPE_ACHIEVEMENT_MONEY_TREE = 53,
  TYPE_ACHIEVEMENT_KUNGFU_COLLECT = 54,
  TYPE_ACHIEVEMENT_YIJUN_CAPTURE = 55,
  TYPE_DUNGEON_RANK = 70,
  TYPE_KUNGFU_REFERESH_STAR = 71,
  TYPE_YIJUNBOSS_WILL_OPEN = 72,
  TYPE_YIJUNBOSS_RANK = 73,
  TYPE_YIJUNBOSS_OPENED = 74,
  TYPE_YIJUNBOSS_FINAL_ATTACK = 75
};
bool MarqueType_IsValid(int value);
const MarqueType MarqueType_MIN = TYPE_GAMBLE;
const MarqueType MarqueType_MAX = TYPE_YIJUNBOSS_FINAL_ATTACK;
const int MarqueType_ARRAYSIZE = MarqueType_MAX + 1;

enum SweepDungeonType {
  SWEEP_DUNGEON_ALL_POWER = 1,
  SWEEP_DUNGEON_TWO_TIMES = 2,
  SWEEP_DUNGEON_FOUR_IMES = 3,
  SWEEP_TONGTIAN_TOWER = 4
};
bool SweepDungeonType_IsValid(int value);
const SweepDungeonType SweepDungeonType_MIN = SWEEP_DUNGEON_ALL_POWER;
const SweepDungeonType SweepDungeonType_MAX = SWEEP_TONGTIAN_TOWER;
const int SweepDungeonType_ARRAYSIZE = SweepDungeonType_MAX + 1;

enum SweepDungeon {
  ONE_SWEEP_COST_POWER = 10,
  ACCELERATE_SWEEP_COST_GOLD = 1
};
bool SweepDungeon_IsValid(int value);
const SweepDungeon SweepDungeon_MIN = ACCELERATE_SWEEP_COST_GOLD;
const SweepDungeon SweepDungeon_MAX = ONE_SWEEP_COST_POWER;
const int SweepDungeon_ARRAYSIZE = SweepDungeon_MAX + 1;

enum KickOutReason {
  LOGIN_OTHER_PLACE = 1,
  GM_LOCK_ACCOUNT = 2,
  GM_KICK_ROLE = 3,
  GM_LOCK_ROLE = 4
};
bool KickOutReason_IsValid(int value);
const KickOutReason KickOutReason_MIN = LOGIN_OTHER_PLACE;
const KickOutReason KickOutReason_MAX = GM_LOCK_ROLE;
const int KickOutReason_ARRAYSIZE = KickOutReason_MAX + 1;

enum Priority {
  SYSTEM_PRIORITY = 1,
  OTHER_PRIORITY = 2
};
bool Priority_IsValid(int value);
const Priority Priority_MIN = SYSTEM_PRIORITY;
const Priority Priority_MAX = OTHER_PRIORITY;
const int Priority_ARRAYSIZE = Priority_MAX + 1;

enum GambleEquipCostType {
  TYPE_FREE_TIMES = 1,
  TYPE_TICKET_COST = 2,
  TYPE_JADE_COST = 3,
  TYPE_JADE_MUTIL_COST = 4,
  TYPE_JADE_FIRST_GOLD = 5
};
bool GambleEquipCostType_IsValid(int value);
const GambleEquipCostType GambleEquipCostType_MIN = TYPE_FREE_TIMES;
const GambleEquipCostType GambleEquipCostType_MAX = TYPE_JADE_FIRST_GOLD;
const int GambleEquipCostType_ARRAYSIZE = GambleEquipCostType_MAX + 1;

enum WorldbossCountDownType {
  NONE = 1,
  DUNGEON = 2,
  RESURRECTION = 3
};
bool WorldbossCountDownType_IsValid(int value);
const WorldbossCountDownType WorldbossCountDownType_MIN = NONE;
const WorldbossCountDownType WorldbossCountDownType_MAX = RESURRECTION;
const int WorldbossCountDownType_ARRAYSIZE = WorldbossCountDownType_MAX + 1;

enum WorldbossType {
  WORLD_BOSS = 1,
  YIJUN_BOSS = 2
};
bool WorldbossType_IsValid(int value);
const WorldbossType WorldbossType_MIN = WORLD_BOSS;
const WorldbossType WorldbossType_MAX = YIJUN_BOSS;
const int WorldbossType_ARRAYSIZE = WorldbossType_MAX + 1;

enum StatuesType {
  TYPE_YIJUN_FIGHT_MARSH = 1,
  TYPE_SERVER_FIGHT_FIRST = 2,
  TYPE_ARENA_FIRST = 3
};
bool StatuesType_IsValid(int value);
const StatuesType StatuesType_MIN = TYPE_YIJUN_FIGHT_MARSH;
const StatuesType StatuesType_MAX = TYPE_ARENA_FIRST;
const int StatuesType_ARRAYSIZE = StatuesType_MAX + 1;

enum BuffType {
  TYPE_ALL_ATTRIBUTES = 1,
  TYPE_EXP = 2,
  TYPE_COPPER = 3,
  TYPE_WORLDBOSS = 4,
  TYPE_YIJUNBOSS = 5
};
bool BuffType_IsValid(int value);
const BuffType BuffType_MIN = TYPE_ALL_ATTRIBUTES;
const BuffType BuffType_MAX = TYPE_YIJUNBOSS;
const int BuffType_ARRAYSIZE = BuffType_MAX + 1;

enum WorshipItemPollType {
  WORSHIP_OTHER_ITEMS = 1,
  WORSHIP_NO_GOODS_ITEM = 20000
};
bool WorshipItemPollType_IsValid(int value);
const WorshipItemPollType WorshipItemPollType_MIN = WORSHIP_OTHER_ITEMS;
const WorshipItemPollType WorshipItemPollType_MAX = WORSHIP_NO_GOODS_ITEM;
const int WorshipItemPollType_ARRAYSIZE = WorshipItemPollType_MAX + 1;

enum RechargeType {
  OTHER_TYPE = 0,
  MONTH_CARD_TYPE = 1
};
bool RechargeType_IsValid(int value);
const RechargeType RechargeType_MIN = OTHER_TYPE;
const RechargeType RechargeType_MAX = MONTH_CARD_TYPE;
const int RechargeType_ARRAYSIZE = RechargeType_MAX + 1;

enum BaseMoneyType {
  COPPER_TYPE = 10001,
  GOLD_TYPE = 10002,
  JADE_TYPE = 10003,
  HONOR_TYPE = 10004,
  JUNGONG_TYPE = 10005,
  POWER_TYPE = 10006,
  COPPER_TICKET_TYPE = 10007,
  SILVER_TICKET_TYPE = 10008,
  GOLD_TICKET_TYPE = 10009,
  FRIENDSHIP_TYPE = 10010,
  EXP_TYPE = 10011,
  EXP_CONTRIBUTION = 10012
};
bool BaseMoneyType_IsValid(int value);
const BaseMoneyType BaseMoneyType_MIN = COPPER_TYPE;
const BaseMoneyType BaseMoneyType_MAX = EXP_CONTRIBUTION;
const int BaseMoneyType_ARRAYSIZE = BaseMoneyType_MAX + 1;

enum BagType {
  GOODS_BAG_TYPE = 1,
  GEM_BAG_TYPE = 2,
  GUAXIANG_BAG_TYPE = 3,
  PET_BAG_TYPE = 4
};
bool BagType_IsValid(int value);
const BagType BagType_MIN = GOODS_BAG_TYPE;
const BagType BagType_MAX = PET_BAG_TYPE;
const int BagType_ARRAYSIZE = BagType_MAX + 1;

enum SaleState {
  NORMAL = 0,
  SOLD = 1
};
bool SaleState_IsValid(int value);
const SaleState SaleState_MIN = NORMAL;
const SaleState SaleState_MAX = SOLD;
const int SaleState_ARRAYSIZE = SaleState_MAX + 1;

enum FriendStatus {
  FRIEND_ACCEPT_UNDONE = 0,
  RIEND_ACCEPT_OK = 1,
  FRIEND_ACCEPT_REFUSE = 2
};
bool FriendStatus_IsValid(int value);
const FriendStatus FriendStatus_MIN = FRIEND_ACCEPT_UNDONE;
const FriendStatus FriendStatus_MAX = FRIEND_ACCEPT_REFUSE;
const int FriendStatus_ARRAYSIZE = FriendStatus_MAX + 1;

enum AchievementType {
  ACHIEVEMENT_KILL_MONSTER = 1,
  ACHIEVEMENT_KILL_BOSS = 2,
  ACHIEVEMENT_ENHANCE_EQUIP = 3,
  ACHIEVEMENT_COMPOSE_GEM = 4,
  ACHIEVEMENT_DICE = 5,
  ACHIEVEMENT_ROLE_LEVEL = 6,
  ACHIEVEMENT_AREANA_RANK = 7,
  ACHIEVEMENT_FIGHT = 8,
  ACHIEVEMENT_COPPER_0 = 9,
  ACHIEVEMENT_COPPER_1 = 10,
  ACHIEVEMENT_COPPER_OTHER = 11,
  ACHIEVEMENT_ONLINE_TIME = 12,
  ACHIEVEMENT_DUNGEON = 13,
  ACHIEVEMENT_DAILY_MISSION = 14,
  ACHIEVEMENT_KUNGFU_LEVEL_UP = 15,
  ACHIEVEMENT_PASSIVE_LEVEL_UP = 16,
  ACHIEVEMENT_YIJUNSKILL_LEVEL_UP = 17,
  ACHIEVEMENT_GAMBLE = 18,
  ACHIEVEMENT_GOLDCHEST = 19,
  ACHIEVEMENT_SPECIAL_DUNGEON = 20,
  ACHIEVEMENT_WORLDBOSS = 21,
  ACHIEVEMENT_MONEY_TREE = 22,
  ACHIEVEMENT_KUNGFU_COLLECT = 23,
  ACHIEVEMENT_YIJUN_CAPTURE = 24
};
bool AchievementType_IsValid(int value);
const AchievementType AchievementType_MIN = ACHIEVEMENT_KILL_MONSTER;
const AchievementType AchievementType_MAX = ACHIEVEMENT_YIJUN_CAPTURE;
const int AchievementType_ARRAYSIZE = AchievementType_MAX + 1;

enum FIGHTTYPE {
  FIGHT_DUNGEON_NORMAL = 1,
  FIGHT_DUNGEON_ELITE = 2,
  FIGHT_ARENA = 3,
  FIGHT_YIJUN = 4,
  FIGHT_SPECIAL_DUNGEON = 5
};
bool FIGHTTYPE_IsValid(int value);
const FIGHTTYPE FIGHTTYPE_MIN = FIGHT_DUNGEON_NORMAL;
const FIGHTTYPE FIGHTTYPE_MAX = FIGHT_SPECIAL_DUNGEON;
const int FIGHTTYPE_ARRAYSIZE = FIGHTTYPE_MAX + 1;

enum MailStatus {
  MAIL_UNREAD = 1,
  MAIL_MARK_READ = 2,
  MAIL_REMOVE = 3,
  KIT_OPEN = 4,
  KIT_NOT_OPEN = 5,
  MAIL_TYPE_SEND = 6,
  MAIL_TYPE_RECIVE = 7
};
bool MailStatus_IsValid(int value);
const MailStatus MailStatus_MIN = MAIL_UNREAD;
const MailStatus MailStatus_MAX = MAIL_TYPE_RECIVE;
const int MailStatus_ARRAYSIZE = MailStatus_MAX + 1;

enum MonthCardStatus {
  TYPE_OPEND_ACCESS = 1,
  TYPE_OPEND_NOT_ACCESS = 0,
  TYPE_NO_MONTCH_CARD = 2
};
bool MonthCardStatus_IsValid(int value);
const MonthCardStatus MonthCardStatus_MIN = TYPE_OPEND_NOT_ACCESS;
const MonthCardStatus MonthCardStatus_MAX = TYPE_NO_MONTCH_CARD;
const int MonthCardStatus_ARRAYSIZE = MonthCardStatus_MAX + 1;

enum PetEggType {
  PET_EGG_COPPER = 1,
  PET_EGG_SILVER = 2,
  PET_EGG__GOLD = 3
};
bool PetEggType_IsValid(int value);
const PetEggType PetEggType_MIN = PET_EGG_COPPER;
const PetEggType PetEggType_MAX = PET_EGG__GOLD;
const int PetEggType_ARRAYSIZE = PetEggType_MAX + 1;

enum PetStatus {
  PET_IDLE = 1,
  PET_FIGHTING = 2,
  PET_REST = 3,
  PET_ABANDON = 4,
  PET_BORNGIN = 5
};
bool PetStatus_IsValid(int value);
const PetStatus PetStatus_MIN = PET_IDLE;
const PetStatus PetStatus_MAX = PET_BORNGIN;
const int PetStatus_ARRAYSIZE = PetStatus_MAX + 1;

enum PetCoolDown {
  COOL_DOWN_FIGHTING = 2,
  COOL_DOWN_REST = 3,
  COOL_DOWN_IDLE = 4,
  COOL_DOWN_ABANDON = 5
};
bool PetCoolDown_IsValid(int value);
const PetCoolDown PetCoolDown_MIN = COOL_DOWN_FIGHTING;
const PetCoolDown PetCoolDown_MAX = COOL_DOWN_ABANDON;
const int PetCoolDown_ARRAYSIZE = PetCoolDown_MAX + 1;

enum PetBornEggStatus {
  PET_BORNING_EGG = 1,
  PET_BORNED_EGG = 2,
  PET_BORN_EGG_INVALID = 3,
  PET_BORN_EGG_OPENED = 4
};
bool PetBornEggStatus_IsValid(int value);
const PetBornEggStatus PetBornEggStatus_MIN = PET_BORNING_EGG;
const PetBornEggStatus PetBornEggStatus_MAX = PET_BORN_EGG_OPENED;
const int PetBornEggStatus_ARRAYSIZE = PetBornEggStatus_MAX + 1;

enum Leaderboard {
  ROLE_LEVEL = 1,
  ROLE_FIGHT = 2,
  ROLE_OFFICAL = 3,
  YIJUN_LEVEL = 4,
  YIJUN_FIGHT = 5,
  YIJUN_WEALTH = 6,
  CONSUME_COPPER = 7,
  CONSUME_JADE = 8,
  RECHARGE = 9,
  DUNGEON_MIN_TIME = 10,
  DUNGEON_MIN_POWER = 11,
  DUNGEON_MAX_BATTLE = 12,
  YIJUN_BOSS_RANK = 13
};
bool Leaderboard_IsValid(int value);
const Leaderboard Leaderboard_MIN = ROLE_LEVEL;
const Leaderboard Leaderboard_MAX = YIJUN_BOSS_RANK;
const int Leaderboard_ARRAYSIZE = Leaderboard_MAX + 1;

// ===================================================================


// ===================================================================


// ===================================================================


// @@protoc_insertion_point(namespace_scope)

}  // namespace sanguo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_constants_2eproto__INCLUDED
