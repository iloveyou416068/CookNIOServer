// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: worldboss_buy_buff.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "worldboss_buy_buff.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace sanguo {

void protobuf_ShutdownFile_worldboss_5fbuy_5fbuff_2eproto() {
  delete WorldbossBuyBuffRequest::default_instance_;
  delete WorldbossBuyBuffResponse::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_worldboss_5fbuy_5fbuff_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_worldboss_5fbuy_5fbuff_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::sanguo::protobuf_AddDesc_msg_5fid_2eproto();
  ::sanguo::protobuf_AddDesc_msg_5fstatus_5fcode_2eproto();
  ::sanguo::protobuf_AddDesc_role_5fbuff_5finfos_2eproto();
  ::sanguo::protobuf_AddDesc_constants_2eproto();
  WorldbossBuyBuffRequest::default_instance_ = new WorldbossBuyBuffRequest();
  WorldbossBuyBuffResponse::default_instance_ = new WorldbossBuyBuffResponse();
  WorldbossBuyBuffRequest::default_instance_->InitAsDefaultInstance();
  WorldbossBuyBuffResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_worldboss_5fbuy_5fbuff_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_worldboss_5fbuy_5fbuff_2eproto_once_);
void protobuf_AddDesc_worldboss_5fbuy_5fbuff_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_worldboss_5fbuy_5fbuff_2eproto_once_,
                 &protobuf_AddDesc_worldboss_5fbuy_5fbuff_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_worldboss_5fbuy_5fbuff_2eproto {
  StaticDescriptorInitializer_worldboss_5fbuy_5fbuff_2eproto() {
    protobuf_AddDesc_worldboss_5fbuy_5fbuff_2eproto();
  }
} static_descriptor_initializer_worldboss_5fbuy_5fbuff_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int WorldbossBuyBuffRequest::kMsgIDFieldNumber;
const int WorldbossBuyBuffRequest::kBuffIdFieldNumber;
const int WorldbossBuyBuffRequest::kBossIdFieldNumber;
const int WorldbossBuyBuffRequest::kBossTypeFieldNumber;
#endif  // !_MSC_VER

WorldbossBuyBuffRequest::WorldbossBuyBuffRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void WorldbossBuyBuffRequest::InitAsDefaultInstance() {
}

WorldbossBuyBuffRequest::WorldbossBuyBuffRequest(const WorldbossBuyBuffRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void WorldbossBuyBuffRequest::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 1;
  buffid_ = 0u;
  bossid_ = GOOGLE_ULONGLONG(0);
  bosstype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldbossBuyBuffRequest::~WorldbossBuyBuffRequest() {
  SharedDtor();
}

void WorldbossBuyBuffRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void WorldbossBuyBuffRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const WorldbossBuyBuffRequest& WorldbossBuyBuffRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_worldboss_5fbuy_5fbuff_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_worldboss_5fbuy_5fbuff_2eproto();
#endif
  return *default_instance_;
}

WorldbossBuyBuffRequest* WorldbossBuyBuffRequest::default_instance_ = NULL;

WorldbossBuyBuffRequest* WorldbossBuyBuffRequest::New() const {
  return new WorldbossBuyBuffRequest;
}

void WorldbossBuyBuffRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 1;
    buffid_ = 0u;
    bossid_ = GOOGLE_ULONGLONG(0);
    bosstype_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool WorldbossBuyBuffRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sanguo.MsgID msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::sanguo::MsgID >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_buffId;
        break;
      }

      // required uint32 buffId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buffId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buffid_)));
          set_has_buffid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bossId;
        break;
      }

      // required uint64 bossId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bossId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bossType;
        break;
      }

      // required .sanguo.WorldbossType bossType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bossType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::WorldbossType_IsValid(value)) {
            set_bosstype(static_cast< ::sanguo::WorldbossType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldbossBuyBuffRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .sanguo.MsgID msgID = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // required uint32 buffId = 2;
  if (has_buffid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->buffid(), output);
  }

  // required uint64 bossId = 3;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->bossid(), output);
  }

  // required .sanguo.WorldbossType bossType = 4;
  if (has_bosstype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->bosstype(), output);
  }

}

int WorldbossBuyBuffRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .sanguo.MsgID msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // required uint32 buffId = 2;
    if (has_buffid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buffid());
    }

    // required uint64 bossId = 3;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bossid());
    }

    // required .sanguo.WorldbossType bossType = 4;
    if (has_bosstype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bosstype());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldbossBuyBuffRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const WorldbossBuyBuffRequest*>(&from));
}

void WorldbossBuyBuffRequest::MergeFrom(const WorldbossBuyBuffRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_buffid()) {
      set_buffid(from.buffid());
    }
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
    if (from.has_bosstype()) {
      set_bosstype(from.bosstype());
    }
  }
}

void WorldbossBuyBuffRequest::CopyFrom(const WorldbossBuyBuffRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldbossBuyBuffRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void WorldbossBuyBuffRequest::Swap(WorldbossBuyBuffRequest* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(buffid_, other->buffid_);
    std::swap(bossid_, other->bossid_);
    std::swap(bosstype_, other->bosstype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string WorldbossBuyBuffRequest::GetTypeName() const {
  return "sanguo.WorldbossBuyBuffRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int WorldbossBuyBuffResponse::kMsgIDFieldNumber;
const int WorldbossBuyBuffResponse::kStatusFieldNumber;
const int WorldbossBuyBuffResponse::kRemainGoldFieldNumber;
const int WorldbossBuyBuffResponse::kRemainJadeFieldNumber;
const int WorldbossBuyBuffResponse::kRoleBuffFieldNumber;
#endif  // !_MSC_VER

WorldbossBuyBuffResponse::WorldbossBuyBuffResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void WorldbossBuyBuffResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  rolebuff_ = const_cast< ::sanguo::MsgRoleBuffInfos*>(
      ::sanguo::MsgRoleBuffInfos::internal_default_instance());
#else
  rolebuff_ = const_cast< ::sanguo::MsgRoleBuffInfos*>(&::sanguo::MsgRoleBuffInfos::default_instance());
#endif
}

WorldbossBuyBuffResponse::WorldbossBuyBuffResponse(const WorldbossBuyBuffResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void WorldbossBuyBuffResponse::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 1;
  status_ = 0;
  remaingold_ = 0u;
  remainjade_ = 0u;
  rolebuff_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldbossBuyBuffResponse::~WorldbossBuyBuffResponse() {
  SharedDtor();
}

void WorldbossBuyBuffResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete rolebuff_;
  }
}

void WorldbossBuyBuffResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const WorldbossBuyBuffResponse& WorldbossBuyBuffResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_worldboss_5fbuy_5fbuff_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_worldboss_5fbuy_5fbuff_2eproto();
#endif
  return *default_instance_;
}

WorldbossBuyBuffResponse* WorldbossBuyBuffResponse::default_instance_ = NULL;

WorldbossBuyBuffResponse* WorldbossBuyBuffResponse::New() const {
  return new WorldbossBuyBuffResponse;
}

void WorldbossBuyBuffResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 1;
    status_ = 0;
    remaingold_ = 0u;
    remainjade_ = 0u;
    if (has_rolebuff()) {
      if (rolebuff_ != NULL) rolebuff_->::sanguo::MsgRoleBuffInfos::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool WorldbossBuyBuffResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sanguo.MsgID msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::sanguo::MsgID >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .sanguo.StatusCode status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::StatusCode_IsValid(value)) {
            set_status(static_cast< ::sanguo::StatusCode >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_remainGold;
        break;
      }

      // optional uint32 remainGold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remainGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remaingold_)));
          set_has_remaingold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_remainJade;
        break;
      }

      // optional uint32 remainJade = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remainJade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remainjade_)));
          set_has_remainjade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_roleBuff;
        break;
      }

      // optional .sanguo.MsgRoleBuffInfos roleBuff = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleBuff:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rolebuff()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldbossBuyBuffResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .sanguo.MsgID msgID = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // required .sanguo.StatusCode status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // optional uint32 remainGold = 3;
  if (has_remaingold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->remaingold(), output);
  }

  // optional uint32 remainJade = 4;
  if (has_remainjade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->remainjade(), output);
  }

  // optional .sanguo.MsgRoleBuffInfos roleBuff = 5;
  if (has_rolebuff()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->rolebuff(), output);
  }

}

int WorldbossBuyBuffResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .sanguo.MsgID msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // required .sanguo.StatusCode status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional uint32 remainGold = 3;
    if (has_remaingold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remaingold());
    }

    // optional uint32 remainJade = 4;
    if (has_remainjade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remainjade());
    }

    // optional .sanguo.MsgRoleBuffInfos roleBuff = 5;
    if (has_rolebuff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rolebuff());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldbossBuyBuffResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const WorldbossBuyBuffResponse*>(&from));
}

void WorldbossBuyBuffResponse::MergeFrom(const WorldbossBuyBuffResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_remaingold()) {
      set_remaingold(from.remaingold());
    }
    if (from.has_remainjade()) {
      set_remainjade(from.remainjade());
    }
    if (from.has_rolebuff()) {
      mutable_rolebuff()->::sanguo::MsgRoleBuffInfos::MergeFrom(from.rolebuff());
    }
  }
}

void WorldbossBuyBuffResponse::CopyFrom(const WorldbossBuyBuffResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldbossBuyBuffResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_rolebuff()) {
    if (!this->rolebuff().IsInitialized()) return false;
  }
  return true;
}

void WorldbossBuyBuffResponse::Swap(WorldbossBuyBuffResponse* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(status_, other->status_);
    std::swap(remaingold_, other->remaingold_);
    std::swap(remainjade_, other->remainjade_);
    std::swap(rolebuff_, other->rolebuff_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string WorldbossBuyBuffResponse::GetTypeName() const {
  return "sanguo.WorldbossBuyBuffResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sanguo

// @@protoc_insertion_point(global_scope)
