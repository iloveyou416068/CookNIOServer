// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: yijunboss_info.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "yijunboss_info.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace sanguo {

void protobuf_ShutdownFile_yijunboss_5finfo_2eproto() {
  delete YijunbossInfoRequest::default_instance_;
  delete YijunbossInfoResponse::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_yijunboss_5finfo_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_yijunboss_5finfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::sanguo::protobuf_AddDesc_msg_5fid_2eproto();
  ::sanguo::protobuf_AddDesc_msg_5fstatus_5fcode_2eproto();
  ::sanguo::protobuf_AddDesc_role_5fbuff_5finfos_2eproto();
  YijunbossInfoRequest::default_instance_ = new YijunbossInfoRequest();
  YijunbossInfoResponse::default_instance_ = new YijunbossInfoResponse();
  YijunbossInfoRequest::default_instance_->InitAsDefaultInstance();
  YijunbossInfoResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_yijunboss_5finfo_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_yijunboss_5finfo_2eproto_once_);
void protobuf_AddDesc_yijunboss_5finfo_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_yijunboss_5finfo_2eproto_once_,
                 &protobuf_AddDesc_yijunboss_5finfo_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_yijunboss_5finfo_2eproto {
  StaticDescriptorInitializer_yijunboss_5finfo_2eproto() {
    protobuf_AddDesc_yijunboss_5finfo_2eproto();
  }
} static_descriptor_initializer_yijunboss_5finfo_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int YijunbossInfoRequest::kMsgIDFieldNumber;
#endif  // !_MSC_VER

YijunbossInfoRequest::YijunbossInfoRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void YijunbossInfoRequest::InitAsDefaultInstance() {
}

YijunbossInfoRequest::YijunbossInfoRequest(const YijunbossInfoRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void YijunbossInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YijunbossInfoRequest::~YijunbossInfoRequest() {
  SharedDtor();
}

void YijunbossInfoRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void YijunbossInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YijunbossInfoRequest& YijunbossInfoRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_yijunboss_5finfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_yijunboss_5finfo_2eproto();
#endif
  return *default_instance_;
}

YijunbossInfoRequest* YijunbossInfoRequest::default_instance_ = NULL;

YijunbossInfoRequest* YijunbossInfoRequest::New() const {
  return new YijunbossInfoRequest;
}

void YijunbossInfoRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool YijunbossInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sanguo.MsgID msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::sanguo::MsgID >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void YijunbossInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .sanguo.MsgID msgID = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

}

int YijunbossInfoRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .sanguo.MsgID msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YijunbossInfoRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const YijunbossInfoRequest*>(&from));
}

void YijunbossInfoRequest::MergeFrom(const YijunbossInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
}

void YijunbossInfoRequest::CopyFrom(const YijunbossInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YijunbossInfoRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void YijunbossInfoRequest::Swap(YijunbossInfoRequest* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string YijunbossInfoRequest::GetTypeName() const {
  return "sanguo.YijunbossInfoRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int YijunbossInfoResponse::kMsgIDFieldNumber;
const int YijunbossInfoResponse::kStatusFieldNumber;
const int YijunbossInfoResponse::kRemainTimesFieldNumber;
const int YijunbossInfoResponse::kMaxTimesFieldNumber;
const int YijunbossInfoResponse::kEndTimeFieldNumber;
const int YijunbossInfoResponse::kBossIdFieldNumber;
const int YijunbossInfoResponse::kBossConfigIdFieldNumber;
const int YijunbossInfoResponse::kBossStatusFieldNumber;
#endif  // !_MSC_VER

YijunbossInfoResponse::YijunbossInfoResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void YijunbossInfoResponse::InitAsDefaultInstance() {
}

YijunbossInfoResponse::YijunbossInfoResponse(const YijunbossInfoResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void YijunbossInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 1;
  status_ = 0;
  remaintimes_ = 0u;
  maxtimes_ = 0u;
  endtime_ = GOOGLE_ULONGLONG(0);
  bossid_ = GOOGLE_ULONGLONG(0);
  bossconfigid_ = 0u;
  bossstatus_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YijunbossInfoResponse::~YijunbossInfoResponse() {
  SharedDtor();
}

void YijunbossInfoResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void YijunbossInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YijunbossInfoResponse& YijunbossInfoResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_yijunboss_5finfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_yijunboss_5finfo_2eproto();
#endif
  return *default_instance_;
}

YijunbossInfoResponse* YijunbossInfoResponse::default_instance_ = NULL;

YijunbossInfoResponse* YijunbossInfoResponse::New() const {
  return new YijunbossInfoResponse;
}

void YijunbossInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 1;
    status_ = 0;
    remaintimes_ = 0u;
    maxtimes_ = 0u;
    endtime_ = GOOGLE_ULONGLONG(0);
    bossid_ = GOOGLE_ULONGLONG(0);
    bossconfigid_ = 0u;
    bossstatus_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool YijunbossInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sanguo.MsgID msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::sanguo::MsgID >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .sanguo.StatusCode status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::StatusCode_IsValid(value)) {
            set_status(static_cast< ::sanguo::StatusCode >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_remainTimes;
        break;
      }

      // optional uint32 remainTimes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remainTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remaintimes_)));
          set_has_remaintimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_maxTimes;
        break;
      }

      // optional uint32 maxTimes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxtimes_)));
          set_has_maxtimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_endTime;
        break;
      }

      // optional uint64 endTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_bossId;
        break;
      }

      // optional uint64 bossId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bossId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_bossConfigId;
        break;
      }

      // optional uint32 bossConfigId = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bossConfigId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bossconfigid_)));
          set_has_bossconfigid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_bossStatus;
        break;
      }

      // optional uint32 bossStatus = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bossStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bossstatus_)));
          set_has_bossstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void YijunbossInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .sanguo.MsgID msgID = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // required .sanguo.StatusCode status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // optional uint32 remainTimes = 3;
  if (has_remaintimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->remaintimes(), output);
  }

  // optional uint32 maxTimes = 4;
  if (has_maxtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->maxtimes(), output);
  }

  // optional uint64 endTime = 5;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->endtime(), output);
  }

  // optional uint64 bossId = 6;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->bossid(), output);
  }

  // optional uint32 bossConfigId = 7;
  if (has_bossconfigid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->bossconfigid(), output);
  }

  // optional uint32 bossStatus = 8;
  if (has_bossstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->bossstatus(), output);
  }

}

int YijunbossInfoResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .sanguo.MsgID msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // required .sanguo.StatusCode status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional uint32 remainTimes = 3;
    if (has_remaintimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remaintimes());
    }

    // optional uint32 maxTimes = 4;
    if (has_maxtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxtimes());
    }

    // optional uint64 endTime = 5;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->endtime());
    }

    // optional uint64 bossId = 6;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bossid());
    }

    // optional uint32 bossConfigId = 7;
    if (has_bossconfigid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bossconfigid());
    }

    // optional uint32 bossStatus = 8;
    if (has_bossstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bossstatus());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YijunbossInfoResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const YijunbossInfoResponse*>(&from));
}

void YijunbossInfoResponse::MergeFrom(const YijunbossInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_remaintimes()) {
      set_remaintimes(from.remaintimes());
    }
    if (from.has_maxtimes()) {
      set_maxtimes(from.maxtimes());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
    if (from.has_bossconfigid()) {
      set_bossconfigid(from.bossconfigid());
    }
    if (from.has_bossstatus()) {
      set_bossstatus(from.bossstatus());
    }
  }
}

void YijunbossInfoResponse::CopyFrom(const YijunbossInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YijunbossInfoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void YijunbossInfoResponse::Swap(YijunbossInfoResponse* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(status_, other->status_);
    std::swap(remaintimes_, other->remaintimes_);
    std::swap(maxtimes_, other->maxtimes_);
    std::swap(endtime_, other->endtime_);
    std::swap(bossid_, other->bossid_);
    std::swap(bossconfigid_, other->bossconfigid_);
    std::swap(bossstatus_, other->bossstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string YijunbossInfoResponse::GetTypeName() const {
  return "sanguo.YijunbossInfoResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sanguo

// @@protoc_insertion_point(global_scope)
