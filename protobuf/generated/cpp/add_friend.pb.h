// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: add_friend.proto

#ifndef PROTOBUF_add_5ffriend_2eproto__INCLUDED
#define PROTOBUF_add_5ffriend_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "msg_id.pb.h"
#include "msg_status_code.pb.h"
#include "role_friend.pb.h"
// @@protoc_insertion_point(includes)

namespace sanguo {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_add_5ffriend_2eproto();
void protobuf_AssignDesc_add_5ffriend_2eproto();
void protobuf_ShutdownFile_add_5ffriend_2eproto();

class AddFriendRequest;
class AddFriendResponse;

// ===================================================================

class AddFriendRequest : public ::google::protobuf::MessageLite {
 public:
  AddFriendRequest();
  virtual ~AddFriendRequest();

  AddFriendRequest(const AddFriendRequest& from);

  inline AddFriendRequest& operator=(const AddFriendRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const AddFriendRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const AddFriendRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(AddFriendRequest* other);

  // implements Message ----------------------------------------------

  AddFriendRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const AddFriendRequest& from);
  void MergeFrom(const AddFriendRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .sanguo.MsgID msgID = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline ::sanguo::MsgID msgid() const;
  inline void set_msgid(::sanguo::MsgID value);

  // required string friendName = 2;
  inline bool has_friendname() const;
  inline void clear_friendname();
  static const int kFriendNameFieldNumber = 2;
  inline const ::std::string& friendname() const;
  inline void set_friendname(const ::std::string& value);
  inline void set_friendname(const char* value);
  inline void set_friendname(const char* value, size_t size);
  inline ::std::string* mutable_friendname();
  inline ::std::string* release_friendname();
  inline void set_allocated_friendname(::std::string* friendname);

  // @@protoc_insertion_point(class_scope:sanguo.AddFriendRequest)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_friendname();
  inline void clear_has_friendname();

  ::std::string* friendname_;
  int msgid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_add_5ffriend_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_add_5ffriend_2eproto();
  #endif
  friend void protobuf_AssignDesc_add_5ffriend_2eproto();
  friend void protobuf_ShutdownFile_add_5ffriend_2eproto();

  void InitAsDefaultInstance();
  static AddFriendRequest* default_instance_;
};
// -------------------------------------------------------------------

class AddFriendResponse : public ::google::protobuf::MessageLite {
 public:
  AddFriendResponse();
  virtual ~AddFriendResponse();

  AddFriendResponse(const AddFriendResponse& from);

  inline AddFriendResponse& operator=(const AddFriendResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const AddFriendResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const AddFriendResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(AddFriendResponse* other);

  // implements Message ----------------------------------------------

  AddFriendResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const AddFriendResponse& from);
  void MergeFrom(const AddFriendResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .sanguo.MsgID msgID = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline ::sanguo::MsgID msgid() const;
  inline void set_msgid(::sanguo::MsgID value);

  // required .sanguo.StatusCode status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::sanguo::StatusCode status() const;
  inline void set_status(::sanguo::StatusCode value);

  // @@protoc_insertion_point(class_scope:sanguo.AddFriendResponse)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_status();
  inline void clear_has_status();

  int msgid_;
  int status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_add_5ffriend_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_add_5ffriend_2eproto();
  #endif
  friend void protobuf_AssignDesc_add_5ffriend_2eproto();
  friend void protobuf_ShutdownFile_add_5ffriend_2eproto();

  void InitAsDefaultInstance();
  static AddFriendResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// AddFriendRequest

// required .sanguo.MsgID msgID = 1;
inline bool AddFriendRequest::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddFriendRequest::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddFriendRequest::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddFriendRequest::clear_msgid() {
  msgid_ = 1;
  clear_has_msgid();
}
inline ::sanguo::MsgID AddFriendRequest::msgid() const {
  return static_cast< ::sanguo::MsgID >(msgid_);
}
inline void AddFriendRequest::set_msgid(::sanguo::MsgID value) {
  assert(::sanguo::MsgID_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// required string friendName = 2;
inline bool AddFriendRequest::has_friendname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddFriendRequest::set_has_friendname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddFriendRequest::clear_has_friendname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddFriendRequest::clear_friendname() {
  if (friendname_ != &::google::protobuf::internal::kEmptyString) {
    friendname_->clear();
  }
  clear_has_friendname();
}
inline const ::std::string& AddFriendRequest::friendname() const {
  return *friendname_;
}
inline void AddFriendRequest::set_friendname(const ::std::string& value) {
  set_has_friendname();
  if (friendname_ == &::google::protobuf::internal::kEmptyString) {
    friendname_ = new ::std::string;
  }
  friendname_->assign(value);
}
inline void AddFriendRequest::set_friendname(const char* value) {
  set_has_friendname();
  if (friendname_ == &::google::protobuf::internal::kEmptyString) {
    friendname_ = new ::std::string;
  }
  friendname_->assign(value);
}
inline void AddFriendRequest::set_friendname(const char* value, size_t size) {
  set_has_friendname();
  if (friendname_ == &::google::protobuf::internal::kEmptyString) {
    friendname_ = new ::std::string;
  }
  friendname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AddFriendRequest::mutable_friendname() {
  set_has_friendname();
  if (friendname_ == &::google::protobuf::internal::kEmptyString) {
    friendname_ = new ::std::string;
  }
  return friendname_;
}
inline ::std::string* AddFriendRequest::release_friendname() {
  clear_has_friendname();
  if (friendname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = friendname_;
    friendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AddFriendRequest::set_allocated_friendname(::std::string* friendname) {
  if (friendname_ != &::google::protobuf::internal::kEmptyString) {
    delete friendname_;
  }
  if (friendname) {
    set_has_friendname();
    friendname_ = friendname;
  } else {
    clear_has_friendname();
    friendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// AddFriendResponse

// required .sanguo.MsgID msgID = 1;
inline bool AddFriendResponse::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddFriendResponse::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddFriendResponse::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddFriendResponse::clear_msgid() {
  msgid_ = 1;
  clear_has_msgid();
}
inline ::sanguo::MsgID AddFriendResponse::msgid() const {
  return static_cast< ::sanguo::MsgID >(msgid_);
}
inline void AddFriendResponse::set_msgid(::sanguo::MsgID value) {
  assert(::sanguo::MsgID_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// required .sanguo.StatusCode status = 2;
inline bool AddFriendResponse::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddFriendResponse::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddFriendResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddFriendResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::sanguo::StatusCode AddFriendResponse::status() const {
  return static_cast< ::sanguo::StatusCode >(status_);
}
inline void AddFriendResponse::set_status(::sanguo::StatusCode value) {
  assert(::sanguo::StatusCode_IsValid(value));
  set_has_status();
  status_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sanguo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_add_5ffriend_2eproto__INCLUDED
