// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gamble_equip.proto

#ifndef PROTOBUF_gamble_5fequip_2eproto__INCLUDED
#define PROTOBUF_gamble_5fequip_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "msg_id.pb.h"
#include "msg_status_code.pb.h"
#include "role_gem_bag_goods.pb.h"
#include "role_bag_goods.pb.h"
#include "role_cooldown.pb.h"
// @@protoc_insertion_point(includes)

namespace sanguo {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_gamble_5fequip_2eproto();
void protobuf_AssignDesc_gamble_5fequip_2eproto();
void protobuf_ShutdownFile_gamble_5fequip_2eproto();

class GambleEquipRequest;
class GambleEquipResponse;

// ===================================================================

class GambleEquipRequest : public ::google::protobuf::MessageLite {
 public:
  GambleEquipRequest();
  virtual ~GambleEquipRequest();

  GambleEquipRequest(const GambleEquipRequest& from);

  inline GambleEquipRequest& operator=(const GambleEquipRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const GambleEquipRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const GambleEquipRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(GambleEquipRequest* other);

  // implements Message ----------------------------------------------

  GambleEquipRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GambleEquipRequest& from);
  void MergeFrom(const GambleEquipRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .sanguo.MsgID msgID = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline ::sanguo::MsgID msgid() const;
  inline void set_msgid(::sanguo::MsgID value);

  // required uint32 chestType = 2;
  inline bool has_chesttype() const;
  inline void clear_chesttype();
  static const int kChestTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 chesttype() const;
  inline void set_chesttype(::google::protobuf::uint32 value);

  // required uint32 costType = 3;
  inline bool has_costtype() const;
  inline void clear_costtype();
  static const int kCostTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 costtype() const;
  inline void set_costtype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:sanguo.GambleEquipRequest)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_chesttype();
  inline void clear_has_chesttype();
  inline void set_has_costtype();
  inline void clear_has_costtype();

  int msgid_;
  ::google::protobuf::uint32 chesttype_;
  ::google::protobuf::uint32 costtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_gamble_5fequip_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_gamble_5fequip_2eproto();
  #endif
  friend void protobuf_AssignDesc_gamble_5fequip_2eproto();
  friend void protobuf_ShutdownFile_gamble_5fequip_2eproto();

  void InitAsDefaultInstance();
  static GambleEquipRequest* default_instance_;
};
// -------------------------------------------------------------------

class GambleEquipResponse : public ::google::protobuf::MessageLite {
 public:
  GambleEquipResponse();
  virtual ~GambleEquipResponse();

  GambleEquipResponse(const GambleEquipResponse& from);

  inline GambleEquipResponse& operator=(const GambleEquipResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const GambleEquipResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const GambleEquipResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(GambleEquipResponse* other);

  // implements Message ----------------------------------------------

  GambleEquipResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GambleEquipResponse& from);
  void MergeFrom(const GambleEquipResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .sanguo.MsgID msgID = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline ::sanguo::MsgID msgid() const;
  inline void set_msgid(::sanguo::MsgID value);

  // required .sanguo.StatusCode status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::sanguo::StatusCode status() const;
  inline void set_status(::sanguo::StatusCode value);

  // repeated .sanguo.MsgRoleBagGoods roleBagGoods = 3;
  inline int rolebaggoods_size() const;
  inline void clear_rolebaggoods();
  static const int kRoleBagGoodsFieldNumber = 3;
  inline const ::sanguo::MsgRoleBagGoods& rolebaggoods(int index) const;
  inline ::sanguo::MsgRoleBagGoods* mutable_rolebaggoods(int index);
  inline ::sanguo::MsgRoleBagGoods* add_rolebaggoods();
  inline const ::google::protobuf::RepeatedPtrField< ::sanguo::MsgRoleBagGoods >&
      rolebaggoods() const;
  inline ::google::protobuf::RepeatedPtrField< ::sanguo::MsgRoleBagGoods >*
      mutable_rolebaggoods();

  // optional .sanguo.MsgRoleCooldown roleCooldown = 4;
  inline bool has_rolecooldown() const;
  inline void clear_rolecooldown();
  static const int kRoleCooldownFieldNumber = 4;
  inline const ::sanguo::MsgRoleCooldown& rolecooldown() const;
  inline ::sanguo::MsgRoleCooldown* mutable_rolecooldown();
  inline ::sanguo::MsgRoleCooldown* release_rolecooldown();
  inline void set_allocated_rolecooldown(::sanguo::MsgRoleCooldown* rolecooldown);

  // optional uint32 remainTimes = 5;
  inline bool has_remaintimes() const;
  inline void clear_remaintimes();
  static const int kRemainTimesFieldNumber = 5;
  inline ::google::protobuf::uint32 remaintimes() const;
  inline void set_remaintimes(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:sanguo.GambleEquipResponse)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_rolecooldown();
  inline void clear_has_rolecooldown();
  inline void set_has_remaintimes();
  inline void clear_has_remaintimes();

  int msgid_;
  int status_;
  ::google::protobuf::RepeatedPtrField< ::sanguo::MsgRoleBagGoods > rolebaggoods_;
  ::sanguo::MsgRoleCooldown* rolecooldown_;
  ::google::protobuf::uint32 remaintimes_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_gamble_5fequip_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_gamble_5fequip_2eproto();
  #endif
  friend void protobuf_AssignDesc_gamble_5fequip_2eproto();
  friend void protobuf_ShutdownFile_gamble_5fequip_2eproto();

  void InitAsDefaultInstance();
  static GambleEquipResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// GambleEquipRequest

// required .sanguo.MsgID msgID = 1;
inline bool GambleEquipRequest::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GambleEquipRequest::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GambleEquipRequest::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GambleEquipRequest::clear_msgid() {
  msgid_ = 1;
  clear_has_msgid();
}
inline ::sanguo::MsgID GambleEquipRequest::msgid() const {
  return static_cast< ::sanguo::MsgID >(msgid_);
}
inline void GambleEquipRequest::set_msgid(::sanguo::MsgID value) {
  assert(::sanguo::MsgID_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// required uint32 chestType = 2;
inline bool GambleEquipRequest::has_chesttype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GambleEquipRequest::set_has_chesttype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GambleEquipRequest::clear_has_chesttype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GambleEquipRequest::clear_chesttype() {
  chesttype_ = 0u;
  clear_has_chesttype();
}
inline ::google::protobuf::uint32 GambleEquipRequest::chesttype() const {
  return chesttype_;
}
inline void GambleEquipRequest::set_chesttype(::google::protobuf::uint32 value) {
  set_has_chesttype();
  chesttype_ = value;
}

// required uint32 costType = 3;
inline bool GambleEquipRequest::has_costtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GambleEquipRequest::set_has_costtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GambleEquipRequest::clear_has_costtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GambleEquipRequest::clear_costtype() {
  costtype_ = 0u;
  clear_has_costtype();
}
inline ::google::protobuf::uint32 GambleEquipRequest::costtype() const {
  return costtype_;
}
inline void GambleEquipRequest::set_costtype(::google::protobuf::uint32 value) {
  set_has_costtype();
  costtype_ = value;
}

// -------------------------------------------------------------------

// GambleEquipResponse

// required .sanguo.MsgID msgID = 1;
inline bool GambleEquipResponse::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GambleEquipResponse::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GambleEquipResponse::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GambleEquipResponse::clear_msgid() {
  msgid_ = 1;
  clear_has_msgid();
}
inline ::sanguo::MsgID GambleEquipResponse::msgid() const {
  return static_cast< ::sanguo::MsgID >(msgid_);
}
inline void GambleEquipResponse::set_msgid(::sanguo::MsgID value) {
  assert(::sanguo::MsgID_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// required .sanguo.StatusCode status = 2;
inline bool GambleEquipResponse::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GambleEquipResponse::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GambleEquipResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GambleEquipResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::sanguo::StatusCode GambleEquipResponse::status() const {
  return static_cast< ::sanguo::StatusCode >(status_);
}
inline void GambleEquipResponse::set_status(::sanguo::StatusCode value) {
  assert(::sanguo::StatusCode_IsValid(value));
  set_has_status();
  status_ = value;
}

// repeated .sanguo.MsgRoleBagGoods roleBagGoods = 3;
inline int GambleEquipResponse::rolebaggoods_size() const {
  return rolebaggoods_.size();
}
inline void GambleEquipResponse::clear_rolebaggoods() {
  rolebaggoods_.Clear();
}
inline const ::sanguo::MsgRoleBagGoods& GambleEquipResponse::rolebaggoods(int index) const {
  return rolebaggoods_.Get(index);
}
inline ::sanguo::MsgRoleBagGoods* GambleEquipResponse::mutable_rolebaggoods(int index) {
  return rolebaggoods_.Mutable(index);
}
inline ::sanguo::MsgRoleBagGoods* GambleEquipResponse::add_rolebaggoods() {
  return rolebaggoods_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sanguo::MsgRoleBagGoods >&
GambleEquipResponse::rolebaggoods() const {
  return rolebaggoods_;
}
inline ::google::protobuf::RepeatedPtrField< ::sanguo::MsgRoleBagGoods >*
GambleEquipResponse::mutable_rolebaggoods() {
  return &rolebaggoods_;
}

// optional .sanguo.MsgRoleCooldown roleCooldown = 4;
inline bool GambleEquipResponse::has_rolecooldown() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GambleEquipResponse::set_has_rolecooldown() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GambleEquipResponse::clear_has_rolecooldown() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GambleEquipResponse::clear_rolecooldown() {
  if (rolecooldown_ != NULL) rolecooldown_->::sanguo::MsgRoleCooldown::Clear();
  clear_has_rolecooldown();
}
inline const ::sanguo::MsgRoleCooldown& GambleEquipResponse::rolecooldown() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return rolecooldown_ != NULL ? *rolecooldown_ : *default_instance().rolecooldown_;
#else
  return rolecooldown_ != NULL ? *rolecooldown_ : *default_instance_->rolecooldown_;
#endif
}
inline ::sanguo::MsgRoleCooldown* GambleEquipResponse::mutable_rolecooldown() {
  set_has_rolecooldown();
  if (rolecooldown_ == NULL) rolecooldown_ = new ::sanguo::MsgRoleCooldown;
  return rolecooldown_;
}
inline ::sanguo::MsgRoleCooldown* GambleEquipResponse::release_rolecooldown() {
  clear_has_rolecooldown();
  ::sanguo::MsgRoleCooldown* temp = rolecooldown_;
  rolecooldown_ = NULL;
  return temp;
}
inline void GambleEquipResponse::set_allocated_rolecooldown(::sanguo::MsgRoleCooldown* rolecooldown) {
  delete rolecooldown_;
  rolecooldown_ = rolecooldown;
  if (rolecooldown) {
    set_has_rolecooldown();
  } else {
    clear_has_rolecooldown();
  }
}

// optional uint32 remainTimes = 5;
inline bool GambleEquipResponse::has_remaintimes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GambleEquipResponse::set_has_remaintimes() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GambleEquipResponse::clear_has_remaintimes() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GambleEquipResponse::clear_remaintimes() {
  remaintimes_ = 0u;
  clear_has_remaintimes();
}
inline ::google::protobuf::uint32 GambleEquipResponse::remaintimes() const {
  return remaintimes_;
}
inline void GambleEquipResponse::set_remaintimes(::google::protobuf::uint32 value) {
  set_has_remaintimes();
  remaintimes_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sanguo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_gamble_5fequip_2eproto__INCLUDED
