// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: role_friend.proto

#ifndef PROTOBUF_role_5ffriend_2eproto__INCLUDED
#define PROTOBUF_role_5ffriend_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "constants.pb.h"
// @@protoc_insertion_point(includes)

namespace sanguo {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_role_5ffriend_2eproto();
void protobuf_AssignDesc_role_5ffriend_2eproto();
void protobuf_ShutdownFile_role_5ffriend_2eproto();

class MsgRoleFriendData;

// ===================================================================

class MsgRoleFriendData : public ::google::protobuf::MessageLite {
 public:
  MsgRoleFriendData();
  virtual ~MsgRoleFriendData();

  MsgRoleFriendData(const MsgRoleFriendData& from);

  inline MsgRoleFriendData& operator=(const MsgRoleFriendData& from) {
    CopyFrom(from);
    return *this;
  }

  static const MsgRoleFriendData& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const MsgRoleFriendData* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(MsgRoleFriendData* other);

  // implements Message ----------------------------------------------

  MsgRoleFriendData* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const MsgRoleFriendData& from);
  void MergeFrom(const MsgRoleFriendData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 autoIncrID = 1;
  inline bool has_autoincrid() const;
  inline void clear_autoincrid();
  static const int kAutoIncrIDFieldNumber = 1;
  inline ::google::protobuf::uint64 autoincrid() const;
  inline void set_autoincrid(::google::protobuf::uint64 value);

  // required uint64 friendID = 2;
  inline bool has_friendid() const;
  inline void clear_friendid();
  static const int kFriendIDFieldNumber = 2;
  inline ::google::protobuf::uint64 friendid() const;
  inline void set_friendid(::google::protobuf::uint64 value);

  // required string friendName = 3;
  inline bool has_friendname() const;
  inline void clear_friendname();
  static const int kFriendNameFieldNumber = 3;
  inline const ::std::string& friendname() const;
  inline void set_friendname(const ::std::string& value);
  inline void set_friendname(const char* value);
  inline void set_friendname(const char* value, size_t size);
  inline ::std::string* mutable_friendname();
  inline ::std::string* release_friendname();
  inline void set_allocated_friendname(::std::string* friendname);

  // required .sanguo.RoleProfession friendProfession = 4;
  inline bool has_friendprofession() const;
  inline void clear_friendprofession();
  static const int kFriendProfessionFieldNumber = 4;
  inline ::sanguo::RoleProfession friendprofession() const;
  inline void set_friendprofession(::sanguo::RoleProfession value);

  // required uint32 friendLevel = 5;
  inline bool has_friendlevel() const;
  inline void clear_friendlevel();
  static const int kFriendLevelFieldNumber = 5;
  inline ::google::protobuf::uint32 friendlevel() const;
  inline void set_friendlevel(::google::protobuf::uint32 value);

  // optional string yijunName = 6;
  inline bool has_yijunname() const;
  inline void clear_yijunname();
  static const int kYijunNameFieldNumber = 6;
  inline const ::std::string& yijunname() const;
  inline void set_yijunname(const ::std::string& value);
  inline void set_yijunname(const char* value);
  inline void set_yijunname(const char* value, size_t size);
  inline ::std::string* mutable_yijunname();
  inline ::std::string* release_yijunname();
  inline void set_allocated_yijunname(::std::string* yijunname);

  // required uint32 status = 7;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 7;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:sanguo.MsgRoleFriendData)
 private:
  inline void set_has_autoincrid();
  inline void clear_has_autoincrid();
  inline void set_has_friendid();
  inline void clear_has_friendid();
  inline void set_has_friendname();
  inline void clear_has_friendname();
  inline void set_has_friendprofession();
  inline void clear_has_friendprofession();
  inline void set_has_friendlevel();
  inline void clear_has_friendlevel();
  inline void set_has_yijunname();
  inline void clear_has_yijunname();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::uint64 autoincrid_;
  ::google::protobuf::uint64 friendid_;
  ::std::string* friendname_;
  int friendprofession_;
  ::google::protobuf::uint32 friendlevel_;
  ::std::string* yijunname_;
  ::google::protobuf::uint32 status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_role_5ffriend_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_role_5ffriend_2eproto();
  #endif
  friend void protobuf_AssignDesc_role_5ffriend_2eproto();
  friend void protobuf_ShutdownFile_role_5ffriend_2eproto();

  void InitAsDefaultInstance();
  static MsgRoleFriendData* default_instance_;
};
// ===================================================================


// ===================================================================

// MsgRoleFriendData

// required uint64 autoIncrID = 1;
inline bool MsgRoleFriendData::has_autoincrid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgRoleFriendData::set_has_autoincrid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgRoleFriendData::clear_has_autoincrid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgRoleFriendData::clear_autoincrid() {
  autoincrid_ = GOOGLE_ULONGLONG(0);
  clear_has_autoincrid();
}
inline ::google::protobuf::uint64 MsgRoleFriendData::autoincrid() const {
  return autoincrid_;
}
inline void MsgRoleFriendData::set_autoincrid(::google::protobuf::uint64 value) {
  set_has_autoincrid();
  autoincrid_ = value;
}

// required uint64 friendID = 2;
inline bool MsgRoleFriendData::has_friendid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgRoleFriendData::set_has_friendid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgRoleFriendData::clear_has_friendid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgRoleFriendData::clear_friendid() {
  friendid_ = GOOGLE_ULONGLONG(0);
  clear_has_friendid();
}
inline ::google::protobuf::uint64 MsgRoleFriendData::friendid() const {
  return friendid_;
}
inline void MsgRoleFriendData::set_friendid(::google::protobuf::uint64 value) {
  set_has_friendid();
  friendid_ = value;
}

// required string friendName = 3;
inline bool MsgRoleFriendData::has_friendname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgRoleFriendData::set_has_friendname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgRoleFriendData::clear_has_friendname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgRoleFriendData::clear_friendname() {
  if (friendname_ != &::google::protobuf::internal::kEmptyString) {
    friendname_->clear();
  }
  clear_has_friendname();
}
inline const ::std::string& MsgRoleFriendData::friendname() const {
  return *friendname_;
}
inline void MsgRoleFriendData::set_friendname(const ::std::string& value) {
  set_has_friendname();
  if (friendname_ == &::google::protobuf::internal::kEmptyString) {
    friendname_ = new ::std::string;
  }
  friendname_->assign(value);
}
inline void MsgRoleFriendData::set_friendname(const char* value) {
  set_has_friendname();
  if (friendname_ == &::google::protobuf::internal::kEmptyString) {
    friendname_ = new ::std::string;
  }
  friendname_->assign(value);
}
inline void MsgRoleFriendData::set_friendname(const char* value, size_t size) {
  set_has_friendname();
  if (friendname_ == &::google::protobuf::internal::kEmptyString) {
    friendname_ = new ::std::string;
  }
  friendname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgRoleFriendData::mutable_friendname() {
  set_has_friendname();
  if (friendname_ == &::google::protobuf::internal::kEmptyString) {
    friendname_ = new ::std::string;
  }
  return friendname_;
}
inline ::std::string* MsgRoleFriendData::release_friendname() {
  clear_has_friendname();
  if (friendname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = friendname_;
    friendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MsgRoleFriendData::set_allocated_friendname(::std::string* friendname) {
  if (friendname_ != &::google::protobuf::internal::kEmptyString) {
    delete friendname_;
  }
  if (friendname) {
    set_has_friendname();
    friendname_ = friendname;
  } else {
    clear_has_friendname();
    friendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .sanguo.RoleProfession friendProfession = 4;
inline bool MsgRoleFriendData::has_friendprofession() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgRoleFriendData::set_has_friendprofession() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgRoleFriendData::clear_has_friendprofession() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgRoleFriendData::clear_friendprofession() {
  friendprofession_ = 1;
  clear_has_friendprofession();
}
inline ::sanguo::RoleProfession MsgRoleFriendData::friendprofession() const {
  return static_cast< ::sanguo::RoleProfession >(friendprofession_);
}
inline void MsgRoleFriendData::set_friendprofession(::sanguo::RoleProfession value) {
  assert(::sanguo::RoleProfession_IsValid(value));
  set_has_friendprofession();
  friendprofession_ = value;
}

// required uint32 friendLevel = 5;
inline bool MsgRoleFriendData::has_friendlevel() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MsgRoleFriendData::set_has_friendlevel() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MsgRoleFriendData::clear_has_friendlevel() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MsgRoleFriendData::clear_friendlevel() {
  friendlevel_ = 0u;
  clear_has_friendlevel();
}
inline ::google::protobuf::uint32 MsgRoleFriendData::friendlevel() const {
  return friendlevel_;
}
inline void MsgRoleFriendData::set_friendlevel(::google::protobuf::uint32 value) {
  set_has_friendlevel();
  friendlevel_ = value;
}

// optional string yijunName = 6;
inline bool MsgRoleFriendData::has_yijunname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MsgRoleFriendData::set_has_yijunname() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MsgRoleFriendData::clear_has_yijunname() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MsgRoleFriendData::clear_yijunname() {
  if (yijunname_ != &::google::protobuf::internal::kEmptyString) {
    yijunname_->clear();
  }
  clear_has_yijunname();
}
inline const ::std::string& MsgRoleFriendData::yijunname() const {
  return *yijunname_;
}
inline void MsgRoleFriendData::set_yijunname(const ::std::string& value) {
  set_has_yijunname();
  if (yijunname_ == &::google::protobuf::internal::kEmptyString) {
    yijunname_ = new ::std::string;
  }
  yijunname_->assign(value);
}
inline void MsgRoleFriendData::set_yijunname(const char* value) {
  set_has_yijunname();
  if (yijunname_ == &::google::protobuf::internal::kEmptyString) {
    yijunname_ = new ::std::string;
  }
  yijunname_->assign(value);
}
inline void MsgRoleFriendData::set_yijunname(const char* value, size_t size) {
  set_has_yijunname();
  if (yijunname_ == &::google::protobuf::internal::kEmptyString) {
    yijunname_ = new ::std::string;
  }
  yijunname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgRoleFriendData::mutable_yijunname() {
  set_has_yijunname();
  if (yijunname_ == &::google::protobuf::internal::kEmptyString) {
    yijunname_ = new ::std::string;
  }
  return yijunname_;
}
inline ::std::string* MsgRoleFriendData::release_yijunname() {
  clear_has_yijunname();
  if (yijunname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = yijunname_;
    yijunname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MsgRoleFriendData::set_allocated_yijunname(::std::string* yijunname) {
  if (yijunname_ != &::google::protobuf::internal::kEmptyString) {
    delete yijunname_;
  }
  if (yijunname) {
    set_has_yijunname();
    yijunname_ = yijunname;
  } else {
    clear_has_yijunname();
    yijunname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 status = 7;
inline bool MsgRoleFriendData::has_status() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MsgRoleFriendData::set_has_status() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MsgRoleFriendData::clear_has_status() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MsgRoleFriendData::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 MsgRoleFriendData::status() const {
  return status_;
}
inline void MsgRoleFriendData::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sanguo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_role_5ffriend_2eproto__INCLUDED
