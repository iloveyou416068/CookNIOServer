// Generated by machine.  DO NOT EDIT!

#include <stdexcept>
#include "proto_helper.h"
#include "SGDictionary.h"

MessageLite* createMsg(int msgId) {
switch (msgId) {
  case MSG_MESSAGER: return new MessagerResponse();
  default:
    CCLOG("createMsg(): unkonw msgId:%d", msgId);
    throw runtime_error("createMsg() failed!");
} // end switch
} // end method
MessageLite* jsonToMsg(int msgId, CCDictionary *json) {
switch (msgId) {
  case MSG_MESSAGER: return jsonToMsg_MessagerRequest(json);
  default:
    CCLOG("jsonToMsg(): unkonw msgId:%d", msgId);
    throw runtime_error("jsonToMsg() failed!");
} // end switch
} // end method
CCDictionary* msgToJson(int msgId, MessageLite *msg) {
switch (msgId) {
  case MSG_MESSAGER: return msgToJson_MessagerResponse(static_cast<MessagerResponse *>(msg));
  default:
    CCLOG("msgToJson(): unkonw msgId:%d", msgId);
    throw runtime_error("msgToJson() failed!");
} // end switch
} // end method

// Request
MessagerRequest* jsonToMsg_MessagerRequest(CCDictionary *json) {
  SGDictionary dict(json);
  MessagerRequest *msg = new MessagerRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  CCArray *arr_content = dict.getArray("content");
  CCObject *tmp_content;
  CCARRAY_FOREACH(arr_content, tmp_content) {
    double val = dynamic_cast<CCDouble *>(tmp_content)->getValue();
    msg->add_content(val);
  }
  return msg;
}
// Response
CCDictionary* msgToJson_MessagerResponse(const MessagerResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  CCArray *arr_content = CCArray::createWithCapacity(msg->content_size());
  for (int idx = 0; idx < msg->content_size(); idx++) {
    double val = msg->content(idx);
    arr_content->addObject(CCDouble::create(val));
  }
  dict.setArray(arr_content, "content");
  return dict.getCCDictionary();
}
// DTO
