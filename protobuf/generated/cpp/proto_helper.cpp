// Generated by machine.  DO NOT EDIT!

#include <stdexcept>
#include "proto_helper.h"
#include "SGDictionary.h"

MessageLite* createMsg(int msgId) {
switch (msgId) {
  case MSG_ADD_EXP: return new AddExpResponse();
  case MSG_CHECK_PROPERTIES: return new CheckPropertiesResponse();
  case MSG_RECHARGE: return new RechargeResponse();
  case MSG_TEST: return new TestResponse();
  case MSG_GET_ACHIEVEMENT_REWARD: return new GetAchievementRewardResponse();
  case MSG_INIT_ACHIEVEMENT: return new InitAchievementResponse();
  case MSG_UPDATE_ACHIEVEMENT: return new UpdateAchievementResponse();
  case MSG_USE_TITLE: return new UseTitleResponse();
  case MSG_GET_ACTIVITY_GIFTS: return new GetActivityGiftsResponse();
  case MSG_GET_ACTIVITY_REWARD_ROLES: return new GetActivityRewardRolesResponse();
  case MSG_GET_ADD_UP_CONSUME: return new GetAddUpConsumeResponse();
  case MSG_GET_ADD_UP_RECHARGE: return new GetAddUpRechargeResponse();
  case MSG_GET_ALL_ACTIVITY_CONFIG: return new GetAllActivityConfigResponse();
  case MSG_GET_CONSUME_LEADERBORD_DATA: return new GetConsumeLeaderbordDataResponse();
  case MSG_GET_RECHARGE_LEADERBORD_DATA: return new GetRechargeLeaderbordDataResponse();
  case MSG_BUY_PK_COUNT: return new BuyPkCountResponse();
  case MSG_END_PK: return new EndPkResponse();
  case MSG_GET_ARENA_INFO: return new GetArenaInfoResponse();
  case MSG_GET_ARENA_PRO_NOTICE: return new GetArenaProNoticeResponse();
  case MSG_GET_RANK_REWARD: return new GetRankRewardResponse();
  case MSG_START_PK: return new StartPkResponse();
  case MSG_BUY_BAG_GOODS: return new BuyBagGoodsResponse();
  case MSG_COMPOSE_SKILL_BOOK: return new ComposeSkillBookResponse();
  case MSG_ENHANCE_EQUIP: return new EnhanceEquipResponse();
  case MSG_EQUIP_GOODS: return new EquipGoodsResponse();
  case MSG_EXPAND_BAG: return new ExpandBagResponse();
  case MSG_GET_BAG_INFO: return new GetBagInfoResponse();
  case MSG_OPEN_GIFT_IN_BAG: return new OpenGiftInBagResponse();
  case MSG_SAVE_BAG_ORDER: return new SaveBagOrderResponse();
  case MSG_SELL_GOODS: return new SellGoodsResponse();
  case MSG_UNEQUIP_GOODS: return new UnequipGoodsResponse();
  case MSG_USE_BAG_GOODS: return new UseBagGoodsResponse();
  case MSG_BUY_GUAXIANG: return new BuyGuaxiangResponse();
  case MSG_DIVINE: return new DivineResponse();
  case MSG_ENHANCE_GUAXIANG: return new EnhanceGuaxiangResponse();
  case MSG_EQUIP_GUAXIANG: return new EquipGuaxiangResponse();
  case MSG_EXPAND_BAG_GUAXIANG: return new ExpandBagGuaxiangResponse();
  case MSG_INIT_GUAXIANG_DATA: return new InitGuaxiangDataResponse();
  case MSG_LOCK_OR_UNLOCK_GUAXIANG: return new LockOrUnlockGuaxiangResponse();
  case MSG_ONE_KEY_DIVINE: return new OneKeyDivineResponse();
  case MSG_ONE_KEY_ENHANCE_GUAXIANG: return new OneKeyEnhanceGuaxiangResponse();
  case MSG_ONE_KEY_GET_GUAXIANG: return new OneKeyGetGuaxiangResponse();
  case MSG_ONE_KEY_SELL_GUAXIANG: return new OneKeySellGuaxiangResponse();
  case MSG_SAVE_BAG_GUAXIANG_ORDER: return new SaveBagGuaxiangOrderResponse();
  case MSG_SELL_GUAXIANG: return new SellGuaxiangResponse();
  case MSG_UNEQUIP_GUAXIANG: return new UnequipGuaxiangResponse();
  case MSG_VIP_DIVINE: return new VipDivineResponse();
  case MSG_CONFIRM_COOLDOWN_OVER: return new ConfirmCooldownOverResponse();
  case MSG_GET_ROLE_COOLDOWN_DATA: return new GetRoleCooldownDataResponse();
  case MSG_REMOVE_COOLDOWN: return new RemoveCooldownResponse();
  case MSG_REMOVE_COOLDOWN_WITHOUT_COST: return new RemoveCooldownWithoutCostResponse();
  case MSG_RECEIVE_CHAT_BROADCAST: return new ReceiveChatBroadcast();
  case MSG_CONFIRM_ONLINE: return new ConfirmOnlineResponse();
  case MSG_MARQUEE_BROADCAST: return new MarqueeBroadcast();
  case MSG_SEND_CHAT: return new SendChatResponse();
  case MSG_ENTER_DUNGEON_STAGE: return new EnterDungeonStageResponse();
  case MSG_FAIL_DUNGEON_STAGE: return new FailDungeonStageResponse();
  case MSG_GET_DUNGEON_STAGES: return new GetDungeonStagesResponse();
  case MSG_GET_DUNGEON_STAR_REWARD: return new GetDungeonStarRewardResponse();
  case MSG_RESURRECTION_IN_DUNGEON: return new ResurrectionInDungeonResponse();
  case MSG_SUCCESS_DUNGEON_STAGE: return new SuccessDungeonStageResponse();
  case MSG_ACCEPT_APRROVE_FRIEND: return new AcceptAprroveFriendResponse();
  case MSG_ADD_FRIEND: return new AddFriendResponse();
  case MSG_DELETE_FRIEND: return new DeleteFriendResponse();
  case MSG_GET_FRIEND_PROPERTIES: return new GetFriendPropertiesResponse();
  case MSG_INIT_APRROVE_FRIEND: return new InitAprroveFriendResponse();
  case MSG_INIT_FRIEND_DATA: return new InitFriendDataResponse();
  case MSG_GAMBLE_EQUIP: return new GambleEquipResponse();
  case MSG_GET_GAMBLE_EQUIP_INFO: return new GetGambleEquipInfoResponse();
  case MSG_INIT_DICE_DATA: return new InitDiceDataResponse();
  case MSG_ROLL_DICE: return new RollDiceResponse();
  case MSG_GET_SERVER_TIME: return new GetServerTimeResponse();
  case MSG_QUIT_GAME: return new QuitGameResponse();
  case MSG_RE_START_GAME: return new ReStartGameResponse();
  case MSG_START_GAME: return new StartGameResponse();
  case MSG_BUY_GEM: return new BuyGemResponse();
  case MSG_COMPOSE_GEM: return new ComposeGemResponse();
  case MSG_GEM_FILL_OR_REMOVE: return new GemFillOrRemoveResponse();
  case MSG_GET_GEM_INFO: return new GetGemInfoResponse();
  case MSG_ONE_KEY_COMPOSE_GEM: return new OneKeyComposeGemResponse();
  case MSG_SELL_GEM: return new SellGemResponse();
  case MSG_GET_ACTIVATION_CODE_GIFT: return new GetActivationCodeGiftResponse();
  case MSG_GET_ACTIVATION_CODE_GIFT_LIST: return new GetActivationCodeGiftListResponse();
  case MSG_GET_COMPENSATE_GIFT_LIST: return new GetCompensateGiftListResponse();
  case MSG_GET_CONTINUOUS_LOGIN_GIFT: return new GetContinuousLoginGiftResponse();
  case MSG_GET_DAILY_GUAN_JIE_GIFT: return new GetDailyGuanJieGiftResponse();
  case MSG_GET_DAILY_VIP_GIFT: return new GetDailyVipGiftResponse();
  case MSG_GET_GIFTS_IN_GIFT_BAG: return new GetGiftsInGiftBagResponse();
  case MSG_GET_LEVEL_UP_REWARDS_INFO: return new GetLevelUpRewardsInfoResponse();
  case MSG_GET_NEWBIE_REWARD_GIFT: return new GetNewbieRewardGiftResponse();
  case MSG_GET_VIP_REWARDS_INFO: return new GetVipRewardsInfoResponse();
  case MSG_INIT_MONTH_CARD_GIFT: return new InitMonthCardGiftResponse();
  case MSG_OPEN_GIFT: return new OpenGiftResponse();
  case MSG_COMPOSE_KUNGFU: return new ComposeKungfuResponse();
  case MSG_EQUIP_KUNGFU_SKILL: return new EquipKungfuSkillResponse();
  case MSG_GET_KUNGFU_SLOT: return new GetKungfuSlotResponse();
  case MSG_INIT_KUNGFU_INFO: return new InitKungfuInfoResponse();
  case MSG_LEVEL_UP_KUNGFU_SKILL: return new LevelUpKungfuSkillResponse();
  case MSG_LEVEL_UP_KUNGFU_SLOT: return new LevelUpKungfuSlotResponse();
  case MSG_ONE_KEY_UNEQUIP_KUNGFU_SKILLS: return new OneKeyUnequipKungfuSkillsResponse();
  case MSG_REFRESH_KUNGFU_STAR: return new RefreshKungfuStarResponse();
  case MSG_REPLACE_KUNGFU_SLOT: return new ReplaceKungfuSlotResponse();
  case MSG_UNLOCK_KUNGFU_BUTTON: return new UnlockKungfuButtonResponse();
  case MSG_UNLOCK_KUNGFU_SLOT: return new UnlockKungfuSlotResponse();
  case MSG_GET_DUNGEON_RANK: return new GetDungeonRankResponse();
  case MSG_GET_DUNGEON_RANK_FIRST: return new GetDungeonRankFirstResponse();
  case MSG_GET_LEADERBOARD: return new GetLeaderboardResponse();
  case MSG_GET_SELF_LEADERBOARD: return new GetSelfLeaderboardResponse();
  case MSG_LOGIN: return new LoginResponse();
  case MSG_LOGOUT: return new LogoutResponse();
  case MSG_REGISTER: return new RegisterResponse();
  case MSG_GET_ALL_MAILS: return new GetAllMailsResponse();
  case MSG_NEW_MAIL_BROADCAST: return new NewMailBroadcast();
  case MSG_OPEN_ALL_MAILS_KIT: return new OpenAllMailsKitResponse();
  case MSG_OPEN_KIT: return new OpenKitResponse();
  case MSG_OPEN_MAIL: return new OpenMailResponse();
  case MSG_REMOVE_ALL_MAILS: return new RemoveAllMailsResponse();
  case MSG_REMOVE_MAIL: return new RemoveMailResponse();
  case MSG_ENTER_MAIN_CITY: return new EnterMainCityResponse();
  case MSG_EXIT_MAIN_CITY: return new ExitMainCityResponse();
  case MSG_ENTER_MAIN_CITY_BROADCAST: return new EnterMainCityBroadcast();
  case MSG_EXIT_MAIN_CITY_BROADCAST: return new ExitMainCityBroadcast();
  case MSG_ACCEPT_NON_NORMAL_MISSION: return new AcceptNonNormalMissionResponse();
  case MSG_ACCEPT_NORMAL_MISSION: return new AcceptNormalMissionResponse();
  case MSG_ADD_MISSION_STAR: return new AddMissionStarResponse();
  case MSG_COMPLETE_MISSION: return new CompleteMissionResponse();
  case MSG_FORGOT_MISSION: return new ForgotMissionResponse();
  case MSG_INIT_MISSION_DATA: return new InitMissionDataResponse();
  case MSG_ONE_KEY_ADD_MISSION_STAR: return new OneKeyAddMissionStarResponse();
  case MSG_ONE_KEY_COMPLETE_MISSION: return new OneKeyCompleteMissionResponse();
  case MSG_REFRESH_NON_NORMAL_MISSION: return new RefreshNonNormalMissionResponse();
  case MSG_SET_ROLE_TEACH_STATE: return new SetRoleTeachStateResponse();
  case MSG_UPDATE_MISSION: return new UpdateMissionResponse();
  case MSG_INIT_MONEY_TREE_DATA: return new InitMoneyTreeDataResponse();
  case MSG_SHAKE_MONEY_TREE: return new ShakeMoneyTreeResponse();
  case MSG_GET_RECHARGE_INFO: return new GetRechargeInfoResponse();
  case MSG_PAY: return new PayResponse();
  case MSG_ACCELERATE_BORN_PET: return new AccelerateBornPetResponse();
  case MSG_BORN_PET: return new BornPetResponse();
  case MSG_CANCEL_FOLLOW_PET: return new CancelFollowPetResponse();
  case MSG_FOLLOW_MASTER_PET: return new FollowMasterPetResponse();
  case MSG_GET_BORN_PET: return new GetBornPetResponse();
  case MSG_GET_PET_INFO: return new GetPetInfoResponse();
  case MSG_GET_PET_STATUS: return new GetPetStatusResponse();
  case MSG_INIT_PET: return new InitPetResponse();
  case MSG_LEVEL_UP_PET: return new LevelUpPetResponse();
  case MSG_LEVEL_UP_PET_STAR: return new LevelUpPetStarResponse();
  case MSG_SELL_PET: return new SellPetResponse();
  case MSG_BUY_SIGN: return new BuySignResponse();
  case MSG_GET_ACTIVATION_CODE_REWARD: return new GetActivationCodeRewardResponse();
  case MSG_GET_COMPENSATE_REWARD: return new GetCompensateRewardResponse();
  case MSG_GET_DAILY_GUANJIE_REWARD: return new GetDailyGuanjieRewardResponse();
  case MSG_GET_DAILY_RECHARGE_REWARD: return new GetDailyRechargeRewardResponse();
  case MSG_GET_DAILY_REWARD: return new GetDailyRewardResponse();
  case MSG_GET_DAILY_VIP_REWARD: return new GetDailyVipRewardResponse();
  case MSG_GET_MONTH_CARD_GIFT: return new GetMonthCardGiftResponse();
  case MSG_GET_NEWBIE_REWARD: return new GetNewbieRewardResponse();
  case MSG_GET_ONLINE_GIFT_REWARD: return new GetOnlineGiftRewardResponse();
  case MSG_GET_ONLINE_TIMES_REWARD: return new GetOnlineTimesRewardResponse();
  case MSG_GET_SIGN_REWARD: return new GetSignRewardResponse();
  case MSG_GET_VIP_REWARD: return new GetVipRewardResponse();
  case MSG_INIT_DAILY_REWARD_DATA: return new InitDailyRewardDataResponse();
  case MSG_INIT_SIGN_DATA: return new InitSignDataResponse();
  case MSG_SIGN: return new SignResponse();
  case MSG_CREATE_ROLE: return new CreateRoleResponse();
  case MSG_DELETE_ROLE: return new DeleteRoleResponse();
  case MSG_GET_ROLE_DATA: return new GetRoleDataResponse();
  case MSG_GET_ROLE_LIST: return new GetRoleListResponse();
  case MSG_GET_ROLE_ZERO_STAGE: return new GetRoleZeroStageResponse();
  case MSG_LEVEL_UP_ROLE: return new LevelUpRoleResponse();
  case MSG_SAVE_ROLE_BEHAVIOR_EVENTS: return new SaveRoleBehaviorEventsResponse();
  case MSG_SAVE_ROLE_ZERO_STAGE: return new SaveRoleZeroStageResponse();
  case MSG_BUY_GOODS: return new BuyGoodsResponse();
  case MSG_GET_SHOPLIST: return new GetShoplistResponse();
  case MSG_REFRESH_FIX_BROADCAST: return new RefreshFixBroadcast();
  case MSG_REFRESH_PROMPTLY: return new RefreshPromptlyResponse();
  case MSG_GET_SKILLS: return new GetSkillsResponse();
  case MSG_LEVEL_UP_PASSIVE_SKILL: return new LevelUpPassiveSkillResponse();
  case MSG_OPEN_PASSIVE_SKILL: return new OpenPassiveSkillResponse();
  case MSG_BUY_INTO_COUNT: return new BuyIntoCountResponse();
  case MSG_END_FIGHT: return new EndFightResponse();
  case MSG_ENTER_SPECIAL_DUNGEON: return new EnterSpecialDungeonResponse();
  case MSG_GET_INVITE_LIST: return new GetInviteListResponse();
  case MSG_INIT_SPECIAL_DUNGEON: return new InitSpecialDungeonResponse();
  case MSG_KILL_BOSS: return new KillBossResponse();
  case MSG_INIT_WORSHIP: return new InitWorshipResponse();
  case MSG_WORSHIP: return new WorshipResponse();
  case MSG_ACCELERATE_SWEEP_DUNGEON: return new AccelerateSweepDungeonResponse();
  case MSG_CANCEL_SWEEP_DUNGEON: return new CancelSweepDungeonResponse();
  case MSG_END_SWEEP_DUNGEON: return new EndSweepDungeonResponse();
  case MSG_START_SWEEP_DUNGEON: return new StartSweepDungeonResponse();
  case MSG_START_VIP_SWEEP_DUNGEON: return new StartVipSweepDungeonResponse();
  case MSG_SWEEP_INFO_OF_LOGIN: return new SweepInfoOfLoginResponse();
  case MSG_BUY_POWER: return new BuyPowerResponse();
  case MSG_CHANGE_PASSWORD: return new ChangePasswordResponse();
  case MSG_EXSIT_FIGHT: return new ExsitFightResponse();
  case MSG_GET_OFFLINE_EXP: return new GetOfflineExpResponse();
  case MSG_END_TONGTIAN_TOWER_FIGHT: return new EndTongtianTowerFightResponse();
  case MSG_ENTER_TONGTIAN_TOWER: return new EnterTongtianTowerResponse();
  case MSG_INIT_TONGTIAN_TOWER: return new InitTongtianTowerResponse();
  case MSG_RESET_TONGTIAN_TOWER_TIMES: return new ResetTongtianTowerTimesResponse();
  case MSG_SAVE_TONGTIAN_TOWER_KUNGFU: return new SaveTongtianTowerKungfuResponse();
  case MSG_WORLDBOSS_ATTACK_DAMAGE: return new WorldbossAttackDamageResponse();
  case MSG_WORLDBOSS_BOSS_HP_BROADCAST: return new WorldbossBossHpBroadcast();
  case MSG_WORLDBOSS_BUY_BUFF: return new WorldbossBuyBuffResponse();
  case MSG_WORLDBOSS_COUNT_DOWN: return new WorldbossCountDownResponse();
  case MSG_WORLDBOSS_ENTER_CITY: return new WorldbossEnterCityResponse();
  case MSG_WORLDBOSS_ENTER_DUNGEON: return new WorldbossEnterDungeonResponse();
  case MSG_WORLDBOSS_GET_ALL_CONFIGS: return new WorldbossGetAllConfigsResponse();
  case MSG_WORLDBOSS_QUIT_CITY: return new WorldbossQuitCityResponse();
  case MSG_WORLDBOSS_QUIT_DUNGEON: return new WorldbossQuitDungeonResponse();
  case MSG_WORLDBOSS_RANK: return new WorldbossRankResponse();
  case MSG_WORLDBOSS_RANK_BROADCAST: return new WorldbossRankBroadcast();
  case MSG_WORLDBOSS_RESURRECTION: return new WorldbossResurrectionResponse();
  case MSG_WORLDBOSS_REWARD_TIP_BROADCAST: return new WorldbossRewardTipBroadcast();
  case MSG_WORLDBOSS_TIME_OUT_BROADCAST: return new WorldbossTimeOutBroadcast();
  case MSG_YIJUNBOSS_END_BROADCAST: return new YijunbossEndBroadcast();
  case MSG_YIJUNBOSS_INFO: return new YijunbossInfoResponse();
  case MSG_YIJUNBOSS_RANK: return new YijunbossRankResponse();
  case MSG_YIJUNBOSS_RANK_BROADCAST: return new YijunbossRankBroadcast();
  case MSG_YIJUNBOSS_START: return new YijunbossStartResponse();
  case MSG_YIJUNBOSS_START_BROADCAST: return new YijunbossStartBroadcast();
  case MSG_APPROVE_APPLICATION: return new ApproveApplicationResponse();
  case MSG_CONTRIBUTE_YIJUN: return new ContributeYijunResponse();
  case MSG_CREATE_YIJUN: return new CreateYijunResponse();
  case MSG_DEMOTE_GENERAL: return new DemoteGeneralResponse();
  case MSG_DISMISS_YIJUN: return new DismissYijunResponse();
  case MSG_EXIT_YIJUN: return new ExitYijunResponse();
  case MSG_GET_APPLICATIONS: return new GetApplicationsResponse();
  case MSG_GET_CONTRIBUTIONS: return new GetContributionsResponse();
  case MSG_GET_PRAY_LIST: return new GetPrayListResponse();
  case MSG_GET_YIJUN_BY_PAGE: return new GetYijunByPageResponse();
  case MSG_GET_YIJUN_CAPTURE_INFO: return new GetYijunCaptureInfoResponse();
  case MSG_GET_YIJUN_CAPTURE_ROLE: return new GetYijunCaptureRoleResponse();
  case MSG_GET_YIJUN_DETAIL: return new GetYijunDetailResponse();
  case MSG_GET_YIJUN_MEMBERS: return new GetYijunMembersResponse();
  case MSG_KICK_MEMBER: return new KickMemberResponse();
  case MSG_LEVEL_UP_YIJUN: return new LevelUpYijunResponse();
  case MSG_LEVEL_UP_YIJUN_BUILDING: return new LevelUpYijunBuildingResponse();
  case MSG_LEVEL_UP_YIJUN_SKILL: return new LevelUpYijunSkillResponse();
  case MSG_PRAY_YIJUN: return new PrayYijunResponse();
  case MSG_PROMOTE_GENERAL: return new PromoteGeneralResponse();
  case MSG_PUBLISH_NOTICE: return new PublishNoticeResponse();
  case MSG_REJECT_APPLICATION: return new RejectApplicationResponse();
  case MSG_SEND_APPLICATION: return new SendApplicationResponse();
  case MSG_SEND_YIJUN_CAPTURE_ATTACK: return new SendYijunCaptureAttackResponse();
  case MSG_SEND_YIJUN_CAPTURE_DEFENSE: return new SendYijunCaptureDefenseResponse();
  case MSG_SEND_YIJUN_DEFENSE: return new SendYijunDefenseResponse();
  case MSG_SPY_YIJUN: return new SpyYijunResponse();
  case MSG_TRANSFER_MARSHAL: return new TransferMarshalResponse();
  case MSG_APPROVE_APP_BROADCAST: return new ApproveAppBroadcast();
  case MSG_PROMOTE_GENERAL_BROADCAST: return new PromoteGeneralBroadcast();
  case MSG_DISMISS_YIJUN_BROADCAST: return new DismissYijunBroadcast();
  case MSG_TRANSFER_MARSHAL_BROADCAST: return new TransferMarshalBroadcast();
  case MSG_LEVEL_UP_YIJUN_BROADCAST: return new LevelUpYijunBroadcast();
  case MSG_LEVEL_UP_YIJUN_BUILDING_BROADCAST: return new LevelUpYijunBuildingBroadcast();
  case MSG_SEND_APP_BROADCAST: return new SendAppBroadcast();
  case MSG_DEMOTE_GENERAL_BROADCAST: return new DemoteGeneralBroadcast();
  case MSG_KICK_MEMBER_BROADCAST: return new KickMemberBroadcast();
  case MSG_EXIT_YIJUN_BROADCAST: return new ExitYijunBroadcast();
  case MSG_SEND_YIJUN_CAPTURE_BROADCAST: return new SendYijunCaptureBroadcast();
  case MSG_SEND_YIJUN_CAPTURE_RESULT_BROADCAST: return new SendYijunCaptureResultBroadcast();
  default:
    CCLOG("createMsg(): unkonw msgId:%d", msgId);
    throw runtime_error("createMsg() failed!");
} // end switch
} // end method
MessageLite* jsonToMsg(int msgId, CCDictionary *json) {
switch (msgId) {
  case MSG_ADD_EXP: return jsonToMsg_AddExpRequest(json);
  case MSG_CHECK_PROPERTIES: return jsonToMsg_CheckPropertiesRequest(json);
  case MSG_RECHARGE: return jsonToMsg_RechargeRequest(json);
  case MSG_TEST: return jsonToMsg_TestRequest(json);
  case MSG_GET_ACHIEVEMENT_REWARD: return jsonToMsg_GetAchievementRewardRequest(json);
  case MSG_INIT_ACHIEVEMENT: return jsonToMsg_InitAchievementRequest(json);
  case MSG_UPDATE_ACHIEVEMENT: return jsonToMsg_UpdateAchievementRequest(json);
  case MSG_USE_TITLE: return jsonToMsg_UseTitleRequest(json);
  case MSG_GET_ACTIVITY_GIFTS: return jsonToMsg_GetActivityGiftsRequest(json);
  case MSG_GET_ACTIVITY_REWARD_ROLES: return jsonToMsg_GetActivityRewardRolesRequest(json);
  case MSG_GET_ADD_UP_CONSUME: return jsonToMsg_GetAddUpConsumeRequest(json);
  case MSG_GET_ADD_UP_RECHARGE: return jsonToMsg_GetAddUpRechargeRequest(json);
  case MSG_GET_ALL_ACTIVITY_CONFIG: return jsonToMsg_GetAllActivityConfigRequest(json);
  case MSG_GET_CONSUME_LEADERBORD_DATA: return jsonToMsg_GetConsumeLeaderbordDataRequest(json);
  case MSG_GET_RECHARGE_LEADERBORD_DATA: return jsonToMsg_GetRechargeLeaderbordDataRequest(json);
  case MSG_BUY_PK_COUNT: return jsonToMsg_BuyPkCountRequest(json);
  case MSG_END_PK: return jsonToMsg_EndPkRequest(json);
  case MSG_GET_ARENA_INFO: return jsonToMsg_GetArenaInfoRequest(json);
  case MSG_GET_ARENA_PRO_NOTICE: return jsonToMsg_GetArenaProNoticeRequest(json);
  case MSG_GET_RANK_REWARD: return jsonToMsg_GetRankRewardRequest(json);
  case MSG_START_PK: return jsonToMsg_StartPkRequest(json);
  case MSG_BUY_BAG_GOODS: return jsonToMsg_BuyBagGoodsRequest(json);
  case MSG_COMPOSE_SKILL_BOOK: return jsonToMsg_ComposeSkillBookRequest(json);
  case MSG_ENHANCE_EQUIP: return jsonToMsg_EnhanceEquipRequest(json);
  case MSG_EQUIP_GOODS: return jsonToMsg_EquipGoodsRequest(json);
  case MSG_EXPAND_BAG: return jsonToMsg_ExpandBagRequest(json);
  case MSG_GET_BAG_INFO: return jsonToMsg_GetBagInfoRequest(json);
  case MSG_OPEN_GIFT_IN_BAG: return jsonToMsg_OpenGiftInBagRequest(json);
  case MSG_SAVE_BAG_ORDER: return jsonToMsg_SaveBagOrderRequest(json);
  case MSG_SELL_GOODS: return jsonToMsg_SellGoodsRequest(json);
  case MSG_UNEQUIP_GOODS: return jsonToMsg_UnequipGoodsRequest(json);
  case MSG_USE_BAG_GOODS: return jsonToMsg_UseBagGoodsRequest(json);
  case MSG_BUY_GUAXIANG: return jsonToMsg_BuyGuaxiangRequest(json);
  case MSG_DIVINE: return jsonToMsg_DivineRequest(json);
  case MSG_ENHANCE_GUAXIANG: return jsonToMsg_EnhanceGuaxiangRequest(json);
  case MSG_EQUIP_GUAXIANG: return jsonToMsg_EquipGuaxiangRequest(json);
  case MSG_EXPAND_BAG_GUAXIANG: return jsonToMsg_ExpandBagGuaxiangRequest(json);
  case MSG_INIT_GUAXIANG_DATA: return jsonToMsg_InitGuaxiangDataRequest(json);
  case MSG_LOCK_OR_UNLOCK_GUAXIANG: return jsonToMsg_LockOrUnlockGuaxiangRequest(json);
  case MSG_ONE_KEY_DIVINE: return jsonToMsg_OneKeyDivineRequest(json);
  case MSG_ONE_KEY_ENHANCE_GUAXIANG: return jsonToMsg_OneKeyEnhanceGuaxiangRequest(json);
  case MSG_ONE_KEY_GET_GUAXIANG: return jsonToMsg_OneKeyGetGuaxiangRequest(json);
  case MSG_ONE_KEY_SELL_GUAXIANG: return jsonToMsg_OneKeySellGuaxiangRequest(json);
  case MSG_SAVE_BAG_GUAXIANG_ORDER: return jsonToMsg_SaveBagGuaxiangOrderRequest(json);
  case MSG_SELL_GUAXIANG: return jsonToMsg_SellGuaxiangRequest(json);
  case MSG_UNEQUIP_GUAXIANG: return jsonToMsg_UnequipGuaxiangRequest(json);
  case MSG_VIP_DIVINE: return jsonToMsg_VipDivineRequest(json);
  case MSG_CONFIRM_COOLDOWN_OVER: return jsonToMsg_ConfirmCooldownOverRequest(json);
  case MSG_GET_ROLE_COOLDOWN_DATA: return jsonToMsg_GetRoleCooldownDataRequest(json);
  case MSG_REMOVE_COOLDOWN: return jsonToMsg_RemoveCooldownRequest(json);
  case MSG_REMOVE_COOLDOWN_WITHOUT_COST: return jsonToMsg_RemoveCooldownWithoutCostRequest(json);
  case MSG_CONFIRM_ONLINE: return jsonToMsg_ConfirmOnlineRequest(json);
  case MSG_SEND_CHAT: return jsonToMsg_SendChatRequest(json);
  case MSG_ENTER_DUNGEON_STAGE: return jsonToMsg_EnterDungeonStageRequest(json);
  case MSG_FAIL_DUNGEON_STAGE: return jsonToMsg_FailDungeonStageRequest(json);
  case MSG_GET_DUNGEON_STAGES: return jsonToMsg_GetDungeonStagesRequest(json);
  case MSG_GET_DUNGEON_STAR_REWARD: return jsonToMsg_GetDungeonStarRewardRequest(json);
  case MSG_RESURRECTION_IN_DUNGEON: return jsonToMsg_ResurrectionInDungeonRequest(json);
  case MSG_SUCCESS_DUNGEON_STAGE: return jsonToMsg_SuccessDungeonStageRequest(json);
  case MSG_ACCEPT_APRROVE_FRIEND: return jsonToMsg_AcceptAprroveFriendRequest(json);
  case MSG_ADD_FRIEND: return jsonToMsg_AddFriendRequest(json);
  case MSG_DELETE_FRIEND: return jsonToMsg_DeleteFriendRequest(json);
  case MSG_GET_FRIEND_PROPERTIES: return jsonToMsg_GetFriendPropertiesRequest(json);
  case MSG_INIT_APRROVE_FRIEND: return jsonToMsg_InitAprroveFriendRequest(json);
  case MSG_INIT_FRIEND_DATA: return jsonToMsg_InitFriendDataRequest(json);
  case MSG_GAMBLE_EQUIP: return jsonToMsg_GambleEquipRequest(json);
  case MSG_GET_GAMBLE_EQUIP_INFO: return jsonToMsg_GetGambleEquipInfoRequest(json);
  case MSG_INIT_DICE_DATA: return jsonToMsg_InitDiceDataRequest(json);
  case MSG_ROLL_DICE: return jsonToMsg_RollDiceRequest(json);
  case MSG_GET_SERVER_TIME: return jsonToMsg_GetServerTimeRequest(json);
  case MSG_QUIT_GAME: return jsonToMsg_QuitGameRequest(json);
  case MSG_RE_START_GAME: return jsonToMsg_ReStartGameRequest(json);
  case MSG_START_GAME: return jsonToMsg_StartGameRequest(json);
  case MSG_BUY_GEM: return jsonToMsg_BuyGemRequest(json);
  case MSG_COMPOSE_GEM: return jsonToMsg_ComposeGemRequest(json);
  case MSG_GEM_FILL_OR_REMOVE: return jsonToMsg_GemFillOrRemoveRequest(json);
  case MSG_GET_GEM_INFO: return jsonToMsg_GetGemInfoRequest(json);
  case MSG_ONE_KEY_COMPOSE_GEM: return jsonToMsg_OneKeyComposeGemRequest(json);
  case MSG_SELL_GEM: return jsonToMsg_SellGemRequest(json);
  case MSG_GET_ACTIVATION_CODE_GIFT: return jsonToMsg_GetActivationCodeGiftRequest(json);
  case MSG_GET_ACTIVATION_CODE_GIFT_LIST: return jsonToMsg_GetActivationCodeGiftListRequest(json);
  case MSG_GET_COMPENSATE_GIFT_LIST: return jsonToMsg_GetCompensateGiftListRequest(json);
  case MSG_GET_CONTINUOUS_LOGIN_GIFT: return jsonToMsg_GetContinuousLoginGiftRequest(json);
  case MSG_GET_DAILY_GUAN_JIE_GIFT: return jsonToMsg_GetDailyGuanJieGiftRequest(json);
  case MSG_GET_DAILY_VIP_GIFT: return jsonToMsg_GetDailyVipGiftRequest(json);
  case MSG_GET_GIFTS_IN_GIFT_BAG: return jsonToMsg_GetGiftsInGiftBagRequest(json);
  case MSG_GET_LEVEL_UP_REWARDS_INFO: return jsonToMsg_GetLevelUpRewardsInfoRequest(json);
  case MSG_GET_NEWBIE_REWARD_GIFT: return jsonToMsg_GetNewbieRewardGiftRequest(json);
  case MSG_GET_VIP_REWARDS_INFO: return jsonToMsg_GetVipRewardsInfoRequest(json);
  case MSG_INIT_MONTH_CARD_GIFT: return jsonToMsg_InitMonthCardGiftRequest(json);
  case MSG_OPEN_GIFT: return jsonToMsg_OpenGiftRequest(json);
  case MSG_COMPOSE_KUNGFU: return jsonToMsg_ComposeKungfuRequest(json);
  case MSG_EQUIP_KUNGFU_SKILL: return jsonToMsg_EquipKungfuSkillRequest(json);
  case MSG_GET_KUNGFU_SLOT: return jsonToMsg_GetKungfuSlotRequest(json);
  case MSG_INIT_KUNGFU_INFO: return jsonToMsg_InitKungfuInfoRequest(json);
  case MSG_LEVEL_UP_KUNGFU_SKILL: return jsonToMsg_LevelUpKungfuSkillRequest(json);
  case MSG_LEVEL_UP_KUNGFU_SLOT: return jsonToMsg_LevelUpKungfuSlotRequest(json);
  case MSG_ONE_KEY_UNEQUIP_KUNGFU_SKILLS: return jsonToMsg_OneKeyUnequipKungfuSkillsRequest(json);
  case MSG_REFRESH_KUNGFU_STAR: return jsonToMsg_RefreshKungfuStarRequest(json);
  case MSG_REPLACE_KUNGFU_SLOT: return jsonToMsg_ReplaceKungfuSlotRequest(json);
  case MSG_UNLOCK_KUNGFU_BUTTON: return jsonToMsg_UnlockKungfuButtonRequest(json);
  case MSG_UNLOCK_KUNGFU_SLOT: return jsonToMsg_UnlockKungfuSlotRequest(json);
  case MSG_GET_DUNGEON_RANK: return jsonToMsg_GetDungeonRankRequest(json);
  case MSG_GET_DUNGEON_RANK_FIRST: return jsonToMsg_GetDungeonRankFirstRequest(json);
  case MSG_GET_LEADERBOARD: return jsonToMsg_GetLeaderboardRequest(json);
  case MSG_GET_SELF_LEADERBOARD: return jsonToMsg_GetSelfLeaderboardRequest(json);
  case MSG_LOGIN: return jsonToMsg_LoginRequest(json);
  case MSG_LOGOUT: return jsonToMsg_LogoutRequest(json);
  case MSG_REGISTER: return jsonToMsg_RegisterRequest(json);
  case MSG_GET_ALL_MAILS: return jsonToMsg_GetAllMailsRequest(json);
  case MSG_OPEN_ALL_MAILS_KIT: return jsonToMsg_OpenAllMailsKitRequest(json);
  case MSG_OPEN_KIT: return jsonToMsg_OpenKitRequest(json);
  case MSG_OPEN_MAIL: return jsonToMsg_OpenMailRequest(json);
  case MSG_REMOVE_ALL_MAILS: return jsonToMsg_RemoveAllMailsRequest(json);
  case MSG_REMOVE_MAIL: return jsonToMsg_RemoveMailRequest(json);
  case MSG_ENTER_MAIN_CITY: return jsonToMsg_EnterMainCityRequest(json);
  case MSG_EXIT_MAIN_CITY: return jsonToMsg_ExitMainCityRequest(json);
  case MSG_ACCEPT_NON_NORMAL_MISSION: return jsonToMsg_AcceptNonNormalMissionRequest(json);
  case MSG_ACCEPT_NORMAL_MISSION: return jsonToMsg_AcceptNormalMissionRequest(json);
  case MSG_ADD_MISSION_STAR: return jsonToMsg_AddMissionStarRequest(json);
  case MSG_COMPLETE_MISSION: return jsonToMsg_CompleteMissionRequest(json);
  case MSG_FORGOT_MISSION: return jsonToMsg_ForgotMissionRequest(json);
  case MSG_INIT_MISSION_DATA: return jsonToMsg_InitMissionDataRequest(json);
  case MSG_ONE_KEY_ADD_MISSION_STAR: return jsonToMsg_OneKeyAddMissionStarRequest(json);
  case MSG_ONE_KEY_COMPLETE_MISSION: return jsonToMsg_OneKeyCompleteMissionRequest(json);
  case MSG_REFRESH_NON_NORMAL_MISSION: return jsonToMsg_RefreshNonNormalMissionRequest(json);
  case MSG_SET_ROLE_TEACH_STATE: return jsonToMsg_SetRoleTeachStateRequest(json);
  case MSG_UPDATE_MISSION: return jsonToMsg_UpdateMissionRequest(json);
  case MSG_INIT_MONEY_TREE_DATA: return jsonToMsg_InitMoneyTreeDataRequest(json);
  case MSG_SHAKE_MONEY_TREE: return jsonToMsg_ShakeMoneyTreeRequest(json);
  case MSG_GET_RECHARGE_INFO: return jsonToMsg_GetRechargeInfoRequest(json);
  case MSG_PAY: return jsonToMsg_PayRequest(json);
  case MSG_ACCELERATE_BORN_PET: return jsonToMsg_AccelerateBornPetRequest(json);
  case MSG_BORN_PET: return jsonToMsg_BornPetRequest(json);
  case MSG_CANCEL_FOLLOW_PET: return jsonToMsg_CancelFollowPetRequest(json);
  case MSG_FOLLOW_MASTER_PET: return jsonToMsg_FollowMasterPetRequest(json);
  case MSG_GET_BORN_PET: return jsonToMsg_GetBornPetRequest(json);
  case MSG_GET_PET_INFO: return jsonToMsg_GetPetInfoRequest(json);
  case MSG_GET_PET_STATUS: return jsonToMsg_GetPetStatusRequest(json);
  case MSG_INIT_PET: return jsonToMsg_InitPetRequest(json);
  case MSG_LEVEL_UP_PET: return jsonToMsg_LevelUpPetRequest(json);
  case MSG_LEVEL_UP_PET_STAR: return jsonToMsg_LevelUpPetStarRequest(json);
  case MSG_SELL_PET: return jsonToMsg_SellPetRequest(json);
  case MSG_BUY_SIGN: return jsonToMsg_BuySignRequest(json);
  case MSG_GET_ACTIVATION_CODE_REWARD: return jsonToMsg_GetActivationCodeRewardRequest(json);
  case MSG_GET_COMPENSATE_REWARD: return jsonToMsg_GetCompensateRewardRequest(json);
  case MSG_GET_DAILY_GUANJIE_REWARD: return jsonToMsg_GetDailyGuanjieRewardRequest(json);
  case MSG_GET_DAILY_RECHARGE_REWARD: return jsonToMsg_GetDailyRechargeRewardRequest(json);
  case MSG_GET_DAILY_REWARD: return jsonToMsg_GetDailyRewardRequest(json);
  case MSG_GET_DAILY_VIP_REWARD: return jsonToMsg_GetDailyVipRewardRequest(json);
  case MSG_GET_MONTH_CARD_GIFT: return jsonToMsg_GetMonthCardGiftRequest(json);
  case MSG_GET_NEWBIE_REWARD: return jsonToMsg_GetNewbieRewardRequest(json);
  case MSG_GET_ONLINE_GIFT_REWARD: return jsonToMsg_GetOnlineGiftRewardRequest(json);
  case MSG_GET_ONLINE_TIMES_REWARD: return jsonToMsg_GetOnlineTimesRewardRequest(json);
  case MSG_GET_SIGN_REWARD: return jsonToMsg_GetSignRewardRequest(json);
  case MSG_GET_VIP_REWARD: return jsonToMsg_GetVipRewardRequest(json);
  case MSG_INIT_DAILY_REWARD_DATA: return jsonToMsg_InitDailyRewardDataRequest(json);
  case MSG_INIT_SIGN_DATA: return jsonToMsg_InitSignDataRequest(json);
  case MSG_SIGN: return jsonToMsg_SignRequest(json);
  case MSG_CREATE_ROLE: return jsonToMsg_CreateRoleRequest(json);
  case MSG_DELETE_ROLE: return jsonToMsg_DeleteRoleRequest(json);
  case MSG_GET_ROLE_DATA: return jsonToMsg_GetRoleDataRequest(json);
  case MSG_GET_ROLE_LIST: return jsonToMsg_GetRoleListRequest(json);
  case MSG_GET_ROLE_ZERO_STAGE: return jsonToMsg_GetRoleZeroStageRequest(json);
  case MSG_LEVEL_UP_ROLE: return jsonToMsg_LevelUpRoleRequest(json);
  case MSG_SAVE_ROLE_BEHAVIOR_EVENTS: return jsonToMsg_SaveRoleBehaviorEventsRequest(json);
  case MSG_SAVE_ROLE_ZERO_STAGE: return jsonToMsg_SaveRoleZeroStageRequest(json);
  case MSG_BUY_GOODS: return jsonToMsg_BuyGoodsRequest(json);
  case MSG_GET_SHOPLIST: return jsonToMsg_GetShoplistRequest(json);
  case MSG_REFRESH_PROMPTLY: return jsonToMsg_RefreshPromptlyRequest(json);
  case MSG_GET_SKILLS: return jsonToMsg_GetSkillsRequest(json);
  case MSG_LEVEL_UP_PASSIVE_SKILL: return jsonToMsg_LevelUpPassiveSkillRequest(json);
  case MSG_OPEN_PASSIVE_SKILL: return jsonToMsg_OpenPassiveSkillRequest(json);
  case MSG_BUY_INTO_COUNT: return jsonToMsg_BuyIntoCountRequest(json);
  case MSG_END_FIGHT: return jsonToMsg_EndFightRequest(json);
  case MSG_ENTER_SPECIAL_DUNGEON: return jsonToMsg_EnterSpecialDungeonRequest(json);
  case MSG_GET_INVITE_LIST: return jsonToMsg_GetInviteListRequest(json);
  case MSG_INIT_SPECIAL_DUNGEON: return jsonToMsg_InitSpecialDungeonRequest(json);
  case MSG_KILL_BOSS: return jsonToMsg_KillBossRequest(json);
  case MSG_INIT_WORSHIP: return jsonToMsg_InitWorshipRequest(json);
  case MSG_WORSHIP: return jsonToMsg_WorshipRequest(json);
  case MSG_ACCELERATE_SWEEP_DUNGEON: return jsonToMsg_AccelerateSweepDungeonRequest(json);
  case MSG_CANCEL_SWEEP_DUNGEON: return jsonToMsg_CancelSweepDungeonRequest(json);
  case MSG_END_SWEEP_DUNGEON: return jsonToMsg_EndSweepDungeonRequest(json);
  case MSG_START_SWEEP_DUNGEON: return jsonToMsg_StartSweepDungeonRequest(json);
  case MSG_START_VIP_SWEEP_DUNGEON: return jsonToMsg_StartVipSweepDungeonRequest(json);
  case MSG_SWEEP_INFO_OF_LOGIN: return jsonToMsg_SweepInfoOfLoginRequest(json);
  case MSG_BUY_POWER: return jsonToMsg_BuyPowerRequest(json);
  case MSG_CHANGE_PASSWORD: return jsonToMsg_ChangePasswordRequest(json);
  case MSG_EXSIT_FIGHT: return jsonToMsg_ExsitFightRequest(json);
  case MSG_GET_OFFLINE_EXP: return jsonToMsg_GetOfflineExpRequest(json);
  case MSG_END_TONGTIAN_TOWER_FIGHT: return jsonToMsg_EndTongtianTowerFightRequest(json);
  case MSG_ENTER_TONGTIAN_TOWER: return jsonToMsg_EnterTongtianTowerRequest(json);
  case MSG_INIT_TONGTIAN_TOWER: return jsonToMsg_InitTongtianTowerRequest(json);
  case MSG_RESET_TONGTIAN_TOWER_TIMES: return jsonToMsg_ResetTongtianTowerTimesRequest(json);
  case MSG_SAVE_TONGTIAN_TOWER_KUNGFU: return jsonToMsg_SaveTongtianTowerKungfuRequest(json);
  case MSG_WORLDBOSS_ATTACK_DAMAGE: return jsonToMsg_WorldbossAttackDamageRequest(json);
  case MSG_WORLDBOSS_BUY_BUFF: return jsonToMsg_WorldbossBuyBuffRequest(json);
  case MSG_WORLDBOSS_COUNT_DOWN: return jsonToMsg_WorldbossCountDownRequest(json);
  case MSG_WORLDBOSS_ENTER_CITY: return jsonToMsg_WorldbossEnterCityRequest(json);
  case MSG_WORLDBOSS_ENTER_DUNGEON: return jsonToMsg_WorldbossEnterDungeonRequest(json);
  case MSG_WORLDBOSS_GET_ALL_CONFIGS: return jsonToMsg_WorldbossGetAllConfigsRequest(json);
  case MSG_WORLDBOSS_QUIT_CITY: return jsonToMsg_WorldbossQuitCityRequest(json);
  case MSG_WORLDBOSS_QUIT_DUNGEON: return jsonToMsg_WorldbossQuitDungeonRequest(json);
  case MSG_WORLDBOSS_RANK: return jsonToMsg_WorldbossRankRequest(json);
  case MSG_WORLDBOSS_RESURRECTION: return jsonToMsg_WorldbossResurrectionRequest(json);
  case MSG_YIJUNBOSS_INFO: return jsonToMsg_YijunbossInfoRequest(json);
  case MSG_YIJUNBOSS_RANK: return jsonToMsg_YijunbossRankRequest(json);
  case MSG_YIJUNBOSS_START: return jsonToMsg_YijunbossStartRequest(json);
  case MSG_APPROVE_APPLICATION: return jsonToMsg_ApproveApplicationRequest(json);
  case MSG_CONTRIBUTE_YIJUN: return jsonToMsg_ContributeYijunRequest(json);
  case MSG_CREATE_YIJUN: return jsonToMsg_CreateYijunRequest(json);
  case MSG_DEMOTE_GENERAL: return jsonToMsg_DemoteGeneralRequest(json);
  case MSG_DISMISS_YIJUN: return jsonToMsg_DismissYijunRequest(json);
  case MSG_EXIT_YIJUN: return jsonToMsg_ExitYijunRequest(json);
  case MSG_GET_APPLICATIONS: return jsonToMsg_GetApplicationsRequest(json);
  case MSG_GET_CONTRIBUTIONS: return jsonToMsg_GetContributionsRequest(json);
  case MSG_GET_PRAY_LIST: return jsonToMsg_GetPrayListRequest(json);
  case MSG_GET_YIJUN_BY_PAGE: return jsonToMsg_GetYijunByPageRequest(json);
  case MSG_GET_YIJUN_CAPTURE_INFO: return jsonToMsg_GetYijunCaptureInfoRequest(json);
  case MSG_GET_YIJUN_CAPTURE_ROLE: return jsonToMsg_GetYijunCaptureRoleRequest(json);
  case MSG_GET_YIJUN_DETAIL: return jsonToMsg_GetYijunDetailRequest(json);
  case MSG_GET_YIJUN_MEMBERS: return jsonToMsg_GetYijunMembersRequest(json);
  case MSG_KICK_MEMBER: return jsonToMsg_KickMemberRequest(json);
  case MSG_LEVEL_UP_YIJUN: return jsonToMsg_LevelUpYijunRequest(json);
  case MSG_LEVEL_UP_YIJUN_BUILDING: return jsonToMsg_LevelUpYijunBuildingRequest(json);
  case MSG_LEVEL_UP_YIJUN_SKILL: return jsonToMsg_LevelUpYijunSkillRequest(json);
  case MSG_PRAY_YIJUN: return jsonToMsg_PrayYijunRequest(json);
  case MSG_PROMOTE_GENERAL: return jsonToMsg_PromoteGeneralRequest(json);
  case MSG_PUBLISH_NOTICE: return jsonToMsg_PublishNoticeRequest(json);
  case MSG_REJECT_APPLICATION: return jsonToMsg_RejectApplicationRequest(json);
  case MSG_SEND_APPLICATION: return jsonToMsg_SendApplicationRequest(json);
  case MSG_SEND_YIJUN_CAPTURE_ATTACK: return jsonToMsg_SendYijunCaptureAttackRequest(json);
  case MSG_SEND_YIJUN_CAPTURE_DEFENSE: return jsonToMsg_SendYijunCaptureDefenseRequest(json);
  case MSG_SEND_YIJUN_DEFENSE: return jsonToMsg_SendYijunDefenseRequest(json);
  case MSG_SPY_YIJUN: return jsonToMsg_SpyYijunRequest(json);
  case MSG_TRANSFER_MARSHAL: return jsonToMsg_TransferMarshalRequest(json);
  default:
    CCLOG("jsonToMsg(): unkonw msgId:%d", msgId);
    throw runtime_error("jsonToMsg() failed!");
} // end switch
} // end method
CCDictionary* msgToJson(int msgId, MessageLite *msg) {
switch (msgId) {
  case MSG_ADD_EXP: return msgToJson_AddExpResponse(static_cast<AddExpResponse *>(msg));
  case MSG_CHECK_PROPERTIES: return msgToJson_CheckPropertiesResponse(static_cast<CheckPropertiesResponse *>(msg));
  case MSG_RECHARGE: return msgToJson_RechargeResponse(static_cast<RechargeResponse *>(msg));
  case MSG_TEST: return msgToJson_TestResponse(static_cast<TestResponse *>(msg));
  case MSG_GET_ACHIEVEMENT_REWARD: return msgToJson_GetAchievementRewardResponse(static_cast<GetAchievementRewardResponse *>(msg));
  case MSG_INIT_ACHIEVEMENT: return msgToJson_InitAchievementResponse(static_cast<InitAchievementResponse *>(msg));
  case MSG_UPDATE_ACHIEVEMENT: return msgToJson_UpdateAchievementResponse(static_cast<UpdateAchievementResponse *>(msg));
  case MSG_USE_TITLE: return msgToJson_UseTitleResponse(static_cast<UseTitleResponse *>(msg));
  case MSG_GET_ACTIVITY_GIFTS: return msgToJson_GetActivityGiftsResponse(static_cast<GetActivityGiftsResponse *>(msg));
  case MSG_GET_ACTIVITY_REWARD_ROLES: return msgToJson_GetActivityRewardRolesResponse(static_cast<GetActivityRewardRolesResponse *>(msg));
  case MSG_GET_ADD_UP_CONSUME: return msgToJson_GetAddUpConsumeResponse(static_cast<GetAddUpConsumeResponse *>(msg));
  case MSG_GET_ADD_UP_RECHARGE: return msgToJson_GetAddUpRechargeResponse(static_cast<GetAddUpRechargeResponse *>(msg));
  case MSG_GET_ALL_ACTIVITY_CONFIG: return msgToJson_GetAllActivityConfigResponse(static_cast<GetAllActivityConfigResponse *>(msg));
  case MSG_GET_CONSUME_LEADERBORD_DATA: return msgToJson_GetConsumeLeaderbordDataResponse(static_cast<GetConsumeLeaderbordDataResponse *>(msg));
  case MSG_GET_RECHARGE_LEADERBORD_DATA: return msgToJson_GetRechargeLeaderbordDataResponse(static_cast<GetRechargeLeaderbordDataResponse *>(msg));
  case MSG_BUY_PK_COUNT: return msgToJson_BuyPkCountResponse(static_cast<BuyPkCountResponse *>(msg));
  case MSG_END_PK: return msgToJson_EndPkResponse(static_cast<EndPkResponse *>(msg));
  case MSG_GET_ARENA_INFO: return msgToJson_GetArenaInfoResponse(static_cast<GetArenaInfoResponse *>(msg));
  case MSG_GET_ARENA_PRO_NOTICE: return msgToJson_GetArenaProNoticeResponse(static_cast<GetArenaProNoticeResponse *>(msg));
  case MSG_GET_RANK_REWARD: return msgToJson_GetRankRewardResponse(static_cast<GetRankRewardResponse *>(msg));
  case MSG_START_PK: return msgToJson_StartPkResponse(static_cast<StartPkResponse *>(msg));
  case MSG_BUY_BAG_GOODS: return msgToJson_BuyBagGoodsResponse(static_cast<BuyBagGoodsResponse *>(msg));
  case MSG_COMPOSE_SKILL_BOOK: return msgToJson_ComposeSkillBookResponse(static_cast<ComposeSkillBookResponse *>(msg));
  case MSG_ENHANCE_EQUIP: return msgToJson_EnhanceEquipResponse(static_cast<EnhanceEquipResponse *>(msg));
  case MSG_EQUIP_GOODS: return msgToJson_EquipGoodsResponse(static_cast<EquipGoodsResponse *>(msg));
  case MSG_EXPAND_BAG: return msgToJson_ExpandBagResponse(static_cast<ExpandBagResponse *>(msg));
  case MSG_GET_BAG_INFO: return msgToJson_GetBagInfoResponse(static_cast<GetBagInfoResponse *>(msg));
  case MSG_OPEN_GIFT_IN_BAG: return msgToJson_OpenGiftInBagResponse(static_cast<OpenGiftInBagResponse *>(msg));
  case MSG_SAVE_BAG_ORDER: return msgToJson_SaveBagOrderResponse(static_cast<SaveBagOrderResponse *>(msg));
  case MSG_SELL_GOODS: return msgToJson_SellGoodsResponse(static_cast<SellGoodsResponse *>(msg));
  case MSG_UNEQUIP_GOODS: return msgToJson_UnequipGoodsResponse(static_cast<UnequipGoodsResponse *>(msg));
  case MSG_USE_BAG_GOODS: return msgToJson_UseBagGoodsResponse(static_cast<UseBagGoodsResponse *>(msg));
  case MSG_BUY_GUAXIANG: return msgToJson_BuyGuaxiangResponse(static_cast<BuyGuaxiangResponse *>(msg));
  case MSG_DIVINE: return msgToJson_DivineResponse(static_cast<DivineResponse *>(msg));
  case MSG_ENHANCE_GUAXIANG: return msgToJson_EnhanceGuaxiangResponse(static_cast<EnhanceGuaxiangResponse *>(msg));
  case MSG_EQUIP_GUAXIANG: return msgToJson_EquipGuaxiangResponse(static_cast<EquipGuaxiangResponse *>(msg));
  case MSG_EXPAND_BAG_GUAXIANG: return msgToJson_ExpandBagGuaxiangResponse(static_cast<ExpandBagGuaxiangResponse *>(msg));
  case MSG_INIT_GUAXIANG_DATA: return msgToJson_InitGuaxiangDataResponse(static_cast<InitGuaxiangDataResponse *>(msg));
  case MSG_LOCK_OR_UNLOCK_GUAXIANG: return msgToJson_LockOrUnlockGuaxiangResponse(static_cast<LockOrUnlockGuaxiangResponse *>(msg));
  case MSG_ONE_KEY_DIVINE: return msgToJson_OneKeyDivineResponse(static_cast<OneKeyDivineResponse *>(msg));
  case MSG_ONE_KEY_ENHANCE_GUAXIANG: return msgToJson_OneKeyEnhanceGuaxiangResponse(static_cast<OneKeyEnhanceGuaxiangResponse *>(msg));
  case MSG_ONE_KEY_GET_GUAXIANG: return msgToJson_OneKeyGetGuaxiangResponse(static_cast<OneKeyGetGuaxiangResponse *>(msg));
  case MSG_ONE_KEY_SELL_GUAXIANG: return msgToJson_OneKeySellGuaxiangResponse(static_cast<OneKeySellGuaxiangResponse *>(msg));
  case MSG_SAVE_BAG_GUAXIANG_ORDER: return msgToJson_SaveBagGuaxiangOrderResponse(static_cast<SaveBagGuaxiangOrderResponse *>(msg));
  case MSG_SELL_GUAXIANG: return msgToJson_SellGuaxiangResponse(static_cast<SellGuaxiangResponse *>(msg));
  case MSG_UNEQUIP_GUAXIANG: return msgToJson_UnequipGuaxiangResponse(static_cast<UnequipGuaxiangResponse *>(msg));
  case MSG_VIP_DIVINE: return msgToJson_VipDivineResponse(static_cast<VipDivineResponse *>(msg));
  case MSG_CONFIRM_COOLDOWN_OVER: return msgToJson_ConfirmCooldownOverResponse(static_cast<ConfirmCooldownOverResponse *>(msg));
  case MSG_GET_ROLE_COOLDOWN_DATA: return msgToJson_GetRoleCooldownDataResponse(static_cast<GetRoleCooldownDataResponse *>(msg));
  case MSG_REMOVE_COOLDOWN: return msgToJson_RemoveCooldownResponse(static_cast<RemoveCooldownResponse *>(msg));
  case MSG_REMOVE_COOLDOWN_WITHOUT_COST: return msgToJson_RemoveCooldownWithoutCostResponse(static_cast<RemoveCooldownWithoutCostResponse *>(msg));
  case MSG_RECEIVE_CHAT_BROADCAST: return msgToJson_ReceiveChatBroadcast(static_cast<ReceiveChatBroadcast *>(msg));
  case MSG_CONFIRM_ONLINE: return msgToJson_ConfirmOnlineResponse(static_cast<ConfirmOnlineResponse *>(msg));
  case MSG_MARQUEE_BROADCAST: return msgToJson_MarqueeBroadcast(static_cast<MarqueeBroadcast *>(msg));
  case MSG_SEND_CHAT: return msgToJson_SendChatResponse(static_cast<SendChatResponse *>(msg));
  case MSG_ENTER_DUNGEON_STAGE: return msgToJson_EnterDungeonStageResponse(static_cast<EnterDungeonStageResponse *>(msg));
  case MSG_FAIL_DUNGEON_STAGE: return msgToJson_FailDungeonStageResponse(static_cast<FailDungeonStageResponse *>(msg));
  case MSG_GET_DUNGEON_STAGES: return msgToJson_GetDungeonStagesResponse(static_cast<GetDungeonStagesResponse *>(msg));
  case MSG_GET_DUNGEON_STAR_REWARD: return msgToJson_GetDungeonStarRewardResponse(static_cast<GetDungeonStarRewardResponse *>(msg));
  case MSG_RESURRECTION_IN_DUNGEON: return msgToJson_ResurrectionInDungeonResponse(static_cast<ResurrectionInDungeonResponse *>(msg));
  case MSG_SUCCESS_DUNGEON_STAGE: return msgToJson_SuccessDungeonStageResponse(static_cast<SuccessDungeonStageResponse *>(msg));
  case MSG_ACCEPT_APRROVE_FRIEND: return msgToJson_AcceptAprroveFriendResponse(static_cast<AcceptAprroveFriendResponse *>(msg));
  case MSG_ADD_FRIEND: return msgToJson_AddFriendResponse(static_cast<AddFriendResponse *>(msg));
  case MSG_DELETE_FRIEND: return msgToJson_DeleteFriendResponse(static_cast<DeleteFriendResponse *>(msg));
  case MSG_GET_FRIEND_PROPERTIES: return msgToJson_GetFriendPropertiesResponse(static_cast<GetFriendPropertiesResponse *>(msg));
  case MSG_INIT_APRROVE_FRIEND: return msgToJson_InitAprroveFriendResponse(static_cast<InitAprroveFriendResponse *>(msg));
  case MSG_INIT_FRIEND_DATA: return msgToJson_InitFriendDataResponse(static_cast<InitFriendDataResponse *>(msg));
  case MSG_GAMBLE_EQUIP: return msgToJson_GambleEquipResponse(static_cast<GambleEquipResponse *>(msg));
  case MSG_GET_GAMBLE_EQUIP_INFO: return msgToJson_GetGambleEquipInfoResponse(static_cast<GetGambleEquipInfoResponse *>(msg));
  case MSG_INIT_DICE_DATA: return msgToJson_InitDiceDataResponse(static_cast<InitDiceDataResponse *>(msg));
  case MSG_ROLL_DICE: return msgToJson_RollDiceResponse(static_cast<RollDiceResponse *>(msg));
  case MSG_GET_SERVER_TIME: return msgToJson_GetServerTimeResponse(static_cast<GetServerTimeResponse *>(msg));
  case MSG_QUIT_GAME: return msgToJson_QuitGameResponse(static_cast<QuitGameResponse *>(msg));
  case MSG_RE_START_GAME: return msgToJson_ReStartGameResponse(static_cast<ReStartGameResponse *>(msg));
  case MSG_START_GAME: return msgToJson_StartGameResponse(static_cast<StartGameResponse *>(msg));
  case MSG_BUY_GEM: return msgToJson_BuyGemResponse(static_cast<BuyGemResponse *>(msg));
  case MSG_COMPOSE_GEM: return msgToJson_ComposeGemResponse(static_cast<ComposeGemResponse *>(msg));
  case MSG_GEM_FILL_OR_REMOVE: return msgToJson_GemFillOrRemoveResponse(static_cast<GemFillOrRemoveResponse *>(msg));
  case MSG_GET_GEM_INFO: return msgToJson_GetGemInfoResponse(static_cast<GetGemInfoResponse *>(msg));
  case MSG_ONE_KEY_COMPOSE_GEM: return msgToJson_OneKeyComposeGemResponse(static_cast<OneKeyComposeGemResponse *>(msg));
  case MSG_SELL_GEM: return msgToJson_SellGemResponse(static_cast<SellGemResponse *>(msg));
  case MSG_GET_ACTIVATION_CODE_GIFT: return msgToJson_GetActivationCodeGiftResponse(static_cast<GetActivationCodeGiftResponse *>(msg));
  case MSG_GET_ACTIVATION_CODE_GIFT_LIST: return msgToJson_GetActivationCodeGiftListResponse(static_cast<GetActivationCodeGiftListResponse *>(msg));
  case MSG_GET_COMPENSATE_GIFT_LIST: return msgToJson_GetCompensateGiftListResponse(static_cast<GetCompensateGiftListResponse *>(msg));
  case MSG_GET_CONTINUOUS_LOGIN_GIFT: return msgToJson_GetContinuousLoginGiftResponse(static_cast<GetContinuousLoginGiftResponse *>(msg));
  case MSG_GET_DAILY_GUAN_JIE_GIFT: return msgToJson_GetDailyGuanJieGiftResponse(static_cast<GetDailyGuanJieGiftResponse *>(msg));
  case MSG_GET_DAILY_VIP_GIFT: return msgToJson_GetDailyVipGiftResponse(static_cast<GetDailyVipGiftResponse *>(msg));
  case MSG_GET_GIFTS_IN_GIFT_BAG: return msgToJson_GetGiftsInGiftBagResponse(static_cast<GetGiftsInGiftBagResponse *>(msg));
  case MSG_GET_LEVEL_UP_REWARDS_INFO: return msgToJson_GetLevelUpRewardsInfoResponse(static_cast<GetLevelUpRewardsInfoResponse *>(msg));
  case MSG_GET_NEWBIE_REWARD_GIFT: return msgToJson_GetNewbieRewardGiftResponse(static_cast<GetNewbieRewardGiftResponse *>(msg));
  case MSG_GET_VIP_REWARDS_INFO: return msgToJson_GetVipRewardsInfoResponse(static_cast<GetVipRewardsInfoResponse *>(msg));
  case MSG_INIT_MONTH_CARD_GIFT: return msgToJson_InitMonthCardGiftResponse(static_cast<InitMonthCardGiftResponse *>(msg));
  case MSG_OPEN_GIFT: return msgToJson_OpenGiftResponse(static_cast<OpenGiftResponse *>(msg));
  case MSG_COMPOSE_KUNGFU: return msgToJson_ComposeKungfuResponse(static_cast<ComposeKungfuResponse *>(msg));
  case MSG_EQUIP_KUNGFU_SKILL: return msgToJson_EquipKungfuSkillResponse(static_cast<EquipKungfuSkillResponse *>(msg));
  case MSG_GET_KUNGFU_SLOT: return msgToJson_GetKungfuSlotResponse(static_cast<GetKungfuSlotResponse *>(msg));
  case MSG_INIT_KUNGFU_INFO: return msgToJson_InitKungfuInfoResponse(static_cast<InitKungfuInfoResponse *>(msg));
  case MSG_LEVEL_UP_KUNGFU_SKILL: return msgToJson_LevelUpKungfuSkillResponse(static_cast<LevelUpKungfuSkillResponse *>(msg));
  case MSG_LEVEL_UP_KUNGFU_SLOT: return msgToJson_LevelUpKungfuSlotResponse(static_cast<LevelUpKungfuSlotResponse *>(msg));
  case MSG_ONE_KEY_UNEQUIP_KUNGFU_SKILLS: return msgToJson_OneKeyUnequipKungfuSkillsResponse(static_cast<OneKeyUnequipKungfuSkillsResponse *>(msg));
  case MSG_REFRESH_KUNGFU_STAR: return msgToJson_RefreshKungfuStarResponse(static_cast<RefreshKungfuStarResponse *>(msg));
  case MSG_REPLACE_KUNGFU_SLOT: return msgToJson_ReplaceKungfuSlotResponse(static_cast<ReplaceKungfuSlotResponse *>(msg));
  case MSG_UNLOCK_KUNGFU_BUTTON: return msgToJson_UnlockKungfuButtonResponse(static_cast<UnlockKungfuButtonResponse *>(msg));
  case MSG_UNLOCK_KUNGFU_SLOT: return msgToJson_UnlockKungfuSlotResponse(static_cast<UnlockKungfuSlotResponse *>(msg));
  case MSG_GET_DUNGEON_RANK: return msgToJson_GetDungeonRankResponse(static_cast<GetDungeonRankResponse *>(msg));
  case MSG_GET_DUNGEON_RANK_FIRST: return msgToJson_GetDungeonRankFirstResponse(static_cast<GetDungeonRankFirstResponse *>(msg));
  case MSG_GET_LEADERBOARD: return msgToJson_GetLeaderboardResponse(static_cast<GetLeaderboardResponse *>(msg));
  case MSG_GET_SELF_LEADERBOARD: return msgToJson_GetSelfLeaderboardResponse(static_cast<GetSelfLeaderboardResponse *>(msg));
  case MSG_LOGIN: return msgToJson_LoginResponse(static_cast<LoginResponse *>(msg));
  case MSG_LOGOUT: return msgToJson_LogoutResponse(static_cast<LogoutResponse *>(msg));
  case MSG_REGISTER: return msgToJson_RegisterResponse(static_cast<RegisterResponse *>(msg));
  case MSG_GET_ALL_MAILS: return msgToJson_GetAllMailsResponse(static_cast<GetAllMailsResponse *>(msg));
  case MSG_NEW_MAIL_BROADCAST: return msgToJson_NewMailBroadcast(static_cast<NewMailBroadcast *>(msg));
  case MSG_OPEN_ALL_MAILS_KIT: return msgToJson_OpenAllMailsKitResponse(static_cast<OpenAllMailsKitResponse *>(msg));
  case MSG_OPEN_KIT: return msgToJson_OpenKitResponse(static_cast<OpenKitResponse *>(msg));
  case MSG_OPEN_MAIL: return msgToJson_OpenMailResponse(static_cast<OpenMailResponse *>(msg));
  case MSG_REMOVE_ALL_MAILS: return msgToJson_RemoveAllMailsResponse(static_cast<RemoveAllMailsResponse *>(msg));
  case MSG_REMOVE_MAIL: return msgToJson_RemoveMailResponse(static_cast<RemoveMailResponse *>(msg));
  case MSG_ENTER_MAIN_CITY: return msgToJson_EnterMainCityResponse(static_cast<EnterMainCityResponse *>(msg));
  case MSG_EXIT_MAIN_CITY: return msgToJson_ExitMainCityResponse(static_cast<ExitMainCityResponse *>(msg));
  case MSG_ENTER_MAIN_CITY_BROADCAST: return msgToJson_EnterMainCityBroadcast(static_cast<EnterMainCityBroadcast *>(msg));
  case MSG_EXIT_MAIN_CITY_BROADCAST: return msgToJson_ExitMainCityBroadcast(static_cast<ExitMainCityBroadcast *>(msg));
  case MSG_ACCEPT_NON_NORMAL_MISSION: return msgToJson_AcceptNonNormalMissionResponse(static_cast<AcceptNonNormalMissionResponse *>(msg));
  case MSG_ACCEPT_NORMAL_MISSION: return msgToJson_AcceptNormalMissionResponse(static_cast<AcceptNormalMissionResponse *>(msg));
  case MSG_ADD_MISSION_STAR: return msgToJson_AddMissionStarResponse(static_cast<AddMissionStarResponse *>(msg));
  case MSG_COMPLETE_MISSION: return msgToJson_CompleteMissionResponse(static_cast<CompleteMissionResponse *>(msg));
  case MSG_FORGOT_MISSION: return msgToJson_ForgotMissionResponse(static_cast<ForgotMissionResponse *>(msg));
  case MSG_INIT_MISSION_DATA: return msgToJson_InitMissionDataResponse(static_cast<InitMissionDataResponse *>(msg));
  case MSG_ONE_KEY_ADD_MISSION_STAR: return msgToJson_OneKeyAddMissionStarResponse(static_cast<OneKeyAddMissionStarResponse *>(msg));
  case MSG_ONE_KEY_COMPLETE_MISSION: return msgToJson_OneKeyCompleteMissionResponse(static_cast<OneKeyCompleteMissionResponse *>(msg));
  case MSG_REFRESH_NON_NORMAL_MISSION: return msgToJson_RefreshNonNormalMissionResponse(static_cast<RefreshNonNormalMissionResponse *>(msg));
  case MSG_SET_ROLE_TEACH_STATE: return msgToJson_SetRoleTeachStateResponse(static_cast<SetRoleTeachStateResponse *>(msg));
  case MSG_UPDATE_MISSION: return msgToJson_UpdateMissionResponse(static_cast<UpdateMissionResponse *>(msg));
  case MSG_INIT_MONEY_TREE_DATA: return msgToJson_InitMoneyTreeDataResponse(static_cast<InitMoneyTreeDataResponse *>(msg));
  case MSG_SHAKE_MONEY_TREE: return msgToJson_ShakeMoneyTreeResponse(static_cast<ShakeMoneyTreeResponse *>(msg));
  case MSG_GET_RECHARGE_INFO: return msgToJson_GetRechargeInfoResponse(static_cast<GetRechargeInfoResponse *>(msg));
  case MSG_PAY: return msgToJson_PayResponse(static_cast<PayResponse *>(msg));
  case MSG_ACCELERATE_BORN_PET: return msgToJson_AccelerateBornPetResponse(static_cast<AccelerateBornPetResponse *>(msg));
  case MSG_BORN_PET: return msgToJson_BornPetResponse(static_cast<BornPetResponse *>(msg));
  case MSG_CANCEL_FOLLOW_PET: return msgToJson_CancelFollowPetResponse(static_cast<CancelFollowPetResponse *>(msg));
  case MSG_FOLLOW_MASTER_PET: return msgToJson_FollowMasterPetResponse(static_cast<FollowMasterPetResponse *>(msg));
  case MSG_GET_BORN_PET: return msgToJson_GetBornPetResponse(static_cast<GetBornPetResponse *>(msg));
  case MSG_GET_PET_INFO: return msgToJson_GetPetInfoResponse(static_cast<GetPetInfoResponse *>(msg));
  case MSG_GET_PET_STATUS: return msgToJson_GetPetStatusResponse(static_cast<GetPetStatusResponse *>(msg));
  case MSG_INIT_PET: return msgToJson_InitPetResponse(static_cast<InitPetResponse *>(msg));
  case MSG_LEVEL_UP_PET: return msgToJson_LevelUpPetResponse(static_cast<LevelUpPetResponse *>(msg));
  case MSG_LEVEL_UP_PET_STAR: return msgToJson_LevelUpPetStarResponse(static_cast<LevelUpPetStarResponse *>(msg));
  case MSG_SELL_PET: return msgToJson_SellPetResponse(static_cast<SellPetResponse *>(msg));
  case MSG_BUY_SIGN: return msgToJson_BuySignResponse(static_cast<BuySignResponse *>(msg));
  case MSG_GET_ACTIVATION_CODE_REWARD: return msgToJson_GetActivationCodeRewardResponse(static_cast<GetActivationCodeRewardResponse *>(msg));
  case MSG_GET_COMPENSATE_REWARD: return msgToJson_GetCompensateRewardResponse(static_cast<GetCompensateRewardResponse *>(msg));
  case MSG_GET_DAILY_GUANJIE_REWARD: return msgToJson_GetDailyGuanjieRewardResponse(static_cast<GetDailyGuanjieRewardResponse *>(msg));
  case MSG_GET_DAILY_RECHARGE_REWARD: return msgToJson_GetDailyRechargeRewardResponse(static_cast<GetDailyRechargeRewardResponse *>(msg));
  case MSG_GET_DAILY_REWARD: return msgToJson_GetDailyRewardResponse(static_cast<GetDailyRewardResponse *>(msg));
  case MSG_GET_DAILY_VIP_REWARD: return msgToJson_GetDailyVipRewardResponse(static_cast<GetDailyVipRewardResponse *>(msg));
  case MSG_GET_MONTH_CARD_GIFT: return msgToJson_GetMonthCardGiftResponse(static_cast<GetMonthCardGiftResponse *>(msg));
  case MSG_GET_NEWBIE_REWARD: return msgToJson_GetNewbieRewardResponse(static_cast<GetNewbieRewardResponse *>(msg));
  case MSG_GET_ONLINE_GIFT_REWARD: return msgToJson_GetOnlineGiftRewardResponse(static_cast<GetOnlineGiftRewardResponse *>(msg));
  case MSG_GET_ONLINE_TIMES_REWARD: return msgToJson_GetOnlineTimesRewardResponse(static_cast<GetOnlineTimesRewardResponse *>(msg));
  case MSG_GET_SIGN_REWARD: return msgToJson_GetSignRewardResponse(static_cast<GetSignRewardResponse *>(msg));
  case MSG_GET_VIP_REWARD: return msgToJson_GetVipRewardResponse(static_cast<GetVipRewardResponse *>(msg));
  case MSG_INIT_DAILY_REWARD_DATA: return msgToJson_InitDailyRewardDataResponse(static_cast<InitDailyRewardDataResponse *>(msg));
  case MSG_INIT_SIGN_DATA: return msgToJson_InitSignDataResponse(static_cast<InitSignDataResponse *>(msg));
  case MSG_SIGN: return msgToJson_SignResponse(static_cast<SignResponse *>(msg));
  case MSG_CREATE_ROLE: return msgToJson_CreateRoleResponse(static_cast<CreateRoleResponse *>(msg));
  case MSG_DELETE_ROLE: return msgToJson_DeleteRoleResponse(static_cast<DeleteRoleResponse *>(msg));
  case MSG_GET_ROLE_DATA: return msgToJson_GetRoleDataResponse(static_cast<GetRoleDataResponse *>(msg));
  case MSG_GET_ROLE_LIST: return msgToJson_GetRoleListResponse(static_cast<GetRoleListResponse *>(msg));
  case MSG_GET_ROLE_ZERO_STAGE: return msgToJson_GetRoleZeroStageResponse(static_cast<GetRoleZeroStageResponse *>(msg));
  case MSG_LEVEL_UP_ROLE: return msgToJson_LevelUpRoleResponse(static_cast<LevelUpRoleResponse *>(msg));
  case MSG_SAVE_ROLE_BEHAVIOR_EVENTS: return msgToJson_SaveRoleBehaviorEventsResponse(static_cast<SaveRoleBehaviorEventsResponse *>(msg));
  case MSG_SAVE_ROLE_ZERO_STAGE: return msgToJson_SaveRoleZeroStageResponse(static_cast<SaveRoleZeroStageResponse *>(msg));
  case MSG_BUY_GOODS: return msgToJson_BuyGoodsResponse(static_cast<BuyGoodsResponse *>(msg));
  case MSG_GET_SHOPLIST: return msgToJson_GetShoplistResponse(static_cast<GetShoplistResponse *>(msg));
  case MSG_REFRESH_FIX_BROADCAST: return msgToJson_RefreshFixBroadcast(static_cast<RefreshFixBroadcast *>(msg));
  case MSG_REFRESH_PROMPTLY: return msgToJson_RefreshPromptlyResponse(static_cast<RefreshPromptlyResponse *>(msg));
  case MSG_GET_SKILLS: return msgToJson_GetSkillsResponse(static_cast<GetSkillsResponse *>(msg));
  case MSG_LEVEL_UP_PASSIVE_SKILL: return msgToJson_LevelUpPassiveSkillResponse(static_cast<LevelUpPassiveSkillResponse *>(msg));
  case MSG_OPEN_PASSIVE_SKILL: return msgToJson_OpenPassiveSkillResponse(static_cast<OpenPassiveSkillResponse *>(msg));
  case MSG_BUY_INTO_COUNT: return msgToJson_BuyIntoCountResponse(static_cast<BuyIntoCountResponse *>(msg));
  case MSG_END_FIGHT: return msgToJson_EndFightResponse(static_cast<EndFightResponse *>(msg));
  case MSG_ENTER_SPECIAL_DUNGEON: return msgToJson_EnterSpecialDungeonResponse(static_cast<EnterSpecialDungeonResponse *>(msg));
  case MSG_GET_INVITE_LIST: return msgToJson_GetInviteListResponse(static_cast<GetInviteListResponse *>(msg));
  case MSG_INIT_SPECIAL_DUNGEON: return msgToJson_InitSpecialDungeonResponse(static_cast<InitSpecialDungeonResponse *>(msg));
  case MSG_KILL_BOSS: return msgToJson_KillBossResponse(static_cast<KillBossResponse *>(msg));
  case MSG_INIT_WORSHIP: return msgToJson_InitWorshipResponse(static_cast<InitWorshipResponse *>(msg));
  case MSG_WORSHIP: return msgToJson_WorshipResponse(static_cast<WorshipResponse *>(msg));
  case MSG_ACCELERATE_SWEEP_DUNGEON: return msgToJson_AccelerateSweepDungeonResponse(static_cast<AccelerateSweepDungeonResponse *>(msg));
  case MSG_CANCEL_SWEEP_DUNGEON: return msgToJson_CancelSweepDungeonResponse(static_cast<CancelSweepDungeonResponse *>(msg));
  case MSG_END_SWEEP_DUNGEON: return msgToJson_EndSweepDungeonResponse(static_cast<EndSweepDungeonResponse *>(msg));
  case MSG_START_SWEEP_DUNGEON: return msgToJson_StartSweepDungeonResponse(static_cast<StartSweepDungeonResponse *>(msg));
  case MSG_START_VIP_SWEEP_DUNGEON: return msgToJson_StartVipSweepDungeonResponse(static_cast<StartVipSweepDungeonResponse *>(msg));
  case MSG_SWEEP_INFO_OF_LOGIN: return msgToJson_SweepInfoOfLoginResponse(static_cast<SweepInfoOfLoginResponse *>(msg));
  case MSG_BUY_POWER: return msgToJson_BuyPowerResponse(static_cast<BuyPowerResponse *>(msg));
  case MSG_CHANGE_PASSWORD: return msgToJson_ChangePasswordResponse(static_cast<ChangePasswordResponse *>(msg));
  case MSG_EXSIT_FIGHT: return msgToJson_ExsitFightResponse(static_cast<ExsitFightResponse *>(msg));
  case MSG_GET_OFFLINE_EXP: return msgToJson_GetOfflineExpResponse(static_cast<GetOfflineExpResponse *>(msg));
  case MSG_END_TONGTIAN_TOWER_FIGHT: return msgToJson_EndTongtianTowerFightResponse(static_cast<EndTongtianTowerFightResponse *>(msg));
  case MSG_ENTER_TONGTIAN_TOWER: return msgToJson_EnterTongtianTowerResponse(static_cast<EnterTongtianTowerResponse *>(msg));
  case MSG_INIT_TONGTIAN_TOWER: return msgToJson_InitTongtianTowerResponse(static_cast<InitTongtianTowerResponse *>(msg));
  case MSG_RESET_TONGTIAN_TOWER_TIMES: return msgToJson_ResetTongtianTowerTimesResponse(static_cast<ResetTongtianTowerTimesResponse *>(msg));
  case MSG_SAVE_TONGTIAN_TOWER_KUNGFU: return msgToJson_SaveTongtianTowerKungfuResponse(static_cast<SaveTongtianTowerKungfuResponse *>(msg));
  case MSG_WORLDBOSS_ATTACK_DAMAGE: return msgToJson_WorldbossAttackDamageResponse(static_cast<WorldbossAttackDamageResponse *>(msg));
  case MSG_WORLDBOSS_BOSS_HP_BROADCAST: return msgToJson_WorldbossBossHpBroadcast(static_cast<WorldbossBossHpBroadcast *>(msg));
  case MSG_WORLDBOSS_BUY_BUFF: return msgToJson_WorldbossBuyBuffResponse(static_cast<WorldbossBuyBuffResponse *>(msg));
  case MSG_WORLDBOSS_COUNT_DOWN: return msgToJson_WorldbossCountDownResponse(static_cast<WorldbossCountDownResponse *>(msg));
  case MSG_WORLDBOSS_ENTER_CITY: return msgToJson_WorldbossEnterCityResponse(static_cast<WorldbossEnterCityResponse *>(msg));
  case MSG_WORLDBOSS_ENTER_DUNGEON: return msgToJson_WorldbossEnterDungeonResponse(static_cast<WorldbossEnterDungeonResponse *>(msg));
  case MSG_WORLDBOSS_GET_ALL_CONFIGS: return msgToJson_WorldbossGetAllConfigsResponse(static_cast<WorldbossGetAllConfigsResponse *>(msg));
  case MSG_WORLDBOSS_QUIT_CITY: return msgToJson_WorldbossQuitCityResponse(static_cast<WorldbossQuitCityResponse *>(msg));
  case MSG_WORLDBOSS_QUIT_DUNGEON: return msgToJson_WorldbossQuitDungeonResponse(static_cast<WorldbossQuitDungeonResponse *>(msg));
  case MSG_WORLDBOSS_RANK: return msgToJson_WorldbossRankResponse(static_cast<WorldbossRankResponse *>(msg));
  case MSG_WORLDBOSS_RANK_BROADCAST: return msgToJson_WorldbossRankBroadcast(static_cast<WorldbossRankBroadcast *>(msg));
  case MSG_WORLDBOSS_RESURRECTION: return msgToJson_WorldbossResurrectionResponse(static_cast<WorldbossResurrectionResponse *>(msg));
  case MSG_WORLDBOSS_REWARD_TIP_BROADCAST: return msgToJson_WorldbossRewardTipBroadcast(static_cast<WorldbossRewardTipBroadcast *>(msg));
  case MSG_WORLDBOSS_TIME_OUT_BROADCAST: return msgToJson_WorldbossTimeOutBroadcast(static_cast<WorldbossTimeOutBroadcast *>(msg));
  case MSG_YIJUNBOSS_END_BROADCAST: return msgToJson_YijunbossEndBroadcast(static_cast<YijunbossEndBroadcast *>(msg));
  case MSG_YIJUNBOSS_INFO: return msgToJson_YijunbossInfoResponse(static_cast<YijunbossInfoResponse *>(msg));
  case MSG_YIJUNBOSS_RANK: return msgToJson_YijunbossRankResponse(static_cast<YijunbossRankResponse *>(msg));
  case MSG_YIJUNBOSS_RANK_BROADCAST: return msgToJson_YijunbossRankBroadcast(static_cast<YijunbossRankBroadcast *>(msg));
  case MSG_YIJUNBOSS_START: return msgToJson_YijunbossStartResponse(static_cast<YijunbossStartResponse *>(msg));
  case MSG_YIJUNBOSS_START_BROADCAST: return msgToJson_YijunbossStartBroadcast(static_cast<YijunbossStartBroadcast *>(msg));
  case MSG_APPROVE_APPLICATION: return msgToJson_ApproveApplicationResponse(static_cast<ApproveApplicationResponse *>(msg));
  case MSG_CONTRIBUTE_YIJUN: return msgToJson_ContributeYijunResponse(static_cast<ContributeYijunResponse *>(msg));
  case MSG_CREATE_YIJUN: return msgToJson_CreateYijunResponse(static_cast<CreateYijunResponse *>(msg));
  case MSG_DEMOTE_GENERAL: return msgToJson_DemoteGeneralResponse(static_cast<DemoteGeneralResponse *>(msg));
  case MSG_DISMISS_YIJUN: return msgToJson_DismissYijunResponse(static_cast<DismissYijunResponse *>(msg));
  case MSG_EXIT_YIJUN: return msgToJson_ExitYijunResponse(static_cast<ExitYijunResponse *>(msg));
  case MSG_GET_APPLICATIONS: return msgToJson_GetApplicationsResponse(static_cast<GetApplicationsResponse *>(msg));
  case MSG_GET_CONTRIBUTIONS: return msgToJson_GetContributionsResponse(static_cast<GetContributionsResponse *>(msg));
  case MSG_GET_PRAY_LIST: return msgToJson_GetPrayListResponse(static_cast<GetPrayListResponse *>(msg));
  case MSG_GET_YIJUN_BY_PAGE: return msgToJson_GetYijunByPageResponse(static_cast<GetYijunByPageResponse *>(msg));
  case MSG_GET_YIJUN_CAPTURE_INFO: return msgToJson_GetYijunCaptureInfoResponse(static_cast<GetYijunCaptureInfoResponse *>(msg));
  case MSG_GET_YIJUN_CAPTURE_ROLE: return msgToJson_GetYijunCaptureRoleResponse(static_cast<GetYijunCaptureRoleResponse *>(msg));
  case MSG_GET_YIJUN_DETAIL: return msgToJson_GetYijunDetailResponse(static_cast<GetYijunDetailResponse *>(msg));
  case MSG_GET_YIJUN_MEMBERS: return msgToJson_GetYijunMembersResponse(static_cast<GetYijunMembersResponse *>(msg));
  case MSG_KICK_MEMBER: return msgToJson_KickMemberResponse(static_cast<KickMemberResponse *>(msg));
  case MSG_LEVEL_UP_YIJUN: return msgToJson_LevelUpYijunResponse(static_cast<LevelUpYijunResponse *>(msg));
  case MSG_LEVEL_UP_YIJUN_BUILDING: return msgToJson_LevelUpYijunBuildingResponse(static_cast<LevelUpYijunBuildingResponse *>(msg));
  case MSG_LEVEL_UP_YIJUN_SKILL: return msgToJson_LevelUpYijunSkillResponse(static_cast<LevelUpYijunSkillResponse *>(msg));
  case MSG_PRAY_YIJUN: return msgToJson_PrayYijunResponse(static_cast<PrayYijunResponse *>(msg));
  case MSG_PROMOTE_GENERAL: return msgToJson_PromoteGeneralResponse(static_cast<PromoteGeneralResponse *>(msg));
  case MSG_PUBLISH_NOTICE: return msgToJson_PublishNoticeResponse(static_cast<PublishNoticeResponse *>(msg));
  case MSG_REJECT_APPLICATION: return msgToJson_RejectApplicationResponse(static_cast<RejectApplicationResponse *>(msg));
  case MSG_SEND_APPLICATION: return msgToJson_SendApplicationResponse(static_cast<SendApplicationResponse *>(msg));
  case MSG_SEND_YIJUN_CAPTURE_ATTACK: return msgToJson_SendYijunCaptureAttackResponse(static_cast<SendYijunCaptureAttackResponse *>(msg));
  case MSG_SEND_YIJUN_CAPTURE_DEFENSE: return msgToJson_SendYijunCaptureDefenseResponse(static_cast<SendYijunCaptureDefenseResponse *>(msg));
  case MSG_SEND_YIJUN_DEFENSE: return msgToJson_SendYijunDefenseResponse(static_cast<SendYijunDefenseResponse *>(msg));
  case MSG_SPY_YIJUN: return msgToJson_SpyYijunResponse(static_cast<SpyYijunResponse *>(msg));
  case MSG_TRANSFER_MARSHAL: return msgToJson_TransferMarshalResponse(static_cast<TransferMarshalResponse *>(msg));
  case MSG_APPROVE_APP_BROADCAST: return msgToJson_ApproveAppBroadcast(static_cast<ApproveAppBroadcast *>(msg));
  case MSG_PROMOTE_GENERAL_BROADCAST: return msgToJson_PromoteGeneralBroadcast(static_cast<PromoteGeneralBroadcast *>(msg));
  case MSG_DISMISS_YIJUN_BROADCAST: return msgToJson_DismissYijunBroadcast(static_cast<DismissYijunBroadcast *>(msg));
  case MSG_TRANSFER_MARSHAL_BROADCAST: return msgToJson_TransferMarshalBroadcast(static_cast<TransferMarshalBroadcast *>(msg));
  case MSG_LEVEL_UP_YIJUN_BROADCAST: return msgToJson_LevelUpYijunBroadcast(static_cast<LevelUpYijunBroadcast *>(msg));
  case MSG_LEVEL_UP_YIJUN_BUILDING_BROADCAST: return msgToJson_LevelUpYijunBuildingBroadcast(static_cast<LevelUpYijunBuildingBroadcast *>(msg));
  case MSG_SEND_APP_BROADCAST: return msgToJson_SendAppBroadcast(static_cast<SendAppBroadcast *>(msg));
  case MSG_DEMOTE_GENERAL_BROADCAST: return msgToJson_DemoteGeneralBroadcast(static_cast<DemoteGeneralBroadcast *>(msg));
  case MSG_KICK_MEMBER_BROADCAST: return msgToJson_KickMemberBroadcast(static_cast<KickMemberBroadcast *>(msg));
  case MSG_EXIT_YIJUN_BROADCAST: return msgToJson_ExitYijunBroadcast(static_cast<ExitYijunBroadcast *>(msg));
  case MSG_SEND_YIJUN_CAPTURE_BROADCAST: return msgToJson_SendYijunCaptureBroadcast(static_cast<SendYijunCaptureBroadcast *>(msg));
  case MSG_SEND_YIJUN_CAPTURE_RESULT_BROADCAST: return msgToJson_SendYijunCaptureResultBroadcast(static_cast<SendYijunCaptureResultBroadcast *>(msg));
  default:
    CCLOG("msgToJson(): unkonw msgId:%d", msgId);
    throw runtime_error("msgToJson() failed!");
} // end switch
} // end method

// Request
AddExpRequest* jsonToMsg_AddExpRequest(CCDictionary *json) {
  SGDictionary dict(json);
  AddExpRequest *msg = new AddExpRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_exp((uint32) dict.getDouble("exp"));
  return msg;
}
CheckPropertiesRequest* jsonToMsg_CheckPropertiesRequest(CCDictionary *json) {
  SGDictionary dict(json);
  CheckPropertiesRequest *msg = new CheckPropertiesRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  MsgRoleProperties *dto_props = new MsgRoleProperties();
  jsonToDto_MsgRoleProperties(dict.getDict("props"), dto_props);
  msg->set_allocated_props(dto_props);
  return msg;
}
RechargeRequest* jsonToMsg_RechargeRequest(CCDictionary *json) {
  SGDictionary dict(json);
  RechargeRequest *msg = new RechargeRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_jade((uint32) dict.getDouble("jade"));
  return msg;
}
TestRequest* jsonToMsg_TestRequest(CCDictionary *json) {
  SGDictionary dict(json);
  TestRequest *msg = new TestRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_content(dict.getCString("content"));
  return msg;
}
GetAchievementRewardRequest* jsonToMsg_GetAchievementRewardRequest(CCDictionary *json) {
  SGDictionary dict(json);
  GetAchievementRewardRequest *msg = new GetAchievementRewardRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_id((uint32) dict.getDouble("id"));
  return msg;
}
InitAchievementRequest* jsonToMsg_InitAchievementRequest(CCDictionary *json) {
  SGDictionary dict(json);
  InitAchievementRequest *msg = new InitAchievementRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  return msg;
}
UpdateAchievementRequest* jsonToMsg_UpdateAchievementRequest(CCDictionary *json) {
  SGDictionary dict(json);
  UpdateAchievementRequest *msg = new UpdateAchievementRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_type((uint32) dict.getDouble("type"));
  msg->set_count((uint32) dict.getDouble("count"));
  return msg;
}
UseTitleRequest* jsonToMsg_UseTitleRequest(CCDictionary *json) {
  SGDictionary dict(json);
  UseTitleRequest *msg = new UseTitleRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_id((uint32) dict.getDouble("id"));
  return msg;
}
GetActivityGiftsRequest* jsonToMsg_GetActivityGiftsRequest(CCDictionary *json) {
  SGDictionary dict(json);
  GetActivityGiftsRequest *msg = new GetActivityGiftsRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_activityid((uint64) dict.getDouble("activityId"));
  return msg;
}
GetActivityRewardRolesRequest* jsonToMsg_GetActivityRewardRolesRequest(CCDictionary *json) {
  SGDictionary dict(json);
  GetActivityRewardRolesRequest *msg = new GetActivityRewardRolesRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_activityid((uint64) dict.getDouble("activityId"));
  return msg;
}
GetAddUpConsumeRequest* jsonToMsg_GetAddUpConsumeRequest(CCDictionary *json) {
  SGDictionary dict(json);
  GetAddUpConsumeRequest *msg = new GetAddUpConsumeRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_activityid((uint64) dict.getDouble("activityId"));
  return msg;
}
GetAddUpRechargeRequest* jsonToMsg_GetAddUpRechargeRequest(CCDictionary *json) {
  SGDictionary dict(json);
  GetAddUpRechargeRequest *msg = new GetAddUpRechargeRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_activityid((uint64) dict.getDouble("activityId"));
  return msg;
}
GetAllActivityConfigRequest* jsonToMsg_GetAllActivityConfigRequest(CCDictionary *json) {
  SGDictionary dict(json);
  GetAllActivityConfigRequest *msg = new GetAllActivityConfigRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  return msg;
}
GetConsumeLeaderbordDataRequest* jsonToMsg_GetConsumeLeaderbordDataRequest(CCDictionary *json) {
  SGDictionary dict(json);
  GetConsumeLeaderbordDataRequest *msg = new GetConsumeLeaderbordDataRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_activityid((uint64) dict.getDouble("activityId"));
  return msg;
}
GetRechargeLeaderbordDataRequest* jsonToMsg_GetRechargeLeaderbordDataRequest(CCDictionary *json) {
  SGDictionary dict(json);
  GetRechargeLeaderbordDataRequest *msg = new GetRechargeLeaderbordDataRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_activityid((uint64) dict.getDouble("activityId"));
  return msg;
}
BuyPkCountRequest* jsonToMsg_BuyPkCountRequest(CCDictionary *json) {
  SGDictionary dict(json);
  BuyPkCountRequest *msg = new BuyPkCountRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  return msg;
}
EndPkRequest* jsonToMsg_EndPkRequest(CCDictionary *json) {
  SGDictionary dict(json);
  EndPkRequest *msg = new EndPkRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_targetid((uint64) dict.getDouble("targetId"));
  msg->set_pkresult((uint32) dict.getDouble("pkResult"));
  return msg;
}
GetArenaInfoRequest* jsonToMsg_GetArenaInfoRequest(CCDictionary *json) {
  SGDictionary dict(json);
  GetArenaInfoRequest *msg = new GetArenaInfoRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  return msg;
}
GetArenaProNoticeRequest* jsonToMsg_GetArenaProNoticeRequest(CCDictionary *json) {
  SGDictionary dict(json);
  GetArenaProNoticeRequest *msg = new GetArenaProNoticeRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  return msg;
}
GetRankRewardRequest* jsonToMsg_GetRankRewardRequest(CCDictionary *json) {
  SGDictionary dict(json);
  GetRankRewardRequest *msg = new GetRankRewardRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_flag(dict.getBool("flag"));
  return msg;
}
StartPkRequest* jsonToMsg_StartPkRequest(CCDictionary *json) {
  SGDictionary dict(json);
  StartPkRequest *msg = new StartPkRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_targetid((uint64) dict.getDouble("targetId"));
  msg->set_targetrank((uint64) dict.getDouble("targetRank"));
  msg->set_selfrank((uint64) dict.getDouble("selfRank"));
  return msg;
}
BuyBagGoodsRequest* jsonToMsg_BuyBagGoodsRequest(CCDictionary *json) {
  SGDictionary dict(json);
  BuyBagGoodsRequest *msg = new BuyBagGoodsRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_attrid((uint32) dict.getDouble("attrID"));
  msg->set_count((uint32) dict.getDouble("count"));
  return msg;
}
ComposeSkillBookRequest* jsonToMsg_ComposeSkillBookRequest(CCDictionary *json) {
  SGDictionary dict(json);
  ComposeSkillBookRequest *msg = new ComposeSkillBookRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_fragmentid((uint64) dict.getDouble("fragmentId"));
  return msg;
}
EnhanceEquipRequest* jsonToMsg_EnhanceEquipRequest(CCDictionary *json) {
  SGDictionary dict(json);
  EnhanceEquipRequest *msg = new EnhanceEquipRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_autoincrid((uint64) dict.getDouble("autoIncrID"));
  CCArray *arr_swallowedEquipID = dict.getArray("swallowedEquipID");
  CCObject *tmp_swallowedEquipID;
  CCARRAY_FOREACH(arr_swallowedEquipID, tmp_swallowedEquipID) {
    double val = dynamic_cast<CCDouble *>(tmp_swallowedEquipID)->getValue();
    msg->add_swallowedequipid(val);
  }
  msg->set_place((sint32) dict.getDouble("place"));
  return msg;
}
EquipGoodsRequest* jsonToMsg_EquipGoodsRequest(CCDictionary *json) {
  SGDictionary dict(json);
  EquipGoodsRequest *msg = new EquipGoodsRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_autoincrid((uint64) dict.getDouble("autoIncrID"));
  return msg;
}
ExpandBagRequest* jsonToMsg_ExpandBagRequest(CCDictionary *json) {
  SGDictionary dict(json);
  ExpandBagRequest *msg = new ExpandBagRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  return msg;
}
GetBagInfoRequest* jsonToMsg_GetBagInfoRequest(CCDictionary *json) {
  SGDictionary dict(json);
  GetBagInfoRequest *msg = new GetBagInfoRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  return msg;
}
OpenGiftInBagRequest* jsonToMsg_OpenGiftInBagRequest(CCDictionary *json) {
  SGDictionary dict(json);
  OpenGiftInBagRequest *msg = new OpenGiftInBagRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_autoincrid((uint64) dict.getDouble("autoIncrID"));
  return msg;
}
SaveBagOrderRequest* jsonToMsg_SaveBagOrderRequest(CCDictionary *json) {
  SGDictionary dict(json);
  SaveBagOrderRequest *msg = new SaveBagOrderRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_bagorder(dict.getCString("bagOrder"));
  return msg;
}
SellGoodsRequest* jsonToMsg_SellGoodsRequest(CCDictionary *json) {
  SGDictionary dict(json);
  SellGoodsRequest *msg = new SellGoodsRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_autoincrid((uint64) dict.getDouble("autoIncrID"));
  return msg;
}
UnequipGoodsRequest* jsonToMsg_UnequipGoodsRequest(CCDictionary *json) {
  SGDictionary dict(json);
  UnequipGoodsRequest *msg = new UnequipGoodsRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_place((uint32) dict.getDouble("place"));
  return msg;
}
UseBagGoodsRequest* jsonToMsg_UseBagGoodsRequest(CCDictionary *json) {
  SGDictionary dict(json);
  UseBagGoodsRequest *msg = new UseBagGoodsRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_autoincrid((uint64) dict.getDouble("autoIncrID"));
  msg->set_count((uint32) dict.getDouble("count"));
  return msg;
}
BuyGuaxiangRequest* jsonToMsg_BuyGuaxiangRequest(CCDictionary *json) {
  SGDictionary dict(json);
  BuyGuaxiangRequest *msg = new BuyGuaxiangRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_attrid((uint32) dict.getDouble("attrID"));
  return msg;
}
DivineRequest* jsonToMsg_DivineRequest(CCDictionary *json) {
  SGDictionary dict(json);
  DivineRequest *msg = new DivineRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_personid((uint32) dict.getDouble("personID"));
  return msg;
}
EnhanceGuaxiangRequest* jsonToMsg_EnhanceGuaxiangRequest(CCDictionary *json) {
  SGDictionary dict(json);
  EnhanceGuaxiangRequest *msg = new EnhanceGuaxiangRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_autoincrid((uint64) dict.getDouble("autoIncrID"));
  msg->set_swallowedguaxiangid((uint64) dict.getDouble("swallowedGuaxiangID"));
  msg->set_place((sint32) dict.getDouble("place"));
  msg->set_swallowedplace((sint32) dict.getDouble("swallowedPlace"));
  msg->set_endplace((sint32) dict.getDouble("endPlace"));
  return msg;
}
EquipGuaxiangRequest* jsonToMsg_EquipGuaxiangRequest(CCDictionary *json) {
  SGDictionary dict(json);
  EquipGuaxiangRequest *msg = new EquipGuaxiangRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_autoincrid((uint64) dict.getDouble("autoIncrID"));
  msg->set_place((uint32) dict.getDouble("place"));
  msg->set_lastplace((uint32) dict.getDouble("lastPlace"));
  msg->set_bagguaxiangorder(dict.getCString("bagGuaxiangOrder"));
  return msg;
}
ExpandBagGuaxiangRequest* jsonToMsg_ExpandBagGuaxiangRequest(CCDictionary *json) {
  SGDictionary dict(json);
  ExpandBagGuaxiangRequest *msg = new ExpandBagGuaxiangRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  return msg;
}
InitGuaxiangDataRequest* jsonToMsg_InitGuaxiangDataRequest(CCDictionary *json) {
  SGDictionary dict(json);
  InitGuaxiangDataRequest *msg = new InitGuaxiangDataRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  return msg;
}
LockOrUnlockGuaxiangRequest* jsonToMsg_LockOrUnlockGuaxiangRequest(CCDictionary *json) {
  SGDictionary dict(json);
  LockOrUnlockGuaxiangRequest *msg = new LockOrUnlockGuaxiangRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_autoincrid((uint64) dict.getDouble("autoIncrID"));
  return msg;
}
OneKeyDivineRequest* jsonToMsg_OneKeyDivineRequest(CCDictionary *json) {
  SGDictionary dict(json);
  OneKeyDivineRequest *msg = new OneKeyDivineRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  return msg;
}
OneKeyEnhanceGuaxiangRequest* jsonToMsg_OneKeyEnhanceGuaxiangRequest(CCDictionary *json) {
  SGDictionary dict(json);
  OneKeyEnhanceGuaxiangRequest *msg = new OneKeyEnhanceGuaxiangRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  return msg;
}
OneKeyGetGuaxiangRequest* jsonToMsg_OneKeyGetGuaxiangRequest(CCDictionary *json) {
  SGDictionary dict(json);
  OneKeyGetGuaxiangRequest *msg = new OneKeyGetGuaxiangRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  CCArray *arr_guaxiangAttrID = dict.getArray("guaxiangAttrID");
  CCObject *tmp_guaxiangAttrID;
  CCARRAY_FOREACH(arr_guaxiangAttrID, tmp_guaxiangAttrID) {
    double val = dynamic_cast<CCDouble *>(tmp_guaxiangAttrID)->getValue();
    msg->add_guaxiangattrid(val);
  }
  msg->set_delindex((sint32) dict.getDouble("delIndex"));
  return msg;
}
OneKeySellGuaxiangRequest* jsonToMsg_OneKeySellGuaxiangRequest(CCDictionary *json) {
  SGDictionary dict(json);
  OneKeySellGuaxiangRequest *msg = new OneKeySellGuaxiangRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  CCArray *arr_sellGuaxiang = dict.getArray("sellGuaxiang");
  CCObject *tmp_sellGuaxiangItem;
  CCARRAY_FOREACH(arr_sellGuaxiang, tmp_sellGuaxiangItem) {
    MsgGuaxiangGoods *tmp_sellGuaxiang = msg->add_sellguaxiang();
    jsonToDto_MsgGuaxiangGoods(dynamic_cast<CCDictionary *>(tmp_sellGuaxiangItem), tmp_sellGuaxiang);
  }
  msg->set_delindex((sint32) dict.getDouble("delIndex"));
  return msg;
}
SaveBagGuaxiangOrderRequest* jsonToMsg_SaveBagGuaxiangOrderRequest(CCDictionary *json) {
  SGDictionary dict(json);
  SaveBagGuaxiangOrderRequest *msg = new SaveBagGuaxiangOrderRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_bagguaxiangorder(dict.getCString("bagGuaxiangOrder"));
  return msg;
}
SellGuaxiangRequest* jsonToMsg_SellGuaxiangRequest(CCDictionary *json) {
  SGDictionary dict(json);
  SellGuaxiangRequest *msg = new SellGuaxiangRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_autoincrid((uint64) dict.getDouble("autoIncrID"));
  msg->set_bagguaxiangorder(dict.getCString("bagGuaxiangOrder"));
  return msg;
}
UnequipGuaxiangRequest* jsonToMsg_UnequipGuaxiangRequest(CCDictionary *json) {
  SGDictionary dict(json);
  UnequipGuaxiangRequest *msg = new UnequipGuaxiangRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_place((uint32) dict.getDouble("place"));
  msg->set_bagguaxiangorder(dict.getCString("bagGuaxiangOrder"));
  return msg;
}
VipDivineRequest* jsonToMsg_VipDivineRequest(CCDictionary *json) {
  SGDictionary dict(json);
  VipDivineRequest *msg = new VipDivineRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_personid((uint32) dict.getDouble("personID"));
  return msg;
}
ConfirmCooldownOverRequest* jsonToMsg_ConfirmCooldownOverRequest(CCDictionary *json) {
  SGDictionary dict(json);
  ConfirmCooldownOverRequest *msg = new ConfirmCooldownOverRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_cooldowntype((CooldownType) dict.getDouble("cooldownType"));
  return msg;
}
GetRoleCooldownDataRequest* jsonToMsg_GetRoleCooldownDataRequest(CCDictionary *json) {
  SGDictionary dict(json);
  GetRoleCooldownDataRequest *msg = new GetRoleCooldownDataRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  return msg;
}
RemoveCooldownRequest* jsonToMsg_RemoveCooldownRequest(CCDictionary *json) {
  SGDictionary dict(json);
  RemoveCooldownRequest *msg = new RemoveCooldownRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_cdtype((CooldownType) dict.getDouble("cdType"));
  msg->set_jade((uint32) dict.getDouble("jade"));
  msg->set_gold((uint32) dict.getDouble("gold"));
  return msg;
}
RemoveCooldownWithoutCostRequest* jsonToMsg_RemoveCooldownWithoutCostRequest(CCDictionary *json) {
  SGDictionary dict(json);
  RemoveCooldownWithoutCostRequest *msg = new RemoveCooldownWithoutCostRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_cdtype((CooldownType) dict.getDouble("cdType"));
  return msg;
}
ConfirmOnlineRequest* jsonToMsg_ConfirmOnlineRequest(CCDictionary *json) {
  SGDictionary dict(json);
  ConfirmOnlineRequest *msg = new ConfirmOnlineRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_name(dict.getCString("name"));
  return msg;
}
SendChatRequest* jsonToMsg_SendChatRequest(CCDictionary *json) {
  SGDictionary dict(json);
  SendChatRequest *msg = new SendChatRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_type((uint32) dict.getDouble("type"));
  msg->set_name(dict.getCString("name"));
  msg->set_chat(dict.getCString("chat"));
  return msg;
}
EnterDungeonStageRequest* jsonToMsg_EnterDungeonStageRequest(CCDictionary *json) {
  SGDictionary dict(json);
  EnterDungeonStageRequest *msg = new EnterDungeonStageRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_stageid((uint32) dict.getDouble("stageId"));
  msg->set_type((uint32) dict.getDouble("type"));
  return msg;
}
FailDungeonStageRequest* jsonToMsg_FailDungeonStageRequest(CCDictionary *json) {
  SGDictionary dict(json);
  FailDungeonStageRequest *msg = new FailDungeonStageRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_stageid((uint32) dict.getDouble("stageId"));
  msg->set_type((uint32) dict.getDouble("type"));
  return msg;
}
GetDungeonStagesRequest* jsonToMsg_GetDungeonStagesRequest(CCDictionary *json) {
  SGDictionary dict(json);
  GetDungeonStagesRequest *msg = new GetDungeonStagesRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  return msg;
}
GetDungeonStarRewardRequest* jsonToMsg_GetDungeonStarRewardRequest(CCDictionary *json) {
  SGDictionary dict(json);
  GetDungeonStarRewardRequest *msg = new GetDungeonStarRewardRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_dungeonid((uint32) dict.getDouble("dungeonID"));
  msg->set_dungeontype((uint32) dict.getDouble("dungeonType"));
  return msg;
}
ResurrectionInDungeonRequest* jsonToMsg_ResurrectionInDungeonRequest(CCDictionary *json) {
  SGDictionary dict(json);
  ResurrectionInDungeonRequest *msg = new ResurrectionInDungeonRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  return msg;
}
SuccessDungeonStageRequest* jsonToMsg_SuccessDungeonStageRequest(CCDictionary *json) {
  SGDictionary dict(json);
  SuccessDungeonStageRequest *msg = new SuccessDungeonStageRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_stageid((uint32) dict.getDouble("stageId"));
  msg->set_type((uint32) dict.getDouble("type"));
  msg->set_cleartime((uint32) dict.getDouble("clearTime"));
  msg->set_maxbatter((uint32) dict.getDouble("maxBatter"));
  msg->set_losehp((float) dict.getDouble("loseHP"));
  msg->set_revivetimes((uint32) dict.getDouble("reviveTimes"));
  msg->set_killenemycount((uint32) dict.getDouble("killEnemyCount"));
  msg->set_pickcopper((uint32) dict.getDouble("pickCopper"));
  msg->set_pickhonour((uint32) dict.getDouble("pickHonour"));
  msg->set_pickgold((uint32) dict.getDouble("pickGold"));
  CCArray *arr_rewardGoodsIds = dict.getArray("rewardGoodsIds");
  CCObject *tmp_rewardGoodsIds;
  CCARRAY_FOREACH(arr_rewardGoodsIds, tmp_rewardGoodsIds) {
    double val = dynamic_cast<CCDouble *>(tmp_rewardGoodsIds)->getValue();
    msg->add_rewardgoodsids(val);
  }
  return msg;
}
AcceptAprroveFriendRequest* jsonToMsg_AcceptAprroveFriendRequest(CCDictionary *json) {
  SGDictionary dict(json);
  AcceptAprroveFriendRequest *msg = new AcceptAprroveFriendRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_roleid((uint64) dict.getDouble("roleID"));
  msg->set_status((uint32) dict.getDouble("status"));
  return msg;
}
AddFriendRequest* jsonToMsg_AddFriendRequest(CCDictionary *json) {
  SGDictionary dict(json);
  AddFriendRequest *msg = new AddFriendRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_friendname(dict.getCString("friendName"));
  return msg;
}
DeleteFriendRequest* jsonToMsg_DeleteFriendRequest(CCDictionary *json) {
  SGDictionary dict(json);
  DeleteFriendRequest *msg = new DeleteFriendRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_friendid((uint64) dict.getDouble("friendID"));
  return msg;
}
GetFriendPropertiesRequest* jsonToMsg_GetFriendPropertiesRequest(CCDictionary *json) {
  SGDictionary dict(json);
  GetFriendPropertiesRequest *msg = new GetFriendPropertiesRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_friendid((uint64) dict.getDouble("friendID"));
  return msg;
}
InitAprroveFriendRequest* jsonToMsg_InitAprroveFriendRequest(CCDictionary *json) {
  SGDictionary dict(json);
  InitAprroveFriendRequest *msg = new InitAprroveFriendRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  return msg;
}
InitFriendDataRequest* jsonToMsg_InitFriendDataRequest(CCDictionary *json) {
  SGDictionary dict(json);
  InitFriendDataRequest *msg = new InitFriendDataRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  return msg;
}
GambleEquipRequest* jsonToMsg_GambleEquipRequest(CCDictionary *json) {
  SGDictionary dict(json);
  GambleEquipRequest *msg = new GambleEquipRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_chesttype((uint32) dict.getDouble("chestType"));
  msg->set_costtype((uint32) dict.getDouble("costType"));
  return msg;
}
GetGambleEquipInfoRequest* jsonToMsg_GetGambleEquipInfoRequest(CCDictionary *json) {
  SGDictionary dict(json);
  GetGambleEquipInfoRequest *msg = new GetGambleEquipInfoRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  return msg;
}
InitDiceDataRequest* jsonToMsg_InitDiceDataRequest(CCDictionary *json) {
  SGDictionary dict(json);
  InitDiceDataRequest *msg = new InitDiceDataRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  return msg;
}
RollDiceRequest* jsonToMsg_RollDiceRequest(CCDictionary *json) {
  SGDictionary dict(json);
  RollDiceRequest *msg = new RollDiceRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  return msg;
}
GetServerTimeRequest* jsonToMsg_GetServerTimeRequest(CCDictionary *json) {
  SGDictionary dict(json);
  GetServerTimeRequest *msg = new GetServerTimeRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  return msg;
}
QuitGameRequest* jsonToMsg_QuitGameRequest(CCDictionary *json) {
  SGDictionary dict(json);
  QuitGameRequest *msg = new QuitGameRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  return msg;
}
ReStartGameRequest* jsonToMsg_ReStartGameRequest(CCDictionary *json) {
  SGDictionary dict(json);
  ReStartGameRequest *msg = new ReStartGameRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_userid((uint64) dict.getDouble("userID"));
  msg->set_roleid((uint64) dict.getDouble("roleID"));
  msg->set_accounttype((uint32) dict.getDouble("accountType"));
  return msg;
}
StartGameRequest* jsonToMsg_StartGameRequest(CCDictionary *json) {
  SGDictionary dict(json);
  StartGameRequest *msg = new StartGameRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_roleid((uint64) dict.getDouble("roleID"));
  msg->set_accounttype((uint32) dict.getDouble("accountType"));
  return msg;
}
BuyGemRequest* jsonToMsg_BuyGemRequest(CCDictionary *json) {
  SGDictionary dict(json);
  BuyGemRequest *msg = new BuyGemRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_attrid((uint32) dict.getDouble("attrID"));
  msg->set_count((uint32) dict.getDouble("count"));
  return msg;
}
ComposeGemRequest* jsonToMsg_ComposeGemRequest(CCDictionary *json) {
  SGDictionary dict(json);
  ComposeGemRequest *msg = new ComposeGemRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_autoincrid((uint64) dict.getDouble("autoIncrID"));
  return msg;
}
GemFillOrRemoveRequest* jsonToMsg_GemFillOrRemoveRequest(CCDictionary *json) {
  SGDictionary dict(json);
  GemFillOrRemoveRequest *msg = new GemFillOrRemoveRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  CCArray *arr_roleGemBagGoods = dict.getArray("roleGemBagGoods");
  CCObject *tmp_roleGemBagGoodsItem;
  CCARRAY_FOREACH(arr_roleGemBagGoods, tmp_roleGemBagGoodsItem) {
    MsgRoleGemBagGoods *tmp_roleGemBagGoods = msg->add_rolegembaggoods();
    jsonToDto_MsgRoleGemBagGoods(dynamic_cast<CCDictionary *>(tmp_roleGemBagGoodsItem), tmp_roleGemBagGoods);
  }
  CCArray *arr_roleGemOnBody = dict.getArray("roleGemOnBody");
  CCObject *tmp_roleGemOnBodyItem;
  CCARRAY_FOREACH(arr_roleGemOnBody, tmp_roleGemOnBodyItem) {
    MsgRoleGemBagGoods *tmp_roleGemOnBody = msg->add_rolegemonbody();
    jsonToDto_MsgRoleGemBagGoods(dynamic_cast<CCDictionary *>(tmp_roleGemOnBodyItem), tmp_roleGemOnBody);
  }
  return msg;
}
GetGemInfoRequest* jsonToMsg_GetGemInfoRequest(CCDictionary *json) {
  SGDictionary dict(json);
  GetGemInfoRequest *msg = new GetGemInfoRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  return msg;
}
OneKeyComposeGemRequest* jsonToMsg_OneKeyComposeGemRequest(CCDictionary *json) {
  SGDictionary dict(json);
  OneKeyComposeGemRequest *msg = new OneKeyComposeGemRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_autoincrid((uint64) dict.getDouble("autoIncrID"));
  return msg;
}
SellGemRequest* jsonToMsg_SellGemRequest(CCDictionary *json) {
  SGDictionary dict(json);
  SellGemRequest *msg = new SellGemRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_autoincrid((uint64) dict.getDouble("autoIncrID"));
  return msg;
}
GetActivationCodeGiftRequest* jsonToMsg_GetActivationCodeGiftRequest(CCDictionary *json) {
  SGDictionary dict(json);
  GetActivationCodeGiftRequest *msg = new GetActivationCodeGiftRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_activationcode(dict.getCString("activationCode"));
  return msg;
}
GetActivationCodeGiftListRequest* jsonToMsg_GetActivationCodeGiftListRequest(CCDictionary *json) {
  SGDictionary dict(json);
  GetActivationCodeGiftListRequest *msg = new GetActivationCodeGiftListRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_startindex((uint32) dict.getDouble("startIndex"));
  msg->set_count((uint32) dict.getDouble("count"));
  return msg;
}
GetCompensateGiftListRequest* jsonToMsg_GetCompensateGiftListRequest(CCDictionary *json) {
  SGDictionary dict(json);
  GetCompensateGiftListRequest *msg = new GetCompensateGiftListRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  return msg;
}
GetContinuousLoginGiftRequest* jsonToMsg_GetContinuousLoginGiftRequest(CCDictionary *json) {
  SGDictionary dict(json);
  GetContinuousLoginGiftRequest *msg = new GetContinuousLoginGiftRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  return msg;
}
GetDailyGuanJieGiftRequest* jsonToMsg_GetDailyGuanJieGiftRequest(CCDictionary *json) {
  SGDictionary dict(json);
  GetDailyGuanJieGiftRequest *msg = new GetDailyGuanJieGiftRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  return msg;
}
GetDailyVipGiftRequest* jsonToMsg_GetDailyVipGiftRequest(CCDictionary *json) {
  SGDictionary dict(json);
  GetDailyVipGiftRequest *msg = new GetDailyVipGiftRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  return msg;
}
GetGiftsInGiftBagRequest* jsonToMsg_GetGiftsInGiftBagRequest(CCDictionary *json) {
  SGDictionary dict(json);
  GetGiftsInGiftBagRequest *msg = new GetGiftsInGiftBagRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_activityid((uint64) dict.getDouble("activityId"));
  return msg;
}
GetLevelUpRewardsInfoRequest* jsonToMsg_GetLevelUpRewardsInfoRequest(CCDictionary *json) {
  SGDictionary dict(json);
  GetLevelUpRewardsInfoRequest *msg = new GetLevelUpRewardsInfoRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_level((int32) dict.getDouble("level"));
  msg->set_laterlevelcounts((int32) dict.getDouble("laterLevelCounts"));
  msg->set_goodstype((uint32) dict.getDouble("goodstype"));
  return msg;
}
GetNewbieRewardGiftRequest* jsonToMsg_GetNewbieRewardGiftRequest(CCDictionary *json) {
  SGDictionary dict(json);
  GetNewbieRewardGiftRequest *msg = new GetNewbieRewardGiftRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  return msg;
}
GetVipRewardsInfoRequest* jsonToMsg_GetVipRewardsInfoRequest(CCDictionary *json) {
  SGDictionary dict(json);
  GetVipRewardsInfoRequest *msg = new GetVipRewardsInfoRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  return msg;
}
InitMonthCardGiftRequest* jsonToMsg_InitMonthCardGiftRequest(CCDictionary *json) {
  SGDictionary dict(json);
  InitMonthCardGiftRequest *msg = new InitMonthCardGiftRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  return msg;
}
OpenGiftRequest* jsonToMsg_OpenGiftRequest(CCDictionary *json) {
  SGDictionary dict(json);
  OpenGiftRequest *msg = new OpenGiftRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_rolegiftid((uint64) dict.getDouble("roleGiftId"));
  return msg;
}
ComposeKungfuRequest* jsonToMsg_ComposeKungfuRequest(CCDictionary *json) {
  SGDictionary dict(json);
  ComposeKungfuRequest *msg = new ComposeKungfuRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_autorid((uint64) dict.getDouble("autorID"));
  return msg;
}
EquipKungfuSkillRequest* jsonToMsg_EquipKungfuSkillRequest(CCDictionary *json) {
  SGDictionary dict(json);
  EquipKungfuSkillRequest *msg = new EquipKungfuSkillRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_kungfuid((uint32) dict.getDouble("KungfuID"));
  msg->set_kungfuskillid((uint32) dict.getDouble("KungfuSkillID"));
  msg->set_kungfuslotid((uint32) dict.getDouble("KungfuSlotID"));
  return msg;
}
GetKungfuSlotRequest* jsonToMsg_GetKungfuSlotRequest(CCDictionary *json) {
  SGDictionary dict(json);
  GetKungfuSlotRequest *msg = new GetKungfuSlotRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_roleid((uint64) dict.getDouble("roleID"));
  msg->set_type((uint32) dict.getDouble("type"));
  return msg;
}
InitKungfuInfoRequest* jsonToMsg_InitKungfuInfoRequest(CCDictionary *json) {
  SGDictionary dict(json);
  InitKungfuInfoRequest *msg = new InitKungfuInfoRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  return msg;
}
LevelUpKungfuSkillRequest* jsonToMsg_LevelUpKungfuSkillRequest(CCDictionary *json) {
  SGDictionary dict(json);
  LevelUpKungfuSkillRequest *msg = new LevelUpKungfuSkillRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_kongfuskillid((uint32) dict.getDouble("kongFuSkillID"));
  return msg;
}
LevelUpKungfuSlotRequest* jsonToMsg_LevelUpKungfuSlotRequest(CCDictionary *json) {
  SGDictionary dict(json);
  LevelUpKungfuSlotRequest *msg = new LevelUpKungfuSlotRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_slot((uint32) dict.getDouble("slot"));
  msg->set_childslot((uint32) dict.getDouble("childSlot"));
  return msg;
}
OneKeyUnequipKungfuSkillsRequest* jsonToMsg_OneKeyUnequipKungfuSkillsRequest(CCDictionary *json) {
  SGDictionary dict(json);
  OneKeyUnequipKungfuSkillsRequest *msg = new OneKeyUnequipKungfuSkillsRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_kungfubuttonid((uint32) dict.getDouble("KungfuButtonID"));
  return msg;
}
RefreshKungfuStarRequest* jsonToMsg_RefreshKungfuStarRequest(CCDictionary *json) {
  SGDictionary dict(json);
  RefreshKungfuStarRequest *msg = new RefreshKungfuStarRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_kungfuid((uint32) dict.getDouble("kungfuID"));
  return msg;
}
ReplaceKungfuSlotRequest* jsonToMsg_ReplaceKungfuSlotRequest(CCDictionary *json) {
  SGDictionary dict(json);
  ReplaceKungfuSlotRequest *msg = new ReplaceKungfuSlotRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_kungfuslot((uint32) dict.getDouble("kungfuSlot"));
  msg->set_slotone((uint32) dict.getDouble("slotOne"));
  msg->set_slottwo((uint32) dict.getDouble("slotTwo"));
  return msg;
}
UnlockKungfuButtonRequest* jsonToMsg_UnlockKungfuButtonRequest(CCDictionary *json) {
  SGDictionary dict(json);
  UnlockKungfuButtonRequest *msg = new UnlockKungfuButtonRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_kungfuid((uint32) dict.getDouble("KungfuID"));
  return msg;
}
UnlockKungfuSlotRequest* jsonToMsg_UnlockKungfuSlotRequest(CCDictionary *json) {
  SGDictionary dict(json);
  UnlockKungfuSlotRequest *msg = new UnlockKungfuSlotRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_kungfuid((uint32) dict.getDouble("KungfuID"));
  return msg;
}
GetDungeonRankRequest* jsonToMsg_GetDungeonRankRequest(CCDictionary *json) {
  SGDictionary dict(json);
  GetDungeonRankRequest *msg = new GetDungeonRankRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_stageid((uint32) dict.getDouble("stageId"));
  msg->set_type((uint32) dict.getDouble("type"));
  return msg;
}
GetDungeonRankFirstRequest* jsonToMsg_GetDungeonRankFirstRequest(CCDictionary *json) {
  SGDictionary dict(json);
  GetDungeonRankFirstRequest *msg = new GetDungeonRankFirstRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_stageid((uint32) dict.getDouble("stageId"));
  return msg;
}
GetLeaderboardRequest* jsonToMsg_GetLeaderboardRequest(CCDictionary *json) {
  SGDictionary dict(json);
  GetLeaderboardRequest *msg = new GetLeaderboardRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  return msg;
}
GetSelfLeaderboardRequest* jsonToMsg_GetSelfLeaderboardRequest(CCDictionary *json) {
  SGDictionary dict(json);
  GetSelfLeaderboardRequest *msg = new GetSelfLeaderboardRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_leaderboadtype((uint32) dict.getDouble("leaderboadType"));
  msg->set_subtype((uint32) dict.getDouble("subType"));
  return msg;
}
LoginRequest* jsonToMsg_LoginRequest(CCDictionary *json) {
  SGDictionary dict(json);
  LoginRequest *msg = new LoginRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_username(dict.getCString("username"));
  msg->set_password(dict.getCString("password"));
  msg->set_token(dict.getCString("token"));
  return msg;
}
LogoutRequest* jsonToMsg_LogoutRequest(CCDictionary *json) {
  SGDictionary dict(json);
  LogoutRequest *msg = new LogoutRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_userid((uint64) dict.getDouble("userID"));
  msg->set_channelid((uint32) dict.getDouble("channelID"));
  return msg;
}
RegisterRequest* jsonToMsg_RegisterRequest(CCDictionary *json) {
  SGDictionary dict(json);
  RegisterRequest *msg = new RegisterRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_username(dict.getCString("username"));
  msg->set_password(dict.getCString("password"));
  msg->set_channelid((uint32) dict.getDouble("channelID"));
  return msg;
}
GetAllMailsRequest* jsonToMsg_GetAllMailsRequest(CCDictionary *json) {
  SGDictionary dict(json);
  GetAllMailsRequest *msg = new GetAllMailsRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_mailtype((uint32) dict.getDouble("mailType"));
  return msg;
}
OpenAllMailsKitRequest* jsonToMsg_OpenAllMailsKitRequest(CCDictionary *json) {
  SGDictionary dict(json);
  OpenAllMailsKitRequest *msg = new OpenAllMailsKitRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  return msg;
}
OpenKitRequest* jsonToMsg_OpenKitRequest(CCDictionary *json) {
  SGDictionary dict(json);
  OpenKitRequest *msg = new OpenKitRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_mailid((uint64) dict.getDouble("mailId"));
  return msg;
}
OpenMailRequest* jsonToMsg_OpenMailRequest(CCDictionary *json) {
  SGDictionary dict(json);
  OpenMailRequest *msg = new OpenMailRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_mailid((uint64) dict.getDouble("mailId"));
  return msg;
}
RemoveAllMailsRequest* jsonToMsg_RemoveAllMailsRequest(CCDictionary *json) {
  SGDictionary dict(json);
  RemoveAllMailsRequest *msg = new RemoveAllMailsRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_mailtype((uint32) dict.getDouble("mailType"));
  return msg;
}
RemoveMailRequest* jsonToMsg_RemoveMailRequest(CCDictionary *json) {
  SGDictionary dict(json);
  RemoveMailRequest *msg = new RemoveMailRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_mailid((uint64) dict.getDouble("mailId"));
  msg->set_mailtype((uint32) dict.getDouble("mailType"));
  return msg;
}
EnterMainCityRequest* jsonToMsg_EnterMainCityRequest(CCDictionary *json) {
  SGDictionary dict(json);
  EnterMainCityRequest *msg = new EnterMainCityRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_cityid((uint32) dict.getDouble("cityID"));
  msg->set_entercitytype((uint32) dict.getDouble("enterCityType"));
  return msg;
}
ExitMainCityRequest* jsonToMsg_ExitMainCityRequest(CCDictionary *json) {
  SGDictionary dict(json);
  ExitMainCityRequest *msg = new ExitMainCityRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_cityid((uint32) dict.getDouble("cityID"));
  return msg;
}
AcceptNonNormalMissionRequest* jsonToMsg_AcceptNonNormalMissionRequest(CCDictionary *json) {
  SGDictionary dict(json);
  AcceptNonNormalMissionRequest *msg = new AcceptNonNormalMissionRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_autoincrid((uint64) dict.getDouble("autoIncrID"));
  msg->set_type((uint32) dict.getDouble("type"));
  return msg;
}
AcceptNormalMissionRequest* jsonToMsg_AcceptNormalMissionRequest(CCDictionary *json) {
  SGDictionary dict(json);
  AcceptNormalMissionRequest *msg = new AcceptNormalMissionRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_attrid((uint32) dict.getDouble("attrID"));
  return msg;
}
AddMissionStarRequest* jsonToMsg_AddMissionStarRequest(CCDictionary *json) {
  SGDictionary dict(json);
  AddMissionStarRequest *msg = new AddMissionStarRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_autoincrid((uint64) dict.getDouble("autoIncrID"));
  msg->set_type((uint32) dict.getDouble("type"));
  return msg;
}
CompleteMissionRequest* jsonToMsg_CompleteMissionRequest(CCDictionary *json) {
  SGDictionary dict(json);
  CompleteMissionRequest *msg = new CompleteMissionRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_autoincrid((uint64) dict.getDouble("autoIncrID"));
  msg->set_type((uint32) dict.getDouble("type"));
  return msg;
}
ForgotMissionRequest* jsonToMsg_ForgotMissionRequest(CCDictionary *json) {
  SGDictionary dict(json);
  ForgotMissionRequest *msg = new ForgotMissionRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_autoincrid((uint64) dict.getDouble("autoIncrID"));
  msg->set_type((uint32) dict.getDouble("type"));
  return msg;
}
InitMissionDataRequest* jsonToMsg_InitMissionDataRequest(CCDictionary *json) {
  SGDictionary dict(json);
  InitMissionDataRequest *msg = new InitMissionDataRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  return msg;
}
OneKeyAddMissionStarRequest* jsonToMsg_OneKeyAddMissionStarRequest(CCDictionary *json) {
  SGDictionary dict(json);
  OneKeyAddMissionStarRequest *msg = new OneKeyAddMissionStarRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_autoincrid((uint64) dict.getDouble("autoIncrID"));
  msg->set_type((uint32) dict.getDouble("type"));
  return msg;
}
OneKeyCompleteMissionRequest* jsonToMsg_OneKeyCompleteMissionRequest(CCDictionary *json) {
  SGDictionary dict(json);
  OneKeyCompleteMissionRequest *msg = new OneKeyCompleteMissionRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_autoincrid((uint64) dict.getDouble("autoIncrID"));
  msg->set_type((uint32) dict.getDouble("type"));
  return msg;
}
RefreshNonNormalMissionRequest* jsonToMsg_RefreshNonNormalMissionRequest(CCDictionary *json) {
  SGDictionary dict(json);
  RefreshNonNormalMissionRequest *msg = new RefreshNonNormalMissionRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_type((uint32) dict.getDouble("type"));
  return msg;
}
SetRoleTeachStateRequest* jsonToMsg_SetRoleTeachStateRequest(CCDictionary *json) {
  SGDictionary dict(json);
  SetRoleTeachStateRequest *msg = new SetRoleTeachStateRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_state((uint32) dict.getDouble("state"));
  return msg;
}
UpdateMissionRequest* jsonToMsg_UpdateMissionRequest(CCDictionary *json) {
  SGDictionary dict(json);
  UpdateMissionRequest *msg = new UpdateMissionRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_autoincrid((uint64) dict.getDouble("autoIncrID"));
  msg->set_progress((uint32) dict.getDouble("progress"));
  msg->set_type((uint32) dict.getDouble("type"));
  return msg;
}
InitMoneyTreeDataRequest* jsonToMsg_InitMoneyTreeDataRequest(CCDictionary *json) {
  SGDictionary dict(json);
  InitMoneyTreeDataRequest *msg = new InitMoneyTreeDataRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  return msg;
}
ShakeMoneyTreeRequest* jsonToMsg_ShakeMoneyTreeRequest(CCDictionary *json) {
  SGDictionary dict(json);
  ShakeMoneyTreeRequest *msg = new ShakeMoneyTreeRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  return msg;
}
GetRechargeInfoRequest* jsonToMsg_GetRechargeInfoRequest(CCDictionary *json) {
  SGDictionary dict(json);
  GetRechargeInfoRequest *msg = new GetRechargeInfoRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  return msg;
}
PayRequest* jsonToMsg_PayRequest(CCDictionary *json) {
  SGDictionary dict(json);
  PayRequest *msg = new PayRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_paydesc(dict.getCString("payDesc"));
  msg->set_rechargeinfoid((uint32) dict.getDouble("rechargeInfoID"));
  return msg;
}
AccelerateBornPetRequest* jsonToMsg_AccelerateBornPetRequest(CCDictionary *json) {
  SGDictionary dict(json);
  AccelerateBornPetRequest *msg = new AccelerateBornPetRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_feedid((uint64) dict.getDouble("feedID"));
  msg->set_num((uint32) dict.getDouble("num"));
  return msg;
}
BornPetRequest* jsonToMsg_BornPetRequest(CCDictionary *json) {
  SGDictionary dict(json);
  BornPetRequest *msg = new BornPetRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_peteggid((uint64) dict.getDouble("petEggID"));
  return msg;
}
CancelFollowPetRequest* jsonToMsg_CancelFollowPetRequest(CCDictionary *json) {
  SGDictionary dict(json);
  CancelFollowPetRequest *msg = new CancelFollowPetRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_petid((uint64) dict.getDouble("petID"));
  return msg;
}
FollowMasterPetRequest* jsonToMsg_FollowMasterPetRequest(CCDictionary *json) {
  SGDictionary dict(json);
  FollowMasterPetRequest *msg = new FollowMasterPetRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_petid((uint64) dict.getDouble("petID"));
  return msg;
}
GetBornPetRequest* jsonToMsg_GetBornPetRequest(CCDictionary *json) {
  SGDictionary dict(json);
  GetBornPetRequest *msg = new GetBornPetRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_peteggid((uint64) dict.getDouble("petEggID"));
  return msg;
}
GetPetInfoRequest* jsonToMsg_GetPetInfoRequest(CCDictionary *json) {
  SGDictionary dict(json);
  GetPetInfoRequest *msg = new GetPetInfoRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  return msg;
}
GetPetStatusRequest* jsonToMsg_GetPetStatusRequest(CCDictionary *json) {
  SGDictionary dict(json);
  GetPetStatusRequest *msg = new GetPetStatusRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  CCArray *arr_petIDList = dict.getArray("petIDList");
  CCObject *tmp_petIDList;
  CCARRAY_FOREACH(arr_petIDList, tmp_petIDList) {
    double val = dynamic_cast<CCDouble *>(tmp_petIDList)->getValue();
    msg->add_petidlist(val);
  }
  return msg;
}
InitPetRequest* jsonToMsg_InitPetRequest(CCDictionary *json) {
  SGDictionary dict(json);
  InitPetRequest *msg = new InitPetRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  return msg;
}
LevelUpPetRequest* jsonToMsg_LevelUpPetRequest(CCDictionary *json) {
  SGDictionary dict(json);
  LevelUpPetRequest *msg = new LevelUpPetRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_petid((uint64) dict.getDouble("petID"));
  msg->set_feedid((uint64) dict.getDouble("feedID"));
  return msg;
}
LevelUpPetStarRequest* jsonToMsg_LevelUpPetStarRequest(CCDictionary *json) {
  SGDictionary dict(json);
  LevelUpPetStarRequest *msg = new LevelUpPetStarRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_petid((uint64) dict.getDouble("petID"));
  msg->set_feedpetid((uint64) dict.getDouble("feedPetID"));
  return msg;
}
SellPetRequest* jsonToMsg_SellPetRequest(CCDictionary *json) {
  SGDictionary dict(json);
  SellPetRequest *msg = new SellPetRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_petid((uint64) dict.getDouble("petID"));
  return msg;
}
BuySignRequest* jsonToMsg_BuySignRequest(CCDictionary *json) {
  SGDictionary dict(json);
  BuySignRequest *msg = new BuySignRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_gold((uint32) dict.getDouble("gold"));
  msg->set_month((uint32) dict.getDouble("month"));
  msg->set_dayid((uint32) dict.getDouble("dayID"));
  return msg;
}
GetActivationCodeRewardRequest* jsonToMsg_GetActivationCodeRewardRequest(CCDictionary *json) {
  SGDictionary dict(json);
  GetActivationCodeRewardRequest *msg = new GetActivationCodeRewardRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_giftid((uint64) dict.getDouble("giftId"));
  return msg;
}
GetCompensateRewardRequest* jsonToMsg_GetCompensateRewardRequest(CCDictionary *json) {
  SGDictionary dict(json);
  GetCompensateRewardRequest *msg = new GetCompensateRewardRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_giftid((uint64) dict.getDouble("giftId"));
  return msg;
}
GetDailyGuanjieRewardRequest* jsonToMsg_GetDailyGuanjieRewardRequest(CCDictionary *json) {
  SGDictionary dict(json);
  GetDailyGuanjieRewardRequest *msg = new GetDailyGuanjieRewardRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  return msg;
}
GetDailyRechargeRewardRequest* jsonToMsg_GetDailyRechargeRewardRequest(CCDictionary *json) {
  SGDictionary dict(json);
  GetDailyRechargeRewardRequest *msg = new GetDailyRechargeRewardRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  return msg;
}
GetDailyRewardRequest* jsonToMsg_GetDailyRewardRequest(CCDictionary *json) {
  SGDictionary dict(json);
  GetDailyRewardRequest *msg = new GetDailyRewardRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_dayid((uint32) dict.getDouble("dayID"));
  return msg;
}
GetDailyVipRewardRequest* jsonToMsg_GetDailyVipRewardRequest(CCDictionary *json) {
  SGDictionary dict(json);
  GetDailyVipRewardRequest *msg = new GetDailyVipRewardRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  return msg;
}
GetMonthCardGiftRequest* jsonToMsg_GetMonthCardGiftRequest(CCDictionary *json) {
  SGDictionary dict(json);
  GetMonthCardGiftRequest *msg = new GetMonthCardGiftRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  return msg;
}
GetNewbieRewardRequest* jsonToMsg_GetNewbieRewardRequest(CCDictionary *json) {
  SGDictionary dict(json);
  GetNewbieRewardRequest *msg = new GetNewbieRewardRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_dayid((uint32) dict.getDouble("dayID"));
  return msg;
}
GetOnlineGiftRewardRequest* jsonToMsg_GetOnlineGiftRewardRequest(CCDictionary *json) {
  SGDictionary dict(json);
  GetOnlineGiftRewardRequest *msg = new GetOnlineGiftRewardRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  return msg;
}
GetOnlineTimesRewardRequest* jsonToMsg_GetOnlineTimesRewardRequest(CCDictionary *json) {
  SGDictionary dict(json);
  GetOnlineTimesRewardRequest *msg = new GetOnlineTimesRewardRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_giftid((uint64) dict.getDouble("giftID"));
  return msg;
}
GetSignRewardRequest* jsonToMsg_GetSignRewardRequest(CCDictionary *json) {
  SGDictionary dict(json);
  GetSignRewardRequest *msg = new GetSignRewardRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_giftid((uint64) dict.getDouble("giftId"));
  return msg;
}
GetVipRewardRequest* jsonToMsg_GetVipRewardRequest(CCDictionary *json) {
  SGDictionary dict(json);
  GetVipRewardRequest *msg = new GetVipRewardRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_viplevel((uint32) dict.getDouble("vipLevel"));
  return msg;
}
InitDailyRewardDataRequest* jsonToMsg_InitDailyRewardDataRequest(CCDictionary *json) {
  SGDictionary dict(json);
  InitDailyRewardDataRequest *msg = new InitDailyRewardDataRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  return msg;
}
InitSignDataRequest* jsonToMsg_InitSignDataRequest(CCDictionary *json) {
  SGDictionary dict(json);
  InitSignDataRequest *msg = new InitSignDataRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_month((uint32) dict.getDouble("month"));
  return msg;
}
SignRequest* jsonToMsg_SignRequest(CCDictionary *json) {
  SGDictionary dict(json);
  SignRequest *msg = new SignRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_dayid((uint32) dict.getDouble("dayID"));
  msg->set_month((uint32) dict.getDouble("month"));
  return msg;
}
CreateRoleRequest* jsonToMsg_CreateRoleRequest(CCDictionary *json) {
  SGDictionary dict(json);
  CreateRoleRequest *msg = new CreateRoleRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_userid((uint64) dict.getDouble("userID"));
  msg->set_rolename(dict.getCString("roleName"));
  msg->set_roleprofession((uint32) dict.getDouble("roleProfession"));
  msg->set_osid((uint32) dict.getDouble("osId"));
  msg->set_serverid((uint32) dict.getDouble("serverID"));
  msg->set_channelid((uint32) dict.getDouble("channelId"));
  return msg;
}
DeleteRoleRequest* jsonToMsg_DeleteRoleRequest(CCDictionary *json) {
  SGDictionary dict(json);
  DeleteRoleRequest *msg = new DeleteRoleRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_userid((uint64) dict.getDouble("userID"));
  msg->set_roleid((uint64) dict.getDouble("roleID"));
  msg->set_serverid((uint32) dict.getDouble("serverID"));
  return msg;
}
GetRoleDataRequest* jsonToMsg_GetRoleDataRequest(CCDictionary *json) {
  SGDictionary dict(json);
  GetRoleDataRequest *msg = new GetRoleDataRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_roleid((uint64) dict.getDouble("roleID"));
  msg->set_type((uint32) dict.getDouble("type"));
  return msg;
}
GetRoleListRequest* jsonToMsg_GetRoleListRequest(CCDictionary *json) {
  SGDictionary dict(json);
  GetRoleListRequest *msg = new GetRoleListRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_userid((uint64) dict.getDouble("userID"));
  return msg;
}
GetRoleZeroStageRequest* jsonToMsg_GetRoleZeroStageRequest(CCDictionary *json) {
  SGDictionary dict(json);
  GetRoleZeroStageRequest *msg = new GetRoleZeroStageRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  return msg;
}
LevelUpRoleRequest* jsonToMsg_LevelUpRoleRequest(CCDictionary *json) {
  SGDictionary dict(json);
  LevelUpRoleRequest *msg = new LevelUpRoleRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_newlevel((uint32) dict.getDouble("newLevel"));
  return msg;
}
SaveRoleBehaviorEventsRequest* jsonToMsg_SaveRoleBehaviorEventsRequest(CCDictionary *json) {
  SGDictionary dict(json);
  SaveRoleBehaviorEventsRequest *msg = new SaveRoleBehaviorEventsRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_eventid(dict.getCString("eventId"));
  msg->set_eventstepkey(dict.getCString("eventStepKey"));
  msg->set_channelid(dict.getCString("channelID"));
  return msg;
}
SaveRoleZeroStageRequest* jsonToMsg_SaveRoleZeroStageRequest(CCDictionary *json) {
  SGDictionary dict(json);
  SaveRoleZeroStageRequest *msg = new SaveRoleZeroStageRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_stage((uint32) dict.getDouble("stage"));
  return msg;
}
BuyGoodsRequest* jsonToMsg_BuyGoodsRequest(CCDictionary *json) {
  SGDictionary dict(json);
  BuyGoodsRequest *msg = new BuyGoodsRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_id((uint64) dict.getDouble("id"));
  msg->set_type((uint32) dict.getDouble("type"));
  msg->set_index((uint32) dict.getDouble("index"));
  msg->set_price((uint32) dict.getDouble("price"));
  msg->set_count((uint32) dict.getDouble("count"));
  return msg;
}
GetShoplistRequest* jsonToMsg_GetShoplistRequest(CCDictionary *json) {
  SGDictionary dict(json);
  GetShoplistRequest *msg = new GetShoplistRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_type((uint32) dict.getDouble("type"));
  return msg;
}
RefreshPromptlyRequest* jsonToMsg_RefreshPromptlyRequest(CCDictionary *json) {
  SGDictionary dict(json);
  RefreshPromptlyRequest *msg = new RefreshPromptlyRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_type((uint32) dict.getDouble("type"));
  return msg;
}
GetSkillsRequest* jsonToMsg_GetSkillsRequest(CCDictionary *json) {
  SGDictionary dict(json);
  GetSkillsRequest *msg = new GetSkillsRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_roleid((uint64) dict.getDouble("roleID"));
  return msg;
}
LevelUpPassiveSkillRequest* jsonToMsg_LevelUpPassiveSkillRequest(CCDictionary *json) {
  SGDictionary dict(json);
  LevelUpPassiveSkillRequest *msg = new LevelUpPassiveSkillRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_skillid((uint32) dict.getDouble("skillID"));
  return msg;
}
OpenPassiveSkillRequest* jsonToMsg_OpenPassiveSkillRequest(CCDictionary *json) {
  SGDictionary dict(json);
  OpenPassiveSkillRequest *msg = new OpenPassiveSkillRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_skillbookid((uint64) dict.getDouble("skillBookID"));
  return msg;
}
BuyIntoCountRequest* jsonToMsg_BuyIntoCountRequest(CCDictionary *json) {
  SGDictionary dict(json);
  BuyIntoCountRequest *msg = new BuyIntoCountRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  return msg;
}
EndFightRequest* jsonToMsg_EndFightRequest(CCDictionary *json) {
  SGDictionary dict(json);
  EndFightRequest *msg = new EndFightRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_combonum((uint32) dict.getDouble("combonum"));
  msg->set_killnum((uint32) dict.getDouble("killnum"));
  return msg;
}
EnterSpecialDungeonRequest* jsonToMsg_EnterSpecialDungeonRequest(CCDictionary *json) {
  SGDictionary dict(json);
  EnterSpecialDungeonRequest *msg = new EnterSpecialDungeonRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_roleid((uint64) dict.getDouble("roleid"));
  msg->set_dungeontype((uint32) dict.getDouble("dungeontype"));
  msg->set_relationtype((uint32) dict.getDouble("relationtype"));
  msg->set_level((uint32) dict.getDouble("level"));
  return msg;
}
GetInviteListRequest* jsonToMsg_GetInviteListRequest(CCDictionary *json) {
  SGDictionary dict(json);
  GetInviteListRequest *msg = new GetInviteListRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  return msg;
}
InitSpecialDungeonRequest* jsonToMsg_InitSpecialDungeonRequest(CCDictionary *json) {
  SGDictionary dict(json);
  InitSpecialDungeonRequest *msg = new InitSpecialDungeonRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  return msg;
}
KillBossRequest* jsonToMsg_KillBossRequest(CCDictionary *json) {
  SGDictionary dict(json);
  KillBossRequest *msg = new KillBossRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_bossid((uint32) dict.getDouble("bossid"));
  return msg;
}
InitWorshipRequest* jsonToMsg_InitWorshipRequest(CCDictionary *json) {
  SGDictionary dict(json);
  InitWorshipRequest *msg = new InitWorshipRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  return msg;
}
WorshipRequest* jsonToMsg_WorshipRequest(CCDictionary *json) {
  SGDictionary dict(json);
  WorshipRequest *msg = new WorshipRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_statuestype((uint32) dict.getDouble("statuesType"));
  return msg;
}
AccelerateSweepDungeonRequest* jsonToMsg_AccelerateSweepDungeonRequest(CCDictionary *json) {
  SGDictionary dict(json);
  AccelerateSweepDungeonRequest *msg = new AccelerateSweepDungeonRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_gold((uint32) dict.getDouble("gold"));
  return msg;
}
CancelSweepDungeonRequest* jsonToMsg_CancelSweepDungeonRequest(CCDictionary *json) {
  SGDictionary dict(json);
  CancelSweepDungeonRequest *msg = new CancelSweepDungeonRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  return msg;
}
EndSweepDungeonRequest* jsonToMsg_EndSweepDungeonRequest(CCDictionary *json) {
  SGDictionary dict(json);
  EndSweepDungeonRequest *msg = new EndSweepDungeonRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  return msg;
}
StartSweepDungeonRequest* jsonToMsg_StartSweepDungeonRequest(CCDictionary *json) {
  SGDictionary dict(json);
  StartSweepDungeonRequest *msg = new StartSweepDungeonRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_dungeonid((uint32) dict.getDouble("dungeonId"));
  msg->set_sweeptype((int32) dict.getDouble("sweepType"));
  msg->set_dungeontype((sint32) dict.getDouble("dungeonType"));
  msg->set_destfloor((uint32) dict.getDouble("destFloor"));
  return msg;
}
StartVipSweepDungeonRequest* jsonToMsg_StartVipSweepDungeonRequest(CCDictionary *json) {
  SGDictionary dict(json);
  StartVipSweepDungeonRequest *msg = new StartVipSweepDungeonRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_dungeonid((uint32) dict.getDouble("dungeonId"));
  msg->set_sweeptype((int32) dict.getDouble("sweepType"));
  msg->set_dungeontype((sint32) dict.getDouble("dungeonType"));
  msg->set_destfloor((uint32) dict.getDouble("destFloor"));
  return msg;
}
SweepInfoOfLoginRequest* jsonToMsg_SweepInfoOfLoginRequest(CCDictionary *json) {
  SGDictionary dict(json);
  SweepInfoOfLoginRequest *msg = new SweepInfoOfLoginRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  return msg;
}
BuyPowerRequest* jsonToMsg_BuyPowerRequest(CCDictionary *json) {
  SGDictionary dict(json);
  BuyPowerRequest *msg = new BuyPowerRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  return msg;
}
ChangePasswordRequest* jsonToMsg_ChangePasswordRequest(CCDictionary *json) {
  SGDictionary dict(json);
  ChangePasswordRequest *msg = new ChangePasswordRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_username(dict.getCString("userName"));
  msg->set_oldpassword(dict.getCString("oldPassword"));
  msg->set_newpassword(dict.getCString("newPassword"));
  return msg;
}
ExsitFightRequest* jsonToMsg_ExsitFightRequest(CCDictionary *json) {
  SGDictionary dict(json);
  ExsitFightRequest *msg = new ExsitFightRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  return msg;
}
GetOfflineExpRequest* jsonToMsg_GetOfflineExpRequest(CCDictionary *json) {
  SGDictionary dict(json);
  GetOfflineExpRequest *msg = new GetOfflineExpRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  return msg;
}
EndTongtianTowerFightRequest* jsonToMsg_EndTongtianTowerFightRequest(CCDictionary *json) {
  SGDictionary dict(json);
  EndTongtianTowerFightRequest *msg = new EndTongtianTowerFightRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  return msg;
}
EnterTongtianTowerRequest* jsonToMsg_EnterTongtianTowerRequest(CCDictionary *json) {
  SGDictionary dict(json);
  EnterTongtianTowerRequest *msg = new EnterTongtianTowerRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_floor((uint32) dict.getDouble("floor"));
  return msg;
}
InitTongtianTowerRequest* jsonToMsg_InitTongtianTowerRequest(CCDictionary *json) {
  SGDictionary dict(json);
  InitTongtianTowerRequest *msg = new InitTongtianTowerRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  return msg;
}
ResetTongtianTowerTimesRequest* jsonToMsg_ResetTongtianTowerTimesRequest(CCDictionary *json) {
  SGDictionary dict(json);
  ResetTongtianTowerTimesRequest *msg = new ResetTongtianTowerTimesRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  return msg;
}
SaveTongtianTowerKungfuRequest* jsonToMsg_SaveTongtianTowerKungfuRequest(CCDictionary *json) {
  SGDictionary dict(json);
  SaveTongtianTowerKungfuRequest *msg = new SaveTongtianTowerKungfuRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_kungfutaolu(dict.getCString("kungfutaolu"));
  msg->set_kungfustar(dict.getCString("kungfustar"));
  return msg;
}
WorldbossAttackDamageRequest* jsonToMsg_WorldbossAttackDamageRequest(CCDictionary *json) {
  SGDictionary dict(json);
  WorldbossAttackDamageRequest *msg = new WorldbossAttackDamageRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_damage((uint32) dict.getDouble("damage"));
  msg->set_bossid((uint64) dict.getDouble("bossId"));
  msg->set_bosstype((WorldbossType) dict.getDouble("bossType"));
  return msg;
}
WorldbossBuyBuffRequest* jsonToMsg_WorldbossBuyBuffRequest(CCDictionary *json) {
  SGDictionary dict(json);
  WorldbossBuyBuffRequest *msg = new WorldbossBuyBuffRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_buffid((uint32) dict.getDouble("buffId"));
  msg->set_bossid((uint64) dict.getDouble("bossId"));
  msg->set_bosstype((WorldbossType) dict.getDouble("bossType"));
  return msg;
}
WorldbossCountDownRequest* jsonToMsg_WorldbossCountDownRequest(CCDictionary *json) {
  SGDictionary dict(json);
  WorldbossCountDownRequest *msg = new WorldbossCountDownRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_bossid((uint64) dict.getDouble("bossId"));
  msg->set_bosstype((WorldbossType) dict.getDouble("bossType"));
  return msg;
}
WorldbossEnterCityRequest* jsonToMsg_WorldbossEnterCityRequest(CCDictionary *json) {
  SGDictionary dict(json);
  WorldbossEnterCityRequest *msg = new WorldbossEnterCityRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_bossid((uint64) dict.getDouble("bossId"));
  msg->set_bosstype((WorldbossType) dict.getDouble("bossType"));
  return msg;
}
WorldbossEnterDungeonRequest* jsonToMsg_WorldbossEnterDungeonRequest(CCDictionary *json) {
  SGDictionary dict(json);
  WorldbossEnterDungeonRequest *msg = new WorldbossEnterDungeonRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_bossid((uint64) dict.getDouble("bossId"));
  msg->set_bosstype((WorldbossType) dict.getDouble("bossType"));
  return msg;
}
WorldbossGetAllConfigsRequest* jsonToMsg_WorldbossGetAllConfigsRequest(CCDictionary *json) {
  SGDictionary dict(json);
  WorldbossGetAllConfigsRequest *msg = new WorldbossGetAllConfigsRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_bosstype((WorldbossType) dict.getDouble("bossType"));
  return msg;
}
WorldbossQuitCityRequest* jsonToMsg_WorldbossQuitCityRequest(CCDictionary *json) {
  SGDictionary dict(json);
  WorldbossQuitCityRequest *msg = new WorldbossQuitCityRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_bossid((uint64) dict.getDouble("bossId"));
  msg->set_bosstype((WorldbossType) dict.getDouble("bossType"));
  return msg;
}
WorldbossQuitDungeonRequest* jsonToMsg_WorldbossQuitDungeonRequest(CCDictionary *json) {
  SGDictionary dict(json);
  WorldbossQuitDungeonRequest *msg = new WorldbossQuitDungeonRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_bossid((uint64) dict.getDouble("bossId"));
  msg->set_bosstype((WorldbossType) dict.getDouble("bossType"));
  return msg;
}
WorldbossRankRequest* jsonToMsg_WorldbossRankRequest(CCDictionary *json) {
  SGDictionary dict(json);
  WorldbossRankRequest *msg = new WorldbossRankRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_bossid((uint64) dict.getDouble("bossId"));
  msg->set_bosstype((WorldbossType) dict.getDouble("bossType"));
  return msg;
}
WorldbossResurrectionRequest* jsonToMsg_WorldbossResurrectionRequest(CCDictionary *json) {
  SGDictionary dict(json);
  WorldbossResurrectionRequest *msg = new WorldbossResurrectionRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_bossid((uint64) dict.getDouble("bossId"));
  msg->set_bosstype((WorldbossType) dict.getDouble("bossType"));
  return msg;
}
YijunbossInfoRequest* jsonToMsg_YijunbossInfoRequest(CCDictionary *json) {
  SGDictionary dict(json);
  YijunbossInfoRequest *msg = new YijunbossInfoRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  return msg;
}
YijunbossRankRequest* jsonToMsg_YijunbossRankRequest(CCDictionary *json) {
  SGDictionary dict(json);
  YijunbossRankRequest *msg = new YijunbossRankRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  return msg;
}
YijunbossStartRequest* jsonToMsg_YijunbossStartRequest(CCDictionary *json) {
  SGDictionary dict(json);
  YijunbossStartRequest *msg = new YijunbossStartRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_bossid((uint64) dict.getDouble("bossId"));
  return msg;
}
ApproveApplicationRequest* jsonToMsg_ApproveApplicationRequest(CCDictionary *json) {
  SGDictionary dict(json);
  ApproveApplicationRequest *msg = new ApproveApplicationRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_roleid((uint64) dict.getDouble("roleID"));
  return msg;
}
ContributeYijunRequest* jsonToMsg_ContributeYijunRequest(CCDictionary *json) {
  SGDictionary dict(json);
  ContributeYijunRequest *msg = new ContributeYijunRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_copper((uint64) dict.getDouble("copper"));
  msg->set_gold((uint32) dict.getDouble("gold"));
  return msg;
}
CreateYijunRequest* jsonToMsg_CreateYijunRequest(CCDictionary *json) {
  SGDictionary dict(json);
  CreateYijunRequest *msg = new CreateYijunRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_yijunname(dict.getCString("yijunName"));
  return msg;
}
DemoteGeneralRequest* jsonToMsg_DemoteGeneralRequest(CCDictionary *json) {
  SGDictionary dict(json);
  DemoteGeneralRequest *msg = new DemoteGeneralRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_roleid((uint64) dict.getDouble("roleID"));
  return msg;
}
DismissYijunRequest* jsonToMsg_DismissYijunRequest(CCDictionary *json) {
  SGDictionary dict(json);
  DismissYijunRequest *msg = new DismissYijunRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  return msg;
}
ExitYijunRequest* jsonToMsg_ExitYijunRequest(CCDictionary *json) {
  SGDictionary dict(json);
  ExitYijunRequest *msg = new ExitYijunRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  return msg;
}
GetApplicationsRequest* jsonToMsg_GetApplicationsRequest(CCDictionary *json) {
  SGDictionary dict(json);
  GetApplicationsRequest *msg = new GetApplicationsRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  return msg;
}
GetContributionsRequest* jsonToMsg_GetContributionsRequest(CCDictionary *json) {
  SGDictionary dict(json);
  GetContributionsRequest *msg = new GetContributionsRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  return msg;
}
GetPrayListRequest* jsonToMsg_GetPrayListRequest(CCDictionary *json) {
  SGDictionary dict(json);
  GetPrayListRequest *msg = new GetPrayListRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  return msg;
}
GetYijunByPageRequest* jsonToMsg_GetYijunByPageRequest(CCDictionary *json) {
  SGDictionary dict(json);
  GetYijunByPageRequest *msg = new GetYijunByPageRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_pageno((uint32) dict.getDouble("pageNo"));
  msg->set_pagesize((uint32) dict.getDouble("pageSize"));
  msg->set_type((uint32) dict.getDouble("type"));
  return msg;
}
GetYijunCaptureInfoRequest* jsonToMsg_GetYijunCaptureInfoRequest(CCDictionary *json) {
  SGDictionary dict(json);
  GetYijunCaptureInfoRequest *msg = new GetYijunCaptureInfoRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  return msg;
}
GetYijunCaptureRoleRequest* jsonToMsg_GetYijunCaptureRoleRequest(CCDictionary *json) {
  SGDictionary dict(json);
  GetYijunCaptureRoleRequest *msg = new GetYijunCaptureRoleRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  return msg;
}
GetYijunDetailRequest* jsonToMsg_GetYijunDetailRequest(CCDictionary *json) {
  SGDictionary dict(json);
  GetYijunDetailRequest *msg = new GetYijunDetailRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  return msg;
}
GetYijunMembersRequest* jsonToMsg_GetYijunMembersRequest(CCDictionary *json) {
  SGDictionary dict(json);
  GetYijunMembersRequest *msg = new GetYijunMembersRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  return msg;
}
KickMemberRequest* jsonToMsg_KickMemberRequest(CCDictionary *json) {
  SGDictionary dict(json);
  KickMemberRequest *msg = new KickMemberRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_roleid((uint64) dict.getDouble("roleID"));
  return msg;
}
LevelUpYijunRequest* jsonToMsg_LevelUpYijunRequest(CCDictionary *json) {
  SGDictionary dict(json);
  LevelUpYijunRequest *msg = new LevelUpYijunRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  return msg;
}
LevelUpYijunBuildingRequest* jsonToMsg_LevelUpYijunBuildingRequest(CCDictionary *json) {
  SGDictionary dict(json);
  LevelUpYijunBuildingRequest *msg = new LevelUpYijunBuildingRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_buildingid((uint32) dict.getDouble("buildingID"));
  return msg;
}
LevelUpYijunSkillRequest* jsonToMsg_LevelUpYijunSkillRequest(CCDictionary *json) {
  SGDictionary dict(json);
  LevelUpYijunSkillRequest *msg = new LevelUpYijunSkillRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_skillid((uint32) dict.getDouble("skillID"));
  return msg;
}
PrayYijunRequest* jsonToMsg_PrayYijunRequest(CCDictionary *json) {
  SGDictionary dict(json);
  PrayYijunRequest *msg = new PrayYijunRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  return msg;
}
PromoteGeneralRequest* jsonToMsg_PromoteGeneralRequest(CCDictionary *json) {
  SGDictionary dict(json);
  PromoteGeneralRequest *msg = new PromoteGeneralRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_roleid((uint64) dict.getDouble("roleID"));
  return msg;
}
PublishNoticeRequest* jsonToMsg_PublishNoticeRequest(CCDictionary *json) {
  SGDictionary dict(json);
  PublishNoticeRequest *msg = new PublishNoticeRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_notice(dict.getCString("notice"));
  return msg;
}
RejectApplicationRequest* jsonToMsg_RejectApplicationRequest(CCDictionary *json) {
  SGDictionary dict(json);
  RejectApplicationRequest *msg = new RejectApplicationRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_roleid((uint64) dict.getDouble("roleID"));
  return msg;
}
SendApplicationRequest* jsonToMsg_SendApplicationRequest(CCDictionary *json) {
  SGDictionary dict(json);
  SendApplicationRequest *msg = new SendApplicationRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_yijunid((uint64) dict.getDouble("yijunID"));
  return msg;
}
SendYijunCaptureAttackRequest* jsonToMsg_SendYijunCaptureAttackRequest(CCDictionary *json) {
  SGDictionary dict(json);
  SendYijunCaptureAttackRequest *msg = new SendYijunCaptureAttackRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_yijunid((uint64) dict.getDouble("yijunID"));
  return msg;
}
SendYijunCaptureDefenseRequest* jsonToMsg_SendYijunCaptureDefenseRequest(CCDictionary *json) {
  SGDictionary dict(json);
  SendYijunCaptureDefenseRequest *msg = new SendYijunCaptureDefenseRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_roleid((uint64) dict.getDouble("roleID"));
  msg->set_result((uint32) dict.getDouble("result"));
  return msg;
}
SendYijunDefenseRequest* jsonToMsg_SendYijunDefenseRequest(CCDictionary *json) {
  SGDictionary dict(json);
  SendYijunDefenseRequest *msg = new SendYijunDefenseRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_roleid((uint64) dict.getDouble("roleID"));
  return msg;
}
SpyYijunRequest* jsonToMsg_SpyYijunRequest(CCDictionary *json) {
  SGDictionary dict(json);
  SpyYijunRequest *msg = new SpyYijunRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_yijunid((uint64) dict.getDouble("yijunID"));
  return msg;
}
TransferMarshalRequest* jsonToMsg_TransferMarshalRequest(CCDictionary *json) {
  SGDictionary dict(json);
  TransferMarshalRequest *msg = new TransferMarshalRequest();
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_roleid((uint64) dict.getDouble("roleID"));
  return msg;
}
// Response
CCDictionary* msgToJson_AddExpResponse(const AddExpResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_CheckPropertiesResponse(const CheckPropertiesResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_RechargeResponse(const RechargeResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->jade(), "jade");
  dict.setDouble(msg->recharge(), "recharge");
  dict.setDouble(msg->viplevel(), "vipLevel");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_TestResponse(const TestResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setString(msg->content(), "content");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_GetAchievementRewardResponse(const GetAchievementRewardResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDict(msgToJson_MsgGiftInfo(&(msg->giftinfodata())), "giftInfoData");
  dict.setDict(msgToJson_MsgAchievementInfoData(&(msg->achievementdata())), "achievementData");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_InitAchievementResponse(const InitAchievementResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  CCArray *arr_achievementInfoData = CCArray::createWithCapacity(msg->achievementinfodata_size());
  for (int idx = 0; idx < msg->achievementinfodata_size(); idx++) {
    const MsgAchievementInfoData& val = msg->achievementinfodata(idx);
    arr_achievementInfoData->addObject(msgToJson_MsgAchievementInfoData(&val));
  }
  dict.setArray(arr_achievementInfoData, "achievementInfoData");
  CCArray *arr_titleData = CCArray::createWithCapacity(msg->titledata_size());
  for (int idx = 0; idx < msg->titledata_size(); idx++) {
    const MsgAchievementTitleInfoData& val = msg->titledata(idx);
    arr_titleData->addObject(msgToJson_MsgAchievementTitleInfoData(&val));
  }
  dict.setArray(arr_titleData, "titleData");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_UpdateAchievementResponse(const UpdateAchievementResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDict(msgToJson_MsgAchievementInfoData(&(msg->achievementdata())), "achievementData");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_UseTitleResponse(const UseTitleResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->id(), "id");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_GetActivityGiftsResponse(const GetActivityGiftsResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  CCArray *arr_giftConfig = CCArray::createWithCapacity(msg->giftconfig_size());
  for (int idx = 0; idx < msg->giftconfig_size(); idx++) {
    const string& val = msg->giftconfig(idx);
    arr_giftConfig->addObject(CCString::create(val));
  }
  dict.setArray(arr_giftConfig, "giftConfig");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_GetActivityRewardRolesResponse(const GetActivityRewardRolesResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  CCArray *arr_roles = CCArray::createWithCapacity(msg->roles_size());
  for (int idx = 0; idx < msg->roles_size(); idx++) {
    const MsgActivityRewardRole& val = msg->roles(idx);
    arr_roles->addObject(msgToJson_MsgActivityRewardRole(&val));
  }
  dict.setArray(arr_roles, "roles");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_GetAddUpConsumeResponse(const GetAddUpConsumeResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->consume(), "consume");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_GetAddUpRechargeResponse(const GetAddUpRechargeResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->recharge(), "recharge");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_GetAllActivityConfigResponse(const GetAllActivityConfigResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  CCArray *arr_activityConfig = CCArray::createWithCapacity(msg->activityconfig_size());
  for (int idx = 0; idx < msg->activityconfig_size(); idx++) {
    const string& val = msg->activityconfig(idx);
    arr_activityConfig->addObject(CCString::create(val));
  }
  dict.setArray(arr_activityConfig, "activityConfig");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_GetConsumeLeaderbordDataResponse(const GetConsumeLeaderbordDataResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->consumeleaderboard(), "consumeLeaderboard");
  CCArray *arr_data = CCArray::createWithCapacity(msg->data_size());
  for (int idx = 0; idx < msg->data_size(); idx++) {
    const MsgLeaderItembordData& val = msg->data(idx);
    arr_data->addObject(msgToJson_MsgLeaderItembordData(&val));
  }
  dict.setArray(arr_data, "data");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_GetRechargeLeaderbordDataResponse(const GetRechargeLeaderbordDataResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->rechargeleaderboard(), "rechargeLeaderboard");
  CCArray *arr_data = CCArray::createWithCapacity(msg->data_size());
  for (int idx = 0; idx < msg->data_size(); idx++) {
    const MsgLeaderItembordData& val = msg->data(idx);
    arr_data->addObject(msgToJson_MsgLeaderItembordData(&val));
  }
  dict.setArray(arr_data, "data");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_BuyPkCountResponse(const BuyPkCountResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->jade(), "jade");
  dict.setDouble(msg->gold(), "gold");
  dict.setDouble(msg->nextcost(), "nextCost");
  dict.setDouble(msg->remainpkcount(), "remainPkCount");
  dict.setDouble(msg->buypkcounttoday(), "buyPkCountToday");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_EndPkResponse(const EndPkResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->copperreward(), "copperReward");
  dict.setDouble(msg->honourreward(), "honourReward");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_GetArenaInfoResponse(const GetArenaInfoResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->arenarank(), "arenaRank");
  dict.setDouble(msg->freebattlecount(), "freeBattleCount");
  dict.setDouble(msg->battlecountcost(), "battleCountCost");
  dict.setString(msg->battlelog(), "battleLog");
  dict.setDouble(msg->victorycount(), "victoryCount");
  dict.setDouble(msg->defeatcount(), "defeatCount");
  dict.setDouble(msg->capturetimes(), "captureTimes");
  dict.setDouble(msg->buypkcounttoday(), "buyPkCountToday");
  CCArray *arr_tops = CCArray::createWithCapacity(msg->tops_size());
  for (int idx = 0; idx < msg->tops_size(); idx++) {
    const MsgRoleData& val = msg->tops(idx);
    arr_tops->addObject(msgToJson_MsgRoleData(&val));
  }
  dict.setArray(arr_tops, "tops");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_GetArenaProNoticeResponse(const GetArenaProNoticeResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->result(), "result");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_GetRankRewardResponse(const GetRankRewardResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->rank(), "rank");
  dict.setDouble(msg->currenthonourreward(), "currentHonourReward");
  dict.setDouble(msg->nextminutehonourreward(), "nextMinuteHonourReward");
  dict.setDouble(msg->losthonourreward(), "lostHonourReward");
  dict.setDouble(msg->totalhonourreward(), "totalHonourReward");
  dict.setDouble(msg->currentcopperreward(), "currentCopperReward");
  dict.setDouble(msg->lostcopperreward(), "lostCopperReward");
  dict.setDouble(msg->totalcopperreward(), "totalCopperReward");
  dict.setDouble(msg->nextminutecopperreward(), "nextMinuteCopperReward");
  dict.setBool(msg->rewardflag(), "rewardFlag");
  dict.setDouble(msg->capturetimes(), "captureTimes");
  dict.setDouble(msg->consecutivevictories(), "consecutiveVictories");
  dict.setDouble(msg->honourreward(), "honourReward");
  dict.setDouble(msg->copperreward(), "copperReward");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_StartPkResponse(const StartPkResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_BuyBagGoodsResponse(const BuyBagGoodsResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDict(msgToJson_MsgRoleBagGoods(&(msg->rolebaggoods())), "roleBagGoods");
  dict.setDouble(msg->copper(), "copper");
  dict.setDouble(msg->gold(), "gold");
  dict.setDouble(msg->jade(), "jade");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_ComposeSkillBookResponse(const ComposeSkillBookResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDict(msgToJson_MsgRoleBagGoods(&(msg->skillbook())), "skillBook");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_EnhanceEquipResponse(const EnhanceEquipResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->ratio(), "ratio");
  CCArray *arr_roleBagGoods = CCArray::createWithCapacity(msg->rolebaggoods_size());
  for (int idx = 0; idx < msg->rolebaggoods_size(); idx++) {
    const MsgRoleBagGoods& val = msg->rolebaggoods(idx);
    arr_roleBagGoods->addObject(msgToJson_MsgRoleBagGoods(&val));
  }
  dict.setArray(arr_roleBagGoods, "roleBagGoods");
  dict.setDict(msgToJson_MsgRoleCooldown(&(msg->rolecooldown())), "roleCooldown");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_EquipGoodsResponse(const EquipGoodsResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_ExpandBagResponse(const ExpandBagResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->gold(), "gold");
  dict.setDouble(msg->jade(), "jade");
  dict.setDouble(msg->bagcount(), "bagCount");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_GetBagInfoResponse(const GetBagInfoResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  CCArray *arr_roleBagGoods = CCArray::createWithCapacity(msg->rolebaggoods_size());
  for (int idx = 0; idx < msg->rolebaggoods_size(); idx++) {
    const MsgRoleBagGoods& val = msg->rolebaggoods(idx);
    arr_roleBagGoods->addObject(msgToJson_MsgRoleBagGoods(&val));
  }
  dict.setArray(arr_roleBagGoods, "roleBagGoods");
  dict.setDouble(msg->bagcount(), "bagCount");
  dict.setString(msg->bagorder(), "bagOrder");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_OpenGiftInBagResponse(const OpenGiftInBagResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDict(msgToJson_MsgGiftInfo(&(msg->giftinfo())), "giftInfo");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_SaveBagOrderResponse(const SaveBagOrderResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_SellGoodsResponse(const SellGoodsResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->copper(), "copper");
  dict.setDouble(msg->gold(), "gold");
  dict.setDouble(msg->jade(), "jade");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_UnequipGoodsResponse(const UnequipGoodsResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_UseBagGoodsResponse(const UseBagGoodsResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDict(msgToJson_MsgRoleBagGoods(&(msg->rolebaggoods())), "roleBagGoods");
  dict.setDict(msgToJson_MsgRoleCooldown(&(msg->rolecooldown())), "roleCoolDown");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_BuyGuaxiangResponse(const BuyGuaxiangResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->credit(), "credit");
  dict.setDict(msgToJson_MsgGuaxiangGoods(&(msg->guaxianggoods())), "guaxiangGoods");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_DivineResponse(const DivineResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->guaxiangattrid(), "guaxiangAttrID");
  dict.setDouble(msg->personid(), "personID");
  dict.setDouble(msg->credit(), "credit");
  dict.setDouble(msg->copper(), "copper");
  dict.setDouble(msg->gold(), "gold");
  dict.setDouble(msg->jade(), "jade");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_EnhanceGuaxiangResponse(const EnhanceGuaxiangResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDict(msgToJson_MsgGuaxiangGoods(&(msg->guaxianggoods())), "guaxiangGoods");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_EquipGuaxiangResponse(const EquipGuaxiangResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_ExpandBagGuaxiangResponse(const ExpandBagGuaxiangResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->copper(), "copper");
  dict.setDouble(msg->gold(), "gold");
  dict.setDouble(msg->jade(), "jade");
  dict.setDouble(msg->bagguaxiangcount(), "bagGuaxiangCount");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_InitGuaxiangDataResponse(const InitGuaxiangDataResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  CCArray *arr_guaxiangBag = CCArray::createWithCapacity(msg->guaxiangbag_size());
  for (int idx = 0; idx < msg->guaxiangbag_size(); idx++) {
    const MsgGuaxiangGoods& val = msg->guaxiangbag(idx);
    arr_guaxiangBag->addObject(msgToJson_MsgGuaxiangGoods(&val));
  }
  dict.setArray(arr_guaxiangBag, "guaxiangBag");
  CCArray *arr_guaxiangAttrID = CCArray::createWithCapacity(msg->guaxiangattrid_size());
  for (int idx = 0; idx < msg->guaxiangattrid_size(); idx++) {
    double val = msg->guaxiangattrid(idx);
    arr_guaxiangAttrID->addObject(CCDouble::create(val));
  }
  dict.setArray(arr_guaxiangAttrID, "guaxiangAttrID");
  CCArray *arr_guaxiangOnRole = CCArray::createWithCapacity(msg->guaxiangonrole_size());
  for (int idx = 0; idx < msg->guaxiangonrole_size(); idx++) {
    const MsgGuaxiangGoods& val = msg->guaxiangonrole(idx);
    arr_guaxiangOnRole->addObject(msgToJson_MsgGuaxiangGoods(&val));
  }
  dict.setArray(arr_guaxiangOnRole, "guaxiangOnRole");
  dict.setDouble(msg->bagguaxiangcount(), "bagGuaxiangCount");
  dict.setString(msg->bagguaxiangorder(), "bagGuaxiangOrder");
  CCArray *arr_divinerAttrID = CCArray::createWithCapacity(msg->divinerattrid_size());
  for (int idx = 0; idx < msg->divinerattrid_size(); idx++) {
    double val = msg->divinerattrid(idx);
    arr_divinerAttrID->addObject(CCDouble::create(val));
  }
  dict.setArray(arr_divinerAttrID, "divinerAttrID");
  dict.setDouble(msg->vipsummonnum(), "vipSummonNum");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_LockOrUnlockGuaxiangResponse(const LockOrUnlockGuaxiangResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_OneKeyDivineResponse(const OneKeyDivineResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  CCArray *arr_guaxiangAttrID = CCArray::createWithCapacity(msg->guaxiangattrid_size());
  for (int idx = 0; idx < msg->guaxiangattrid_size(); idx++) {
    double val = msg->guaxiangattrid(idx);
    arr_guaxiangAttrID->addObject(CCDouble::create(val));
  }
  dict.setArray(arr_guaxiangAttrID, "guaxiangAttrID");
  dict.setDouble(msg->credit(), "credit");
  CCArray *arr_divinerAttrID = CCArray::createWithCapacity(msg->divinerattrid_size());
  for (int idx = 0; idx < msg->divinerattrid_size(); idx++) {
    double val = msg->divinerattrid(idx);
    arr_divinerAttrID->addObject(CCDouble::create(val));
  }
  dict.setArray(arr_divinerAttrID, "divinerAttrID");
  dict.setDouble(msg->copper(), "copper");
  dict.setDouble(msg->gold(), "gold");
  dict.setDouble(msg->jade(), "jade");
  dict.setDouble(msg->currentcount(), "currentCount");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_OneKeyEnhanceGuaxiangResponse(const OneKeyEnhanceGuaxiangResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  CCArray *arr_guaxiangBag = CCArray::createWithCapacity(msg->guaxiangbag_size());
  for (int idx = 0; idx < msg->guaxiangbag_size(); idx++) {
    const MsgGuaxiangGoods& val = msg->guaxiangbag(idx);
    arr_guaxiangBag->addObject(msgToJson_MsgGuaxiangGoods(&val));
  }
  dict.setArray(arr_guaxiangBag, "guaxiangBag");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_OneKeyGetGuaxiangResponse(const OneKeyGetGuaxiangResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  CCArray *arr_guaxiangBag = CCArray::createWithCapacity(msg->guaxiangbag_size());
  for (int idx = 0; idx < msg->guaxiangbag_size(); idx++) {
    const MsgGuaxiangGoods& val = msg->guaxiangbag(idx);
    arr_guaxiangBag->addObject(msgToJson_MsgGuaxiangGoods(&val));
  }
  dict.setArray(arr_guaxiangBag, "guaxiangBag");
  CCArray *arr_guaxiangAttrID = CCArray::createWithCapacity(msg->guaxiangattrid_size());
  for (int idx = 0; idx < msg->guaxiangattrid_size(); idx++) {
    double val = msg->guaxiangattrid(idx);
    arr_guaxiangAttrID->addObject(CCDouble::create(val));
  }
  dict.setArray(arr_guaxiangAttrID, "guaxiangAttrID");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_OneKeySellGuaxiangResponse(const OneKeySellGuaxiangResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->copper(), "copper");
  dict.setDouble(msg->gold(), "gold");
  dict.setDouble(msg->jade(), "jade");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_SaveBagGuaxiangOrderResponse(const SaveBagGuaxiangOrderResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_SellGuaxiangResponse(const SellGuaxiangResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->copper(), "copper");
  dict.setDouble(msg->gold(), "gold");
  dict.setDouble(msg->jade(), "jade");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_UnequipGuaxiangResponse(const UnequipGuaxiangResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_VipDivineResponse(const VipDivineResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->guaxiangattrid(), "guaxiangAttrID");
  dict.setDouble(msg->personid(), "personID");
  dict.setDouble(msg->credit(), "credit");
  dict.setDouble(msg->copper(), "copper");
  dict.setDouble(msg->gold(), "gold");
  dict.setDouble(msg->jade(), "jade");
  dict.setDouble(msg->vipsummonnum(), "vipSummonNum");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_ConfirmCooldownOverResponse(const ConfirmCooldownOverResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDict(msgToJson_MsgRoleCooldown(&(msg->rolecooldown())), "roleCooldown");
  dict.setDouble(msg->servertime(), "serverTime");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_GetRoleCooldownDataResponse(const GetRoleCooldownDataResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  CCArray *arr_roleCooldown = CCArray::createWithCapacity(msg->rolecooldown_size());
  for (int idx = 0; idx < msg->rolecooldown_size(); idx++) {
    const MsgRoleCooldown& val = msg->rolecooldown(idx);
    arr_roleCooldown->addObject(msgToJson_MsgRoleCooldown(&val));
  }
  dict.setArray(arr_roleCooldown, "roleCooldown");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_RemoveCooldownResponse(const RemoveCooldownResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->cdtype(), "cdType");
  dict.setDouble(msg->gold(), "gold");
  dict.setDouble(msg->jade(), "jade");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_RemoveCooldownWithoutCostResponse(const RemoveCooldownWithoutCostResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->cdtype(), "cdType");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_ReceiveChatBroadcast(const ReceiveChatBroadcast *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setString(msg->name(), "name");
  dict.setDouble(msg->type(), "type");
  dict.setString(msg->chat(), "chat");
  dict.setDouble(msg->viplevel(), "vipLevel");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_ConfirmOnlineResponse(const ConfirmOnlineResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_MarqueeBroadcast(const MarqueeBroadcast *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->type(), "type");
  CCArray *arr_keyword = CCArray::createWithCapacity(msg->keyword_size());
  for (int idx = 0; idx < msg->keyword_size(); idx++) {
    const string& val = msg->keyword(idx);
    arr_keyword->addObject(CCString::create(val));
  }
  dict.setArray(arr_keyword, "keyword");
  dict.setDouble(msg->priority(), "priority");
  dict.setDouble(msg->count(), "count");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_SendChatResponse(const SendChatResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->type(), "type");
  dict.setDouble(msg->forbidchatendtime(), "forbidChatEndTime");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_EnterDungeonStageResponse(const EnterDungeonStageResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->power(), "power");
  CCArray *arr_goodsAttrId = CCArray::createWithCapacity(msg->goodsattrid_size());
  for (int idx = 0; idx < msg->goodsattrid_size(); idx++) {
    double val = msg->goodsattrid(idx);
    arr_goodsAttrId->addObject(CCDouble::create(val));
  }
  dict.setArray(arr_goodsAttrId, "goodsAttrId");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_FailDungeonStageResponse(const FailDungeonStageResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_GetDungeonStagesResponse(const GetDungeonStagesResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  CCArray *arr_normalStage = CCArray::createWithCapacity(msg->normalstage_size());
  for (int idx = 0; idx < msg->normalstage_size(); idx++) {
    const MsgRoleDungeonStage& val = msg->normalstage(idx);
    arr_normalStage->addObject(msgToJson_MsgRoleDungeonStage(&val));
  }
  dict.setArray(arr_normalStage, "normalStage");
  CCArray *arr_eliteStage = CCArray::createWithCapacity(msg->elitestage_size());
  for (int idx = 0; idx < msg->elitestage_size(); idx++) {
    const MsgRoleDungeonStage& val = msg->elitestage(idx);
    arr_eliteStage->addObject(msgToJson_MsgRoleDungeonStage(&val));
  }
  dict.setArray(arr_eliteStage, "eliteStage");
  CCArray *arr_normalRewards = CCArray::createWithCapacity(msg->normalrewards_size());
  for (int idx = 0; idx < msg->normalrewards_size(); idx++) {
    double val = msg->normalrewards(idx);
    arr_normalRewards->addObject(CCDouble::create(val));
  }
  dict.setArray(arr_normalRewards, "normalRewards");
  CCArray *arr_eliteRewards = CCArray::createWithCapacity(msg->eliterewards_size());
  for (int idx = 0; idx < msg->eliterewards_size(); idx++) {
    double val = msg->eliterewards(idx);
    arr_eliteRewards->addObject(CCDouble::create(val));
  }
  dict.setArray(arr_eliteRewards, "eliteRewards");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_GetDungeonStarRewardResponse(const GetDungeonStarRewardResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->copper(), "copper");
  dict.setDouble(msg->gold(), "gold");
  dict.setDouble(msg->honour(), "honour");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_ResurrectionInDungeonResponse(const ResurrectionInDungeonResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->gold(), "gold");
  dict.setDouble(msg->jade(), "jade");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_SuccessDungeonStageResponse(const SuccessDungeonStageResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->roleremainpower(), "roleRemainPower");
  dict.setDict(msgToJson_MsgDungeonReward(&(msg->dungeonreward())), "dungeonReward");
  dict.setDict(msgToJson_MsgGambleCardReward(&(msg->gamblereward())), "gambleReward");
  CCArray *arr_gambleCards = CCArray::createWithCapacity(msg->gamblecards_size());
  for (int idx = 0; idx < msg->gamblecards_size(); idx++) {
    const MsgGambleCardItem& val = msg->gamblecards(idx);
    arr_gambleCards->addObject(msgToJson_MsgGambleCardItem(&val));
  }
  dict.setArray(arr_gambleCards, "gambleCards");
  CCArray *arr_randomDropRewards = CCArray::createWithCapacity(msg->randomdroprewards_size());
  for (int idx = 0; idx < msg->randomdroprewards_size(); idx++) {
    const MsgRoleBagGoods& val = msg->randomdroprewards(idx);
    arr_randomDropRewards->addObject(msgToJson_MsgRoleBagGoods(&val));
  }
  dict.setArray(arr_randomDropRewards, "randomDropRewards");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_AcceptAprroveFriendResponse(const AcceptAprroveFriendResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_AddFriendResponse(const AddFriendResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_DeleteFriendResponse(const DeleteFriendResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_GetFriendPropertiesResponse(const GetFriendPropertiesResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDict(msgToJson_MsgRoleProperties(&(msg->roleproperties())), "roleProperties");
  CCArray *arr_bagGoods = CCArray::createWithCapacity(msg->baggoods_size());
  for (int idx = 0; idx < msg->baggoods_size(); idx++) {
    const MsgRoleBagGoods& val = msg->baggoods(idx);
    arr_bagGoods->addObject(msgToJson_MsgRoleBagGoods(&val));
  }
  dict.setArray(arr_bagGoods, "bagGoods");
  CCArray *arr_gemBagGoods = CCArray::createWithCapacity(msg->gembaggoods_size());
  for (int idx = 0; idx < msg->gembaggoods_size(); idx++) {
    const MsgRoleGemBagGoods& val = msg->gembaggoods(idx);
    arr_gemBagGoods->addObject(msgToJson_MsgRoleGemBagGoods(&val));
  }
  dict.setArray(arr_gemBagGoods, "gemBagGoods");
  CCArray *arr_guaxiangGoods = CCArray::createWithCapacity(msg->guaxianggoods_size());
  for (int idx = 0; idx < msg->guaxianggoods_size(); idx++) {
    const MsgGuaxiangGoods& val = msg->guaxianggoods(idx);
    arr_guaxiangGoods->addObject(msgToJson_MsgGuaxiangGoods(&val));
  }
  dict.setArray(arr_guaxiangGoods, "guaxiangGoods");
  dict.setDouble(msg->rolelevel(), "roleLevel");
  dict.setDict(msgToJson_MsgKungfuProperties(&(msg->rolekungfuproperties())), "roleKungfuProperties");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_InitAprroveFriendResponse(const InitAprroveFriendResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  CCArray *arr_approveRole = CCArray::createWithCapacity(msg->approverole_size());
  for (int idx = 0; idx < msg->approverole_size(); idx++) {
    const MsgRoleFriendAprrove& val = msg->approverole(idx);
    arr_approveRole->addObject(msgToJson_MsgRoleFriendAprrove(&val));
  }
  dict.setArray(arr_approveRole, "approveRole");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_InitFriendDataResponse(const InitFriendDataResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  CCArray *arr_roleFriend = CCArray::createWithCapacity(msg->rolefriend_size());
  for (int idx = 0; idx < msg->rolefriend_size(); idx++) {
    const MsgRoleFriendData& val = msg->rolefriend(idx);
    arr_roleFriend->addObject(msgToJson_MsgRoleFriendData(&val));
  }
  dict.setArray(arr_roleFriend, "roleFriend");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_GambleEquipResponse(const GambleEquipResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  CCArray *arr_roleBagGoods = CCArray::createWithCapacity(msg->rolebaggoods_size());
  for (int idx = 0; idx < msg->rolebaggoods_size(); idx++) {
    const MsgRoleBagGoods& val = msg->rolebaggoods(idx);
    arr_roleBagGoods->addObject(msgToJson_MsgRoleBagGoods(&val));
  }
  dict.setArray(arr_roleBagGoods, "roleBagGoods");
  dict.setDict(msgToJson_MsgRoleCooldown(&(msg->rolecooldown())), "roleCooldown");
  dict.setDouble(msg->remaintimes(), "remainTimes");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_GetGambleEquipInfoResponse(const GetGambleEquipInfoResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->remaintimes(), "remainTimes");
  dict.setBool(msg->isfirstusedjadeingold(), "isFirstUsedJadeInGold");
  dict.setDouble(msg->mutilusedjadeingoldcount(), "mutilUsedJadeInGoldCount");
  dict.setDouble(msg->mutilusedjadeingoldneed(), "mutilUsedJadeInGoldNeed");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_InitDiceDataResponse(const InitDiceDataResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->leftrollcount(), "leftRollCount");
  dict.setDouble(msg->rewardmultiple(), "rewardMultiple");
  dict.setDouble(msg->vipleftrollcount(), "vipLeftRollCount");
  CCArray *arr_rollDiceInfos = CCArray::createWithCapacity(msg->rolldiceinfos_size());
  for (int idx = 0; idx < msg->rolldiceinfos_size(); idx++) {
    const MsgRollDiceInfo& val = msg->rolldiceinfos(idx);
    arr_rollDiceInfos->addObject(msgToJson_MsgRollDiceInfo(&val));
  }
  dict.setArray(arr_rollDiceInfos, "rollDiceInfos");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_RollDiceResponse(const RollDiceResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->leftrollcount(), "leftRollCount");
  dict.setDouble(msg->dicepoint(), "dicePoint");
  dict.setDouble(msg->rewardmultiple(), "rewardMultiple");
  dict.setDouble(msg->vipleftrollcount(), "vipLeftRollCount");
  dict.setDict(msgToJson_MsgGiftInfo(&(msg->giftinfo())), "giftInfo");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_GetServerTimeResponse(const GetServerTimeResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->servertime(), "serverTime");
  dict.setDouble(msg->growpowerlasttime(), "growPowerLastTime");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_QuitGameResponse(const QuitGameResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_ReStartGameResponse(const ReStartGameResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_StartGameResponse(const StartGameResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_BuyGemResponse(const BuyGemResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDict(msgToJson_MsgRoleGemBagGoods(&(msg->rolegembaggoods())), "roleGemBagGoods");
  dict.setDouble(msg->copper(), "copper");
  dict.setDouble(msg->gold(), "gold");
  dict.setDouble(msg->jade(), "jade");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_ComposeGemResponse(const ComposeGemResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDict(msgToJson_MsgRoleGemBagGoods(&(msg->rolegembaggoods())), "roleGemBagGoods");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_GemFillOrRemoveResponse(const GemFillOrRemoveResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_GetGemInfoResponse(const GetGemInfoResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  CCArray *arr_roleGemBagGoods = CCArray::createWithCapacity(msg->rolegembaggoods_size());
  for (int idx = 0; idx < msg->rolegembaggoods_size(); idx++) {
    const MsgRoleGemBagGoods& val = msg->rolegembaggoods(idx);
    arr_roleGemBagGoods->addObject(msgToJson_MsgRoleGemBagGoods(&val));
  }
  dict.setArray(arr_roleGemBagGoods, "roleGemBagGoods");
  CCArray *arr_roleGemOnBody = CCArray::createWithCapacity(msg->rolegemonbody_size());
  for (int idx = 0; idx < msg->rolegemonbody_size(); idx++) {
    const MsgRoleGemBagGoods& val = msg->rolegemonbody(idx);
    arr_roleGemOnBody->addObject(msgToJson_MsgRoleGemBagGoods(&val));
  }
  dict.setArray(arr_roleGemOnBody, "roleGemOnBody");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_OneKeyComposeGemResponse(const OneKeyComposeGemResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDict(msgToJson_MsgRoleGemBagGoods(&(msg->rolegembaggoods())), "roleGemBagGoods");
  dict.setDouble(msg->currentcount(), "currentCount");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_SellGemResponse(const SellGemResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->copper(), "copper");
  dict.setDouble(msg->gold(), "gold");
  dict.setDouble(msg->jade(), "jade");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_GetActivationCodeGiftResponse(const GetActivationCodeGiftResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setString(msg->gift(), "gift");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_GetActivationCodeGiftListResponse(const GetActivationCodeGiftListResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->totalcount(), "totalCount");
  CCArray *arr_gifts = CCArray::createWithCapacity(msg->gifts_size());
  for (int idx = 0; idx < msg->gifts_size(); idx++) {
    const string& val = msg->gifts(idx);
    arr_gifts->addObject(CCString::create(val));
  }
  dict.setArray(arr_gifts, "gifts");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_GetCompensateGiftListResponse(const GetCompensateGiftListResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  CCArray *arr_gift = CCArray::createWithCapacity(msg->gift_size());
  for (int idx = 0; idx < msg->gift_size(); idx++) {
    const string& val = msg->gift(idx);
    arr_gift->addObject(CCString::create(val));
  }
  dict.setArray(arr_gift, "gift");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_GetContinuousLoginGiftResponse(const GetContinuousLoginGiftResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  CCArray *arr_gifts = CCArray::createWithCapacity(msg->gifts_size());
  for (int idx = 0; idx < msg->gifts_size(); idx++) {
    const string& val = msg->gifts(idx);
    arr_gifts->addObject(CCString::create(val));
  }
  dict.setArray(arr_gifts, "gifts");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_GetDailyGuanJieGiftResponse(const GetDailyGuanJieGiftResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setString(msg->gifts(), "gifts");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_GetDailyVipGiftResponse(const GetDailyVipGiftResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setString(msg->gifts(), "gifts");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_GetGiftsInGiftBagResponse(const GetGiftsInGiftBagResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  CCArray *arr_openedGifts = CCArray::createWithCapacity(msg->openedgifts_size());
  for (int idx = 0; idx < msg->openedgifts_size(); idx++) {
    const ActivityGift& val = msg->openedgifts(idx);
    arr_openedGifts->addObject(msgToJson_ActivityGift(&val));
  }
  dict.setArray(arr_openedGifts, "openedGifts");
  CCArray *arr_notOpenGifts = CCArray::createWithCapacity(msg->notopengifts_size());
  for (int idx = 0; idx < msg->notopengifts_size(); idx++) {
    const ActivityGift& val = msg->notopengifts(idx);
    arr_notOpenGifts->addObject(msgToJson_ActivityGift(&val));
  }
  dict.setArray(arr_notOpenGifts, "notOpenGifts");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_GetLevelUpRewardsInfoResponse(const GetLevelUpRewardsInfoResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  CCArray *arr_rewardsInfo = CCArray::createWithCapacity(msg->rewardsinfo_size());
  for (int idx = 0; idx < msg->rewardsinfo_size(); idx++) {
    const string& val = msg->rewardsinfo(idx);
    arr_rewardsInfo->addObject(CCString::create(val));
  }
  dict.setArray(arr_rewardsInfo, "rewardsInfo");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_GetNewbieRewardGiftResponse(const GetNewbieRewardGiftResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setString(msg->newbierewardrecord(), "newbieRewardRecord");
  dict.setDouble(msg->newbierewardcount(), "newbieRewardCount");
  CCArray *arr_gifts = CCArray::createWithCapacity(msg->gifts_size());
  for (int idx = 0; idx < msg->gifts_size(); idx++) {
    const string& val = msg->gifts(idx);
    arr_gifts->addObject(CCString::create(val));
  }
  dict.setArray(arr_gifts, "gifts");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_GetVipRewardsInfoResponse(const GetVipRewardsInfoResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  CCArray *arr_rewardsInfo = CCArray::createWithCapacity(msg->rewardsinfo_size());
  for (int idx = 0; idx < msg->rewardsinfo_size(); idx++) {
    const string& val = msg->rewardsinfo(idx);
    arr_rewardsInfo->addObject(CCString::create(val));
  }
  dict.setArray(arr_rewardsInfo, "rewardsInfo");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_InitMonthCardGiftResponse(const InitMonthCardGiftResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setString(msg->gift(), "gift");
  dict.setDouble(msg->openedstatus(), "openedStatus");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_OpenGiftResponse(const OpenGiftResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDict(msgToJson_MsgGiftInfo(&(msg->giftinfo())), "giftInfo");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_ComposeKungfuResponse(const ComposeKungfuResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->kungfuskillid(), "kungfuSkillID");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_EquipKungfuSkillResponse(const EquipKungfuSkillResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_GetKungfuSlotResponse(const GetKungfuSlotResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->roleid(), "roleID");
  dict.setDouble(msg->type(), "type");
  CCArray *arr_kungfuSlotA = CCArray::createWithCapacity(msg->kungfuslota_size());
  for (int idx = 0; idx < msg->kungfuslota_size(); idx++) {
    const MsgKungfuSlotChild& val = msg->kungfuslota(idx);
    arr_kungfuSlotA->addObject(msgToJson_MsgKungfuSlotChild(&val));
  }
  dict.setArray(arr_kungfuSlotA, "kungfuSlotA");
  CCArray *arr_kungfuSlotB = CCArray::createWithCapacity(msg->kungfuslotb_size());
  for (int idx = 0; idx < msg->kungfuslotb_size(); idx++) {
    const MsgKungfuSlotChild& val = msg->kungfuslotb(idx);
    arr_kungfuSlotB->addObject(msgToJson_MsgKungfuSlotChild(&val));
  }
  dict.setArray(arr_kungfuSlotB, "kungfuSlotB");
  CCArray *arr_kungfuSlotC = CCArray::createWithCapacity(msg->kungfuslotc_size());
  for (int idx = 0; idx < msg->kungfuslotc_size(); idx++) {
    const MsgKungfuSlotChild& val = msg->kungfuslotc(idx);
    arr_kungfuSlotC->addObject(msgToJson_MsgKungfuSlotChild(&val));
  }
  dict.setArray(arr_kungfuSlotC, "kungfuSlotC");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_InitKungfuInfoResponse(const InitKungfuInfoResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  CCArray *arr_kungfuSkills = CCArray::createWithCapacity(msg->kungfuskills_size());
  for (int idx = 0; idx < msg->kungfuskills_size(); idx++) {
    const MsgKungfuSkill& val = msg->kungfuskills(idx);
    arr_kungfuSkills->addObject(msgToJson_MsgKungfuSkill(&val));
  }
  dict.setArray(arr_kungfuSkills, "kungfuSkills");
  CCArray *arr_kungfuInfo = CCArray::createWithCapacity(msg->kungfuinfo_size());
  for (int idx = 0; idx < msg->kungfuinfo_size(); idx++) {
    const MsgKungFuInfo& val = msg->kungfuinfo(idx);
    arr_kungfuInfo->addObject(msgToJson_MsgKungFuInfo(&val));
  }
  dict.setArray(arr_kungfuInfo, "kungfuInfo");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_LevelUpKungfuSkillResponse(const LevelUpKungfuSkillResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->copper(), "copper");
  dict.setDouble(msg->honour(), "honour");
  dict.setDict(msgToJson_MsgRoleCooldown(&(msg->cd())), "cd");
  dict.setDict(msgToJson_MsgRoleBagGoods(&(msg->item())), "item");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_LevelUpKungfuSlotResponse(const LevelUpKungfuSlotResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDict(msgToJson_MsgRoleBagGoods(&(msg->item())), "item");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_OneKeyUnequipKungfuSkillsResponse(const OneKeyUnequipKungfuSkillsResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_RefreshKungfuStarResponse(const RefreshKungfuStarResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->copper(), "copper");
  dict.setDouble(msg->honour(), "honour");
  dict.setDict(msgToJson_MsgRoleBagGoods(&(msg->item())), "item");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_ReplaceKungfuSlotResponse(const ReplaceKungfuSlotResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_UnlockKungfuButtonResponse(const UnlockKungfuButtonResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->kungfuid(), "KungfuID");
  dict.setDouble(msg->kungfuslotnum(), "kungfuSlotNum");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_UnlockKungfuSlotResponse(const UnlockKungfuSlotResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->kungfuslotnum(), "kungfuSlotNum");
  dict.setDict(msgToJson_MsgOpenKungfuSlotCondition(&(msg->openslotcondition())), "openSlotCondition");
  dict.setDouble(msg->kungfuid(), "KungfuID");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_GetDungeonRankResponse(const GetDungeonRankResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->selfrank(), "selfRank");
  dict.setDict(msgToJson_MsgRankItem(&(msg->selfboard())), "selfBoard");
  CCArray *arr_leaderboard = CCArray::createWithCapacity(msg->leaderboard_size());
  for (int idx = 0; idx < msg->leaderboard_size(); idx++) {
    const MsgRankItem& val = msg->leaderboard(idx);
    arr_leaderboard->addObject(msgToJson_MsgRankItem(&val));
  }
  dict.setArray(arr_leaderboard, "leaderboard");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_GetDungeonRankFirstResponse(const GetDungeonRankFirstResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDict(msgToJson_MsgRankItem(&(msg->mintimeboard())), "minTimeBoard");
  dict.setDict(msgToJson_MsgRankItem(&(msg->minfightboard())), "minFightBoard");
  dict.setDict(msgToJson_MsgRankItem(&(msg->maxbattle())), "maxBattle");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_GetLeaderboardResponse(const GetLeaderboardResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  CCArray *arr_roleLevelBoard = CCArray::createWithCapacity(msg->rolelevelboard_size());
  for (int idx = 0; idx < msg->rolelevelboard_size(); idx++) {
    const MsgRankItem& val = msg->rolelevelboard(idx);
    arr_roleLevelBoard->addObject(msgToJson_MsgRankItem(&val));
  }
  dict.setArray(arr_roleLevelBoard, "roleLevelBoard");
  CCArray *arr_roleFightBoard = CCArray::createWithCapacity(msg->rolefightboard_size());
  for (int idx = 0; idx < msg->rolefightboard_size(); idx++) {
    const MsgRankItem& val = msg->rolefightboard(idx);
    arr_roleFightBoard->addObject(msgToJson_MsgRankItem(&val));
  }
  dict.setArray(arr_roleFightBoard, "roleFightBoard");
  CCArray *arr_roleOfficialBoard = CCArray::createWithCapacity(msg->roleofficialboard_size());
  for (int idx = 0; idx < msg->roleofficialboard_size(); idx++) {
    const MsgRankItem& val = msg->roleofficialboard(idx);
    arr_roleOfficialBoard->addObject(msgToJson_MsgRankItem(&val));
  }
  dict.setArray(arr_roleOfficialBoard, "roleOfficialBoard");
  CCArray *arr_yijunLevelBoard = CCArray::createWithCapacity(msg->yijunlevelboard_size());
  for (int idx = 0; idx < msg->yijunlevelboard_size(); idx++) {
    const MsgRankItem& val = msg->yijunlevelboard(idx);
    arr_yijunLevelBoard->addObject(msgToJson_MsgRankItem(&val));
  }
  dict.setArray(arr_yijunLevelBoard, "yijunLevelBoard");
  CCArray *arr_yijunFightBoard = CCArray::createWithCapacity(msg->yijunfightboard_size());
  for (int idx = 0; idx < msg->yijunfightboard_size(); idx++) {
    const MsgRankItem& val = msg->yijunfightboard(idx);
    arr_yijunFightBoard->addObject(msgToJson_MsgRankItem(&val));
  }
  dict.setArray(arr_yijunFightBoard, "yijunFightBoard");
  CCArray *arr_yijunWealthBoard = CCArray::createWithCapacity(msg->yijunwealthboard_size());
  for (int idx = 0; idx < msg->yijunwealthboard_size(); idx++) {
    const MsgRankItem& val = msg->yijunwealthboard(idx);
    arr_yijunWealthBoard->addObject(msgToJson_MsgRankItem(&val));
  }
  dict.setArray(arr_yijunWealthBoard, "yijunWealthBoard");
  dict.setDouble(msg->rolelevelrank(), "roleLevelRank");
  dict.setDouble(msg->rolefightrank(), "roleFightRank");
  dict.setDouble(msg->roleofficialrank(), "roleOfficialRank");
  dict.setDouble(msg->yijunlevelrank(), "yijunLevelRank");
  dict.setDouble(msg->yijunfightrank(), "yijunFightRank");
  dict.setDouble(msg->yijunwealthrank(), "yijunWealthRank");
  dict.setDouble(msg->yijunlevel(), "yijunLevel");
  dict.setDouble(msg->yijunfight(), "yijunFight");
  dict.setDouble(msg->yijunwealth(), "yijunWealth");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_GetSelfLeaderboardResponse(const GetSelfLeaderboardResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->rank(), "rank");
  dict.setDouble(msg->rankvalue(), "rankValue");
  dict.setDouble(msg->leaderboadtype(), "leaderboadType");
  dict.setDouble(msg->subtype(), "subType");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_LoginResponse(const LoginResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  CCArray *arr_serverInfoData = CCArray::createWithCapacity(msg->serverinfodata_size());
  for (int idx = 0; idx < msg->serverinfodata_size(); idx++) {
    const MsgServerInfoData& val = msg->serverinfodata(idx);
    arr_serverInfoData->addObject(msgToJson_MsgServerInfoData(&val));
  }
  dict.setArray(arr_serverInfoData, "serverInfoData");
  dict.setDouble(msg->userid(), "userID");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_LogoutResponse(const LogoutResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_RegisterResponse(const RegisterResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->userid(), "userID");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_GetAllMailsResponse(const GetAllMailsResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  CCArray *arr_roleMails = CCArray::createWithCapacity(msg->rolemails_size());
  for (int idx = 0; idx < msg->rolemails_size(); idx++) {
    const MsgRoleMail& val = msg->rolemails(idx);
    arr_roleMails->addObject(msgToJson_MsgRoleMail(&val));
  }
  dict.setArray(arr_roleMails, "roleMails");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_NewMailBroadcast(const NewMailBroadcast *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->newcount(), "newCount");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_OpenAllMailsKitResponse(const OpenAllMailsKitResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  CCArray *arr_kit = CCArray::createWithCapacity(msg->kit_size());
  for (int idx = 0; idx < msg->kit_size(); idx++) {
    const MsgGiftInfo& val = msg->kit(idx);
    arr_kit->addObject(msgToJson_MsgGiftInfo(&val));
  }
  dict.setArray(arr_kit, "kit");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_OpenKitResponse(const OpenKitResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDict(msgToJson_MsgGiftInfo(&(msg->kit())), "kit");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_OpenMailResponse(const OpenMailResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_RemoveAllMailsResponse(const RemoveAllMailsResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_RemoveMailResponse(const RemoveMailResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_EnterMainCityResponse(const EnterMainCityResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->entercitytype(), "enterCityType");
  CCArray *arr_roleInCity = CCArray::createWithCapacity(msg->roleincity_size());
  for (int idx = 0; idx < msg->roleincity_size(); idx++) {
    const MsgRoleInMainCity& val = msg->roleincity(idx);
    arr_roleInCity->addObject(msgToJson_MsgRoleInMainCity(&val));
  }
  dict.setArray(arr_roleInCity, "roleInCity");
  CCArray *arr_statuesInCity = CCArray::createWithCapacity(msg->statuesincity_size());
  for (int idx = 0; idx < msg->statuesincity_size(); idx++) {
    const MsgStatuesInMainCity& val = msg->statuesincity(idx);
    arr_statuesInCity->addObject(msgToJson_MsgStatuesInMainCity(&val));
  }
  dict.setArray(arr_statuesInCity, "statuesInCity");
  CCArray *arr_allPet = CCArray::createWithCapacity(msg->allpet_size());
  for (int idx = 0; idx < msg->allpet_size(); idx++) {
    const MsgPet& val = msg->allpet(idx);
    arr_allPet->addObject(msgToJson_MsgPet(&val));
  }
  dict.setArray(arr_allPet, "allPet");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_ExitMainCityResponse(const ExitMainCityResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_EnterMainCityBroadcast(const EnterMainCityBroadcast *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->cityid(), "cityID");
  dict.setDict(msgToJson_MsgRoleData(&(msg->roledata())), "roleData");
  CCArray *arr_pet = CCArray::createWithCapacity(msg->pet_size());
  for (int idx = 0; idx < msg->pet_size(); idx++) {
    const MsgPet& val = msg->pet(idx);
    arr_pet->addObject(msgToJson_MsgPet(&val));
  }
  dict.setArray(arr_pet, "pet");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_ExitMainCityBroadcast(const ExitMainCityBroadcast *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->roleid(), "roleID");
  dict.setDouble(msg->cityid(), "cityID");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_AcceptNonNormalMissionResponse(const AcceptNonNormalMissionResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDict(msgToJson_MsgRoleMission(&(msg->nonnormalmission())), "NonNormalMission");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_AcceptNormalMissionResponse(const AcceptNormalMissionResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDict(msgToJson_MsgRoleMission(&(msg->normalmission())), "normalMission");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_AddMissionStarResponse(const AddMissionStarResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDict(msgToJson_MsgRoleMission(&(msg->rolemission())), "roleMission");
  dict.setDouble(msg->gold(), "gold");
  dict.setDouble(msg->jade(), "jade");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_CompleteMissionResponse(const CompleteMissionResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDict(msgToJson_MsgGiftInfo(&(msg->reward())), "reward");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_ForgotMissionResponse(const ForgotMissionResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_InitMissionDataResponse(const InitMissionDataResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  CCArray *arr_normalMission = CCArray::createWithCapacity(msg->normalmission_size());
  for (int idx = 0; idx < msg->normalmission_size(); idx++) {
    const MsgRoleMission& val = msg->normalmission(idx);
    arr_normalMission->addObject(msgToJson_MsgRoleMission(&val));
  }
  dict.setArray(arr_normalMission, "normalMission");
  CCArray *arr_dailyMission = CCArray::createWithCapacity(msg->dailymission_size());
  for (int idx = 0; idx < msg->dailymission_size(); idx++) {
    const MsgRoleMission& val = msg->dailymission(idx);
    arr_dailyMission->addObject(msgToJson_MsgRoleMission(&val));
  }
  dict.setArray(arr_dailyMission, "dailyMission");
  CCArray *arr_yijunMission = CCArray::createWithCapacity(msg->yijunmission_size());
  for (int idx = 0; idx < msg->yijunmission_size(); idx++) {
    const MsgRoleMission& val = msg->yijunmission(idx);
    arr_yijunMission->addObject(msgToJson_MsgRoleMission(&val));
  }
  dict.setArray(arr_yijunMission, "yijunMission");
  CCArray *arr_completedMission = CCArray::createWithCapacity(msg->completedmission_size());
  for (int idx = 0; idx < msg->completedmission_size(); idx++) {
    double val = msg->completedmission(idx);
    arr_completedMission->addObject(CCDouble::create(val));
  }
  dict.setArray(arr_completedMission, "completedMission");
  dict.setDouble(msg->dailymissionrefresh(), "dailyMissionRefresh");
  dict.setDouble(msg->yijunmissionrefresh(), "yijunMissionRefresh");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_OneKeyAddMissionStarResponse(const OneKeyAddMissionStarResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->gold(), "gold");
  dict.setDouble(msg->jade(), "jade");
  dict.setDict(msgToJson_MsgRoleMission(&(msg->rolemission())), "roleMission");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_OneKeyCompleteMissionResponse(const OneKeyCompleteMissionResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->rolegold(), "roleGold");
  dict.setDouble(msg->rolejade(), "roleJade");
  dict.setDict(msgToJson_MsgRoleMission(&(msg->rolemission())), "roleMission");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_RefreshNonNormalMissionResponse(const RefreshNonNormalMissionResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->type(), "type");
  CCArray *arr_NonNormalMission = CCArray::createWithCapacity(msg->nonnormalmission_size());
  for (int idx = 0; idx < msg->nonnormalmission_size(); idx++) {
    const MsgRoleMission& val = msg->nonnormalmission(idx);
    arr_NonNormalMission->addObject(msgToJson_MsgRoleMission(&val));
  }
  dict.setArray(arr_NonNormalMission, "NonNormalMission");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_SetRoleTeachStateResponse(const SetRoleTeachStateResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_UpdateMissionResponse(const UpdateMissionResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDict(msgToJson_MsgRoleMission(&(msg->rolemission())), "roleMission");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_InitMoneyTreeDataResponse(const InitMoneyTreeDataResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->leftshakecount(), "leftShakeCount");
  dict.setDouble(msg->costgold(), "costGold");
  dict.setDouble(msg->getcopper(), "getCopper");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_ShakeMoneyTreeResponse(const ShakeMoneyTreeResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->copper(), "copper");
  dict.setDouble(msg->gold(), "gold");
  dict.setDouble(msg->jade(), "jade");
  dict.setDouble(msg->leftshakecount(), "leftShakeCount");
  dict.setDouble(msg->costgold(), "costGold");
  dict.setDouble(msg->getcopper(), "getCopper");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_GetRechargeInfoResponse(const GetRechargeInfoResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->recharge(), "recharge");
  CCArray *arr_rechargeInfo = CCArray::createWithCapacity(msg->rechargeinfo_size());
  for (int idx = 0; idx < msg->rechargeinfo_size(); idx++) {
    const MsgRechargeInfo& val = msg->rechargeinfo(idx);
    arr_rechargeInfo->addObject(msgToJson_MsgRechargeInfo(&val));
  }
  dict.setArray(arr_rechargeInfo, "rechargeInfo");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_PayResponse(const PayResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setString(msg->coolorderserial(), "coolOrderSerial");
  dict.setString(msg->productprice(), "productPrice");
  dict.setString(msg->productorignalprice(), "productOrignalPrice");
  dict.setString(msg->jade(), "jade");
  dict.setString(msg->accesstoken(), "accessToken");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_AccelerateBornPetResponse(const AccelerateBornPetResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDict(msgToJson_MsgRoleCooldown(&(msg->rolecooldown())), "roleCooldown");
  dict.setDict(msgToJson_MsgPetBornEgg(&(msg->petbornegg())), "petBornEgg");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_BornPetResponse(const BornPetResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDict(msgToJson_MsgRoleCooldown(&(msg->rolecooldown())), "roleCooldown");
  dict.setDict(msgToJson_MsgPetBornEgg(&(msg->petbornegg())), "petBornEgg");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_CancelFollowPetResponse(const CancelFollowPetResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDict(msgToJson_MsgPetCooldown(&(msg->petcooldown())), "petCooldown");
  dict.setDict(msgToJson_MsgPet(&(msg->pet())), "pet");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_FollowMasterPetResponse(const FollowMasterPetResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  CCArray *arr_petList = CCArray::createWithCapacity(msg->petlist_size());
  for (int idx = 0; idx < msg->petlist_size(); idx++) {
    const MsgPet& val = msg->petlist(idx);
    arr_petList->addObject(msgToJson_MsgPet(&val));
  }
  dict.setArray(arr_petList, "petList");
  CCArray *arr_petCooldownList = CCArray::createWithCapacity(msg->petcooldownlist_size());
  for (int idx = 0; idx < msg->petcooldownlist_size(); idx++) {
    const MsgPetCooldown& val = msg->petcooldownlist(idx);
    arr_petCooldownList->addObject(msgToJson_MsgPetCooldown(&val));
  }
  dict.setArray(arr_petCooldownList, "petCooldownList");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_GetBornPetResponse(const GetBornPetResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDict(msgToJson_MsgRoleCooldown(&(msg->rolecooldown())), "roleCooldown");
  dict.setDict(msgToJson_MsgPet(&(msg->pet())), "pet");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_GetPetInfoResponse(const GetPetInfoResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  CCArray *arr_petList = CCArray::createWithCapacity(msg->petlist_size());
  for (int idx = 0; idx < msg->petlist_size(); idx++) {
    const MsgPet& val = msg->petlist(idx);
    arr_petList->addObject(msgToJson_MsgPet(&val));
  }
  dict.setArray(arr_petList, "petList");
  CCArray *arr_petCDTimeList = CCArray::createWithCapacity(msg->petcdtimelist_size());
  for (int idx = 0; idx < msg->petcdtimelist_size(); idx++) {
    const MsgPetCooldown& val = msg->petcdtimelist(idx);
    arr_petCDTimeList->addObject(msgToJson_MsgPetCooldown(&val));
  }
  dict.setArray(arr_petCDTimeList, "petCDTimeList");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_GetPetStatusResponse(const GetPetStatusResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  CCArray *arr_petCooldownList = CCArray::createWithCapacity(msg->petcooldownlist_size());
  for (int idx = 0; idx < msg->petcooldownlist_size(); idx++) {
    const MsgPetCooldown& val = msg->petcooldownlist(idx);
    arr_petCooldownList->addObject(msgToJson_MsgPetCooldown(&val));
  }
  dict.setArray(arr_petCooldownList, "petCooldownList");
  CCArray *arr_petList = CCArray::createWithCapacity(msg->petlist_size());
  for (int idx = 0; idx < msg->petlist_size(); idx++) {
    const MsgPet& val = msg->petlist(idx);
    arr_petList->addObject(msgToJson_MsgPet(&val));
  }
  dict.setArray(arr_petList, "petList");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_InitPetResponse(const InitPetResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->petnum(), "petNum");
  CCArray *arr_petBornEggList = CCArray::createWithCapacity(msg->petbornegglist_size());
  for (int idx = 0; idx < msg->petbornegglist_size(); idx++) {
    const MsgPetBornEgg& val = msg->petbornegglist(idx);
    arr_petBornEggList->addObject(msgToJson_MsgPetBornEgg(&val));
  }
  dict.setArray(arr_petBornEggList, "petBornEggList");
  CCArray *arr_followPetList = CCArray::createWithCapacity(msg->followpetlist_size());
  for (int idx = 0; idx < msg->followpetlist_size(); idx++) {
    const MsgPet& val = msg->followpetlist(idx);
    arr_followPetList->addObject(msgToJson_MsgPet(&val));
  }
  dict.setArray(arr_followPetList, "followPetList");
  CCArray *arr_followPetCDList = CCArray::createWithCapacity(msg->followpetcdlist_size());
  for (int idx = 0; idx < msg->followpetcdlist_size(); idx++) {
    const MsgPetCooldown& val = msg->followpetcdlist(idx);
    arr_followPetCDList->addObject(msgToJson_MsgPetCooldown(&val));
  }
  dict.setArray(arr_followPetCDList, "followPetCDList");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_LevelUpPetResponse(const LevelUpPetResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDict(msgToJson_MsgRoleBagGoods(&(msg->rolebaggoods())), "roleBagGoods");
  dict.setDict(msgToJson_MsgPet(&(msg->pet())), "pet");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_LevelUpPetStarResponse(const LevelUpPetStarResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->copper(), "copper");
  dict.setDict(msgToJson_MsgPet(&(msg->pet())), "pet");
  dict.setDict(msgToJson_MsgPetCooldown(&(msg->petcooldown())), "petcooldown");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_SellPetResponse(const SellPetResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_BuySignResponse(const BuySignResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_GetActivationCodeRewardResponse(const GetActivationCodeRewardResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDict(msgToJson_MsgGiftInfo(&(msg->giftinfo())), "giftInfo");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_GetCompensateRewardResponse(const GetCompensateRewardResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDict(msgToJson_MsgGiftInfo(&(msg->giftinfo())), "giftInfo");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_GetDailyGuanjieRewardResponse(const GetDailyGuanjieRewardResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDict(msgToJson_MsgGiftInfo(&(msg->giftinfo())), "giftInfo");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_GetDailyRechargeRewardResponse(const GetDailyRechargeRewardResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->copper(), "copper");
  dict.setDouble(msg->gold(), "gold");
  CCArray *arr_goods = CCArray::createWithCapacity(msg->goods_size());
  for (int idx = 0; idx < msg->goods_size(); idx++) {
    const MsgRoleBagGoods& val = msg->goods(idx);
    arr_goods->addObject(msgToJson_MsgRoleBagGoods(&val));
  }
  dict.setArray(arr_goods, "goods");
  CCArray *arr_gem = CCArray::createWithCapacity(msg->gem_size());
  for (int idx = 0; idx < msg->gem_size(); idx++) {
    const MsgRoleGemBagGoods& val = msg->gem(idx);
    arr_gem->addObject(msgToJson_MsgRoleGemBagGoods(&val));
  }
  dict.setArray(arr_gem, "gem");
  CCArray *arr_guaxiang = CCArray::createWithCapacity(msg->guaxiang_size());
  for (int idx = 0; idx < msg->guaxiang_size(); idx++) {
    const MsgGuaxiangGoods& val = msg->guaxiang(idx);
    arr_guaxiang->addObject(msgToJson_MsgGuaxiangGoods(&val));
  }
  dict.setArray(arr_guaxiang, "guaxiang");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_GetDailyRewardResponse(const GetDailyRewardResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDict(msgToJson_MsgGiftInfo(&(msg->giftinfo())), "giftInfo");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_GetDailyVipRewardResponse(const GetDailyVipRewardResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDict(msgToJson_MsgGiftInfo(&(msg->giftinfo())), "giftInfo");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_GetMonthCardGiftResponse(const GetMonthCardGiftResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDict(msgToJson_MsgGiftInfo(&(msg->giftinfo())), "giftInfo");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_GetNewbieRewardResponse(const GetNewbieRewardResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDict(msgToJson_MsgGiftInfo(&(msg->giftinfo())), "giftInfo");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_GetOnlineGiftRewardResponse(const GetOnlineGiftRewardResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setString(msg->rewardinfo(), "rewardInfo");
  dict.setDouble(msg->leftonlinetimes(), "leftOnlineTimes");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_GetOnlineTimesRewardResponse(const GetOnlineTimesRewardResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setString(msg->nextrewardsinfo(), "nextRewardsInfo");
  dict.setDouble(msg->leftonlinetimes(), "leftOnlineTimes");
  dict.setDict(msgToJson_MsgGiftInfo(&(msg->giftinfo())), "giftInfo");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_GetSignRewardResponse(const GetSignRewardResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDict(msgToJson_MsgGiftInfo(&(msg->giftinfo())), "giftInfo");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_GetVipRewardResponse(const GetVipRewardResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDict(msgToJson_MsgGiftInfo(&(msg->giftinfo())), "giftInfo");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_InitDailyRewardDataResponse(const InitDailyRewardDataResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->dailyrewardprocess(), "dailyRewardProcess");
  dict.setDouble(msg->dailyrewardedtoday(), "dailyRewardedToday");
  dict.setDouble(msg->dailyviprewardedtoday(), "dailyVipRewardedToday");
  dict.setDouble(msg->dailyguanjierewardedtoday(), "dailyGuanjieRewardedToday");
  dict.setString(msg->dailyrewardrecord(), "dailyRewardRecord");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_InitSignDataResponse(const InitSignDataResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  CCArray *arr_signReward = CCArray::createWithCapacity(msg->signreward_size());
  for (int idx = 0; idx < msg->signreward_size(); idx++) {
    const MsgSignReward& val = msg->signreward(idx);
    arr_signReward->addObject(msgToJson_MsgSignReward(&val));
  }
  dict.setArray(arr_signReward, "signReward");
  dict.setDouble(msg->count(), "count");
  dict.setString(msg->signrecord(), "signRecord");
  dict.setString(msg->openrewardrecord(), "openRewardRecord");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_SignResponse(const SignResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_CreateRoleResponse(const CreateRoleResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->roleid(), "roleID");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_DeleteRoleResponse(const DeleteRoleResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_GetRoleDataResponse(const GetRoleDataResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->type(), "type");
  dict.setDict(msgToJson_MsgRoleData(&(msg->roledata())), "roleData");
  dict.setDict(msgToJson_MsgRoleProperties(&(msg->roleproperties())), "roleProperties");
  dict.setDict(msgToJson_MsgKungfuProperties(&(msg->rolekungfuproperties())), "roleKungfuProperties");
  CCArray *arr_roleEquipGoods = CCArray::createWithCapacity(msg->roleequipgoods_size());
  for (int idx = 0; idx < msg->roleequipgoods_size(); idx++) {
    const MsgRoleBagGoods& val = msg->roleequipgoods(idx);
    arr_roleEquipGoods->addObject(msgToJson_MsgRoleBagGoods(&val));
  }
  dict.setArray(arr_roleEquipGoods, "roleEquipGoods");
  CCArray *arr_roleBuffInfos = CCArray::createWithCapacity(msg->rolebuffinfos_size());
  for (int idx = 0; idx < msg->rolebuffinfos_size(); idx++) {
    const MsgRoleBuffInfos& val = msg->rolebuffinfos(idx);
    arr_roleBuffInfos->addObject(msgToJson_MsgRoleBuffInfos(&val));
  }
  dict.setArray(arr_roleBuffInfos, "roleBuffInfos");
  CCArray *arr_pet = CCArray::createWithCapacity(msg->pet_size());
  for (int idx = 0; idx < msg->pet_size(); idx++) {
    const MsgPet& val = msg->pet(idx);
    arr_pet->addObject(msgToJson_MsgPet(&val));
  }
  dict.setArray(arr_pet, "pet");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_GetRoleListResponse(const GetRoleListResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  CCArray *arr_roleData = CCArray::createWithCapacity(msg->roledata_size());
  for (int idx = 0; idx < msg->roledata_size(); idx++) {
    const MsgRoleBasicInfoData& val = msg->roledata(idx);
    arr_roleData->addObject(msgToJson_MsgRoleBasicInfoData(&val));
  }
  dict.setArray(arr_roleData, "roleData");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_GetRoleZeroStageResponse(const GetRoleZeroStageResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->stage(), "stage");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_LevelUpRoleResponse(const LevelUpRoleResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_SaveRoleBehaviorEventsResponse(const SaveRoleBehaviorEventsResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_SaveRoleZeroStageResponse(const SaveRoleZeroStageResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_BuyGoodsResponse(const BuyGoodsResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->gold(), "gold");
  dict.setDouble(msg->jade(), "jade");
  dict.setDouble(msg->copper(), "copper");
  dict.setDouble(msg->friendship(), "friendShip");
  dict.setDouble(msg->subtype(), "subtype");
  dict.setDouble(msg->goldticket(), "goldTicket");
  dict.setDouble(msg->silverticket(), "silverTicket");
  dict.setDouble(msg->copperticket(), "copperTicket");
  dict.setDouble(msg->honour(), "honour");
  CCArray *arr_roleGemBagGoods = CCArray::createWithCapacity(msg->rolegembaggoods_size());
  for (int idx = 0; idx < msg->rolegembaggoods_size(); idx++) {
    const MsgRoleGemBagGoods& val = msg->rolegembaggoods(idx);
    arr_roleGemBagGoods->addObject(msgToJson_MsgRoleGemBagGoods(&val));
  }
  dict.setArray(arr_roleGemBagGoods, "roleGemBagGoods");
  CCArray *arr_guaxiangGoods = CCArray::createWithCapacity(msg->guaxianggoods_size());
  for (int idx = 0; idx < msg->guaxianggoods_size(); idx++) {
    const MsgGuaxiangGoods& val = msg->guaxianggoods(idx);
    arr_guaxiangGoods->addObject(msgToJson_MsgGuaxiangGoods(&val));
  }
  dict.setArray(arr_guaxiangGoods, "guaxiangGoods");
  CCArray *arr_roleBagGoods = CCArray::createWithCapacity(msg->rolebaggoods_size());
  for (int idx = 0; idx < msg->rolebaggoods_size(); idx++) {
    const MsgRoleBagGoods& val = msg->rolebaggoods(idx);
    arr_roleBagGoods->addObject(msgToJson_MsgRoleBagGoods(&val));
  }
  dict.setArray(arr_roleBagGoods, "roleBagGoods");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_GetShoplistResponse(const GetShoplistResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->type(), "type");
  CCArray *arr_goodsinfoData = CCArray::createWithCapacity(msg->goodsinfodata_size());
  for (int idx = 0; idx < msg->goodsinfodata_size(); idx++) {
    const MsgShopGoodsInfoData& val = msg->goodsinfodata(idx);
    arr_goodsinfoData->addObject(msgToJson_MsgShopGoodsInfoData(&val));
  }
  dict.setArray(arr_goodsinfoData, "goodsinfoData");
  CCArray *arr_refreshData = CCArray::createWithCapacity(msg->refreshdata_size());
  for (int idx = 0; idx < msg->refreshdata_size(); idx++) {
    const MsgRefreshData& val = msg->refreshdata(idx);
    arr_refreshData->addObject(msgToJson_MsgRefreshData(&val));
  }
  dict.setArray(arr_refreshData, "refreshData");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_RefreshFixBroadcast(const RefreshFixBroadcast *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_RefreshPromptlyResponse(const RefreshPromptlyResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->type(), "type");
  dict.setDouble(msg->gold(), "gold");
  dict.setDouble(msg->jade(), "jade");
  CCArray *arr_goodsinfoData = CCArray::createWithCapacity(msg->goodsinfodata_size());
  for (int idx = 0; idx < msg->goodsinfodata_size(); idx++) {
    const MsgShopGoodsInfoData& val = msg->goodsinfodata(idx);
    arr_goodsinfoData->addObject(msgToJson_MsgShopGoodsInfoData(&val));
  }
  dict.setArray(arr_goodsinfoData, "goodsinfoData");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_GetSkillsResponse(const GetSkillsResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  CCArray *arr_passiveSkill = CCArray::createWithCapacity(msg->passiveskill_size());
  for (int idx = 0; idx < msg->passiveskill_size(); idx++) {
    const MsgRolePassiveSkill& val = msg->passiveskill(idx);
    arr_passiveSkill->addObject(msgToJson_MsgRolePassiveSkill(&val));
  }
  dict.setArray(arr_passiveSkill, "passiveSkill");
  dict.setDouble(msg->roleid(), "roleID");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_LevelUpPassiveSkillResponse(const LevelUpPassiveSkillResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDict(msgToJson_MsgRoleCooldown(&(msg->cd())), "cd");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_OpenPassiveSkillResponse(const OpenPassiveSkillResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_BuyIntoCountResponse(const BuyIntoCountResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->gold(), "gold");
  dict.setDouble(msg->jade(), "jade");
  dict.setDouble(msg->freecount(), "freecount");
  dict.setDouble(msg->buycount(), "buycount");
  dict.setDouble(msg->buyusecount(), "buyusecount");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_EndFightResponse(const EndFightResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  CCArray *arr_goodsinfoData = CCArray::createWithCapacity(msg->goodsinfodata_size());
  for (int idx = 0; idx < msg->goodsinfodata_size(); idx++) {
    const MsgRoleBagGoods& val = msg->goodsinfodata(idx);
    arr_goodsinfoData->addObject(msgToJson_MsgRoleBagGoods(&val));
  }
  dict.setArray(arr_goodsinfoData, "goodsinfoData");
  dict.setDouble(msg->friendship(), "friendship");
  dict.setDouble(msg->score(), "score");
  dict.setDouble(msg->freecount(), "freecount");
  dict.setDouble(msg->buycount(), "buycount");
  dict.setDouble(msg->buyusecount(), "buyusecount");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_EnterSpecialDungeonResponse(const EnterSpecialDungeonResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_GetInviteListResponse(const GetInviteListResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  CCArray *arr_inviteInfoData = CCArray::createWithCapacity(msg->inviteinfodata_size());
  for (int idx = 0; idx < msg->inviteinfodata_size(); idx++) {
    const MsgInviteInfoData& val = msg->inviteinfodata(idx);
    arr_inviteInfoData->addObject(msgToJson_MsgInviteInfoData(&val));
  }
  dict.setArray(arr_inviteInfoData, "inviteInfoData");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_InitSpecialDungeonResponse(const InitSpecialDungeonResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->freecount(), "freecount");
  dict.setDouble(msg->buycount(), "buycount");
  dict.setDouble(msg->buyusecount(), "buyusecount");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_KillBossResponse(const KillBossResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_InitWorshipResponse(const InitWorshipResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->worshipcount(), "worshipCount");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_WorshipResponse(const WorshipResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDict(msgToJson_MsgGiftInfo(&(msg->giftinfos())), "giftInfos");
  CCArray *arr_roleBuffInfos = CCArray::createWithCapacity(msg->rolebuffinfos_size());
  for (int idx = 0; idx < msg->rolebuffinfos_size(); idx++) {
    const MsgRoleBuffInfos& val = msg->rolebuffinfos(idx);
    arr_roleBuffInfos->addObject(msgToJson_MsgRoleBuffInfos(&val));
  }
  dict.setArray(arr_roleBuffInfos, "roleBuffInfos");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_AccelerateSweepDungeonResponse(const AccelerateSweepDungeonResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->roleremainpower(), "roleRemainPower");
  dict.setDouble(msg->destfloor(), "destFloor");
  CCArray *arr_rewards = CCArray::createWithCapacity(msg->rewards_size());
  for (int idx = 0; idx < msg->rewards_size(); idx++) {
    const MsgSweepDungeonAward& val = msg->rewards(idx);
    arr_rewards->addObject(msgToJson_MsgSweepDungeonAward(&val));
  }
  dict.setArray(arr_rewards, "rewards");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_CancelSweepDungeonResponse(const CancelSweepDungeonResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDict(msgToJson_MsgRoleCooldown(&(msg->cd())), "cd");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_EndSweepDungeonResponse(const EndSweepDungeonResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->roleremainpower(), "roleRemainPower");
  dict.setDouble(msg->currentfloor(), "currentFloor");
  dict.setDict(msgToJson_MsgSweepDungeonAward(&(msg->reward())), "reward");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_StartSweepDungeonResponse(const StartSweepDungeonResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDict(msgToJson_MsgRoleCooldown(&(msg->cd())), "cd");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_StartVipSweepDungeonResponse(const StartVipSweepDungeonResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->roleremainpower(), "roleRemainPower");
  CCArray *arr_rewards = CCArray::createWithCapacity(msg->rewards_size());
  for (int idx = 0; idx < msg->rewards_size(); idx++) {
    const MsgSweepDungeonAward& val = msg->rewards(idx);
    arr_rewards->addObject(msgToJson_MsgSweepDungeonAward(&val));
  }
  dict.setArray(arr_rewards, "rewards");
  dict.setDouble(msg->destfloor(), "destFloor");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_SweepInfoOfLoginResponse(const SweepInfoOfLoginResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->dungeonid(), "dungeonId");
  dict.setDouble(msg->dungeontype(), "dungeonType");
  dict.setDouble(msg->sweepdungeontype(), "sweepDungeonType");
  dict.setDouble(msg->copper(), "copper");
  dict.setDouble(msg->exp(), "exp");
  dict.setDouble(msg->jungong(), "jungong");
  dict.setDouble(msg->power(), "power");
  dict.setDict(msgToJson_MsgRoleCooldown(&(msg->cd())), "cd");
  dict.setString(msg->onlinegetgoodsid(), "onlineGetGoodsId");
  dict.setDouble(msg->startfloor(), "startFloor");
  dict.setDouble(msg->currentfloor(), "currentFloor");
  dict.setDouble(msg->destfloor(), "destFloor");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_BuyPowerResponse(const BuyPowerResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_ChangePasswordResponse(const ChangePasswordResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setString(msg->newpassword(), "newPassword");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_ExsitFightResponse(const ExsitFightResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_GetOfflineExpResponse(const GetOfflineExpResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->offlineexp(), "offlineExp");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_EndTongtianTowerFightResponse(const EndTongtianTowerFightResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  CCArray *arr_goodsinfoData = CCArray::createWithCapacity(msg->goodsinfodata_size());
  for (int idx = 0; idx < msg->goodsinfodata_size(); idx++) {
    const MsgRoleBagGoods& val = msg->goodsinfodata(idx);
    arr_goodsinfoData->addObject(msgToJson_MsgRoleBagGoods(&val));
  }
  dict.setArray(arr_goodsinfoData, "goodsinfoData");
  dict.setDouble(msg->power(), "power");
  dict.setDouble(msg->currentfloor(), "currentFloor");
  dict.setDouble(msg->maxfloor(), "maxFloor");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_EnterTongtianTowerResponse(const EnterTongtianTowerResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_InitTongtianTowerResponse(const InitTongtianTowerResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->currentfloor(), "currentFloor");
  dict.setDouble(msg->maxfloor(), "maxFloor");
  dict.setDouble(msg->resettimes(), "resetTimes");
  dict.setString(msg->kungfutaolu(), "kungfutaolu");
  dict.setString(msg->kungfustar(), "kungfustar");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_ResetTongtianTowerTimesResponse(const ResetTongtianTowerTimesResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->currentfloor(), "currentFloor");
  dict.setDouble(msg->plustimes(), "plusTimes");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_SaveTongtianTowerKungfuResponse(const SaveTongtianTowerKungfuResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_WorldbossAttackDamageResponse(const WorldbossAttackDamageResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->bosshp(), "bossHP");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_WorldbossBossHpBroadcast(const WorldbossBossHpBroadcast *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->bosshp(), "bossHP");
  dict.setDouble(msg->bosstype(), "bossType");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_WorldbossBuyBuffResponse(const WorldbossBuyBuffResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->remaingold(), "remainGold");
  dict.setDouble(msg->remainjade(), "remainJade");
  dict.setDict(msgToJson_MsgRoleBuffInfos(&(msg->rolebuff())), "roleBuff");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_WorldbossCountDownResponse(const WorldbossCountDownResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->type(), "type");
  dict.setDouble(msg->surplustime(), "surplusTime");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_WorldbossEnterCityResponse(const WorldbossEnterCityResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->resurrectioncount(), "resurrectionCount");
  CCArray *arr_roleInCity = CCArray::createWithCapacity(msg->roleincity_size());
  for (int idx = 0; idx < msg->roleincity_size(); idx++) {
    const MsgRoleInMainCity& val = msg->roleincity(idx);
    arr_roleInCity->addObject(msgToJson_MsgRoleInMainCity(&val));
  }
  dict.setArray(arr_roleInCity, "roleInCity");
  dict.setDict(msgToJson_MsgRoleBuffInfos(&(msg->rolebuff())), "roleBuff");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_WorldbossEnterDungeonResponse(const WorldbossEnterDungeonResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_WorldbossGetAllConfigsResponse(const WorldbossGetAllConfigsResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  CCArray *arr_worldbosses = CCArray::createWithCapacity(msg->worldbosses_size());
  for (int idx = 0; idx < msg->worldbosses_size(); idx++) {
    const MsgWorldbossItem& val = msg->worldbosses(idx);
    arr_worldbosses->addObject(msgToJson_MsgWorldbossItem(&val));
  }
  dict.setArray(arr_worldbosses, "worldbosses");
  dict.setDouble(msg->bosstype(), "bossType");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_WorldbossQuitCityResponse(const WorldbossQuitCityResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_WorldbossQuitDungeonResponse(const WorldbossQuitDungeonResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_WorldbossRankResponse(const WorldbossRankResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  CCArray *arr_rankinfo = CCArray::createWithCapacity(msg->rankinfo_size());
  for (int idx = 0; idx < msg->rankinfo_size(); idx++) {
    const MsgWorldbossRankInfo& val = msg->rankinfo(idx);
    arr_rankinfo->addObject(msgToJson_MsgWorldbossRankInfo(&val));
  }
  dict.setArray(arr_rankinfo, "rankinfo");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_WorldbossRankBroadcast(const WorldbossRankBroadcast *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  CCArray *arr_rankinfo = CCArray::createWithCapacity(msg->rankinfo_size());
  for (int idx = 0; idx < msg->rankinfo_size(); idx++) {
    const MsgWorldbossRankInfo& val = msg->rankinfo(idx);
    arr_rankinfo->addObject(msgToJson_MsgWorldbossRankInfo(&val));
  }
  dict.setArray(arr_rankinfo, "rankinfo");
  dict.setDouble(msg->bosstype(), "bossType");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_WorldbossResurrectionResponse(const WorldbossResurrectionResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->remaingold(), "remainGold");
  dict.setDouble(msg->remainjade(), "remainJade");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_WorldbossRewardTipBroadcast(const WorldbossRewardTipBroadcast *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->alldamage(), "allDamage");
  dict.setDouble(msg->rank(), "rank");
  dict.setDouble(msg->finalattack(), "finalAttack");
  dict.setDict(msgToJson_MsgGiftInfo(&(msg->rewardresponse())), "rewardResponse");
  dict.setDouble(msg->bosstype(), "bossType");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_WorldbossTimeOutBroadcast(const WorldbossTimeOutBroadcast *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->bosstype(), "bossType");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_YijunbossEndBroadcast(const YijunbossEndBroadcast *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->bossid(), "bossId");
  dict.setDouble(msg->bossconfigid(), "bossConfigId");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_YijunbossInfoResponse(const YijunbossInfoResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->remaintimes(), "remainTimes");
  dict.setDouble(msg->maxtimes(), "maxTimes");
  dict.setDouble(msg->endtime(), "endTime");
  dict.setDouble(msg->bossid(), "bossId");
  dict.setDouble(msg->bossconfigid(), "bossConfigId");
  dict.setDouble(msg->bossstatus(), "bossStatus");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_YijunbossRankResponse(const YijunbossRankResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  CCArray *arr_rankinfo = CCArray::createWithCapacity(msg->rankinfo_size());
  for (int idx = 0; idx < msg->rankinfo_size(); idx++) {
    const MsgWorldbossRankInfo& val = msg->rankinfo(idx);
    arr_rankinfo->addObject(msgToJson_MsgWorldbossRankInfo(&val));
  }
  dict.setArray(arr_rankinfo, "rankinfo");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_YijunbossRankBroadcast(const YijunbossRankBroadcast *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  CCArray *arr_rankinfo = CCArray::createWithCapacity(msg->rankinfo_size());
  for (int idx = 0; idx < msg->rankinfo_size(); idx++) {
    const MsgWorldbossRankInfo& val = msg->rankinfo(idx);
    arr_rankinfo->addObject(msgToJson_MsgWorldbossRankInfo(&val));
  }
  dict.setArray(arr_rankinfo, "rankinfo");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_YijunbossStartResponse(const YijunbossStartResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->endtime(), "endTime");
  dict.setDouble(msg->bossid(), "bossId");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_YijunbossStartBroadcast(const YijunbossStartBroadcast *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->bossid(), "bossId");
  dict.setDouble(msg->bossconfigid(), "bossConfigId");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_ApproveApplicationResponse(const ApproveApplicationResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_ContributeYijunResponse(const ContributeYijunResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_CreateYijunResponse(const CreateYijunResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->yijunid(), "yijunID");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_DemoteGeneralResponse(const DemoteGeneralResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_DismissYijunResponse(const DismissYijunResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_ExitYijunResponse(const ExitYijunResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_GetApplicationsResponse(const GetApplicationsResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  CCArray *arr_application = CCArray::createWithCapacity(msg->application_size());
  for (int idx = 0; idx < msg->application_size(); idx++) {
    const MsgYijunApplication& val = msg->application(idx);
    arr_application->addObject(msgToJson_MsgYijunApplication(&val));
  }
  dict.setArray(arr_application, "application");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_GetContributionsResponse(const GetContributionsResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  CCArray *arr_contribution = CCArray::createWithCapacity(msg->contribution_size());
  for (int idx = 0; idx < msg->contribution_size(); idx++) {
    const MsgYijunContribution& val = msg->contribution(idx);
    arr_contribution->addObject(msgToJson_MsgYijunContribution(&val));
  }
  dict.setArray(arr_contribution, "contribution");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_GetPrayListResponse(const GetPrayListResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  CCArray *arr_pray = CCArray::createWithCapacity(msg->pray_size());
  for (int idx = 0; idx < msg->pray_size(); idx++) {
    const MsgYijunPray& val = msg->pray(idx);
    arr_pray->addObject(msgToJson_MsgYijunPray(&val));
  }
  dict.setArray(arr_pray, "pray");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_GetYijunByPageResponse(const GetYijunByPageResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->myyijunid(), "myYijunID");
  dict.setDouble(msg->consumegold(), "consumeGold");
  dict.setDouble(msg->yijuncapturelasttime(), "yijunCaptureLastTime");
  dict.setDouble(msg->pageno(), "pageNo");
  dict.setDouble(msg->spycount(), "spyCount");
  dict.setDouble(msg->capturecount(), "captureCount");
  dict.setDouble(msg->captureyijunid(), "captureYijunId");
  dict.setDouble(msg->nextenteryijuntime(), "nextEnterYijunTime");
  CCArray *arr_yijun = CCArray::createWithCapacity(msg->yijun_size());
  for (int idx = 0; idx < msg->yijun_size(); idx++) {
    const MsgYijun& val = msg->yijun(idx);
    arr_yijun->addObject(msgToJson_MsgYijun(&val));
  }
  dict.setArray(arr_yijun, "yijun");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_GetYijunCaptureInfoResponse(const GetYijunCaptureInfoResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setString(msg->recoders(), "recoders");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_GetYijunCaptureRoleResponse(const GetYijunCaptureRoleResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  CCArray *arr_captureRoles = CCArray::createWithCapacity(msg->captureroles_size());
  for (int idx = 0; idx < msg->captureroles_size(); idx++) {
    const MsgYijunCaptureRole& val = msg->captureroles(idx);
    arr_captureRoles->addObject(msgToJson_MsgYijunCaptureRole(&val));
  }
  dict.setArray(arr_captureRoles, "captureRoles");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_GetYijunDetailResponse(const GetYijunDetailResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDict(msgToJson_MsgYijun(&(msg->yijun())), "yijun");
  dict.setDouble(msg->contribution(), "contribution");
  dict.setDouble(msg->praycount(), "prayCount");
  CCArray *arr_building = CCArray::createWithCapacity(msg->building_size());
  for (int idx = 0; idx < msg->building_size(); idx++) {
    const MsgRoleYijunBuilding& val = msg->building(idx);
    arr_building->addObject(msgToJson_MsgRoleYijunBuilding(&val));
  }
  dict.setArray(arr_building, "building");
  CCArray *arr_skill = CCArray::createWithCapacity(msg->skill_size());
  for (int idx = 0; idx < msg->skill_size(); idx++) {
    const MsgRoleYijunSkill& val = msg->skill(idx);
    arr_skill->addObject(msgToJson_MsgRoleYijunSkill(&val));
  }
  dict.setArray(arr_skill, "skill");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_GetYijunMembersResponse(const GetYijunMembersResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  CCArray *arr_member = CCArray::createWithCapacity(msg->member_size());
  for (int idx = 0; idx < msg->member_size(); idx++) {
    const MsgYijunMember& val = msg->member(idx);
    arr_member->addObject(msgToJson_MsgYijunMember(&val));
  }
  dict.setArray(arr_member, "member");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_KickMemberResponse(const KickMemberResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_LevelUpYijunResponse(const LevelUpYijunResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_LevelUpYijunBuildingResponse(const LevelUpYijunBuildingResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_LevelUpYijunSkillResponse(const LevelUpYijunSkillResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_PrayYijunResponse(const PrayYijunResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_PromoteGeneralResponse(const PromoteGeneralResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_PublishNoticeResponse(const PublishNoticeResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_RejectApplicationResponse(const RejectApplicationResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_SendApplicationResponse(const SendApplicationResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_SendYijunCaptureAttackResponse(const SendYijunCaptureAttackResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_SendYijunCaptureDefenseResponse(const SendYijunCaptureDefenseResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_SendYijunDefenseResponse(const SendYijunDefenseResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_SpyYijunResponse(const SpyYijunResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->weathpd(), "weathPD");
  dict.setDouble(msg->consumegold(), "consumeGold");
  dict.setDouble(msg->gold(), "gold");
  dict.setDouble(msg->jade(), "jade");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_TransferMarshalResponse(const TransferMarshalResponse *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_ApproveAppBroadcast(const ApproveAppBroadcast *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->adminid(), "adminID");
  dict.setDouble(msg->roleid(), "roleID");
  dict.setString(msg->rolename(), "roleName");
  dict.setDouble(msg->yijunid(), "yijunID");
  dict.setString(msg->yijunname(), "yijunName");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_PromoteGeneralBroadcast(const PromoteGeneralBroadcast *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->adminid(), "adminID");
  dict.setString(msg->adminname(), "adminName");
  dict.setDouble(msg->roleid(), "roleID");
  dict.setString(msg->rolename(), "roleName");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_DismissYijunBroadcast(const DismissYijunBroadcast *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_TransferMarshalBroadcast(const TransferMarshalBroadcast *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->adminid(), "adminID");
  dict.setString(msg->adminname(), "adminName");
  dict.setDouble(msg->roleid(), "roleID");
  dict.setString(msg->rolename(), "roleName");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_LevelUpYijunBroadcast(const LevelUpYijunBroadcast *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->adminid(), "adminID");
  dict.setString(msg->yijunname(), "yijunName");
  dict.setDouble(msg->yijunlevel(), "yijunLevel");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_LevelUpYijunBuildingBroadcast(const LevelUpYijunBuildingBroadcast *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setString(msg->adminname(), "adminName");
  dict.setDouble(msg->buildingid(), "buildingId");
  dict.setDouble(msg->buildinglevel(), "buildingLevel");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_SendAppBroadcast(const SendAppBroadcast *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setString(msg->rolename(), "roleName");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_DemoteGeneralBroadcast(const DemoteGeneralBroadcast *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->adminid(), "adminID");
  dict.setString(msg->adminname(), "adminName");
  dict.setDouble(msg->roleid(), "roleID");
  dict.setString(msg->rolename(), "roleName");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_KickMemberBroadcast(const KickMemberBroadcast *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->adminid(), "adminID");
  dict.setString(msg->adminname(), "adminName");
  dict.setDouble(msg->roleid(), "roleID");
  dict.setString(msg->rolename(), "roleName");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_ExitYijunBroadcast(const ExitYijunBroadcast *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setString(msg->rolename(), "roleName");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_SendYijunCaptureBroadcast(const SendYijunCaptureBroadcast *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  return dict.getCCDictionary();
}
CCDictionary* msgToJson_SendYijunCaptureResultBroadcast(const SendYijunCaptureResultBroadcast *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->result(), "result");
  dict.setDouble(msg->weathepd(), "weathePD");
  dict.setString(msg->rolename(), "roleName");
  dict.setDouble(msg->roleid(), "roleID");
  return dict.getCCDictionary();
}
// DTO
void jsonToDto_MsgAchievementInfoData(CCDictionary *json, MsgAchievementInfoData *msg) {
  SGDictionary dict(json);
  msg->set_type((uint32) dict.getDouble("type"));
  msg->set_progress((uint32) dict.getDouble("progress"));
  msg->set_count((uint32) dict.getDouble("count"));
}
CCDictionary* msgToJson_MsgAchievementInfoData(const MsgAchievementInfoData *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->type(), "type");
  dict.setDouble(msg->progress(), "progress");
  dict.setDouble(msg->count(), "count");
  return dict.getCCDictionary();
}
void jsonToDto_MsgAchievementTitleInfoData(CCDictionary *json, MsgAchievementTitleInfoData *msg) {
  SGDictionary dict(json);
  msg->set_id((uint32) dict.getDouble("id"));
}
CCDictionary* msgToJson_MsgAchievementTitleInfoData(const MsgAchievementTitleInfoData *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->id(), "id");
  return dict.getCCDictionary();
}
void jsonToDto_MsgActivityRewardRole(CCDictionary *json, MsgActivityRewardRole *msg) {
  SGDictionary dict(json);
  msg->set_rewardtype((uint32) dict.getDouble("rewardType"));
  msg->set_rewardrank((uint32) dict.getDouble("rewardRank"));
  msg->set_rolename(dict.getCString("roleName"));
  msg->set_profession((uint32) dict.getDouble("profession"));
}
CCDictionary* msgToJson_MsgActivityRewardRole(const MsgActivityRewardRole *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->rewardtype(), "rewardType");
  dict.setDouble(msg->rewardrank(), "rewardRank");
  dict.setString(msg->rolename(), "roleName");
  dict.setDouble(msg->profession(), "profession");
  return dict.getCCDictionary();
}
void jsonToDto_MsgGambleCardItem(CCDictionary *json, MsgGambleCardItem *msg) {
  SGDictionary dict(json);
  msg->set_key((uint32) dict.getDouble("key"));
  msg->set_value((uint64) dict.getDouble("value"));
}
CCDictionary* msgToJson_MsgGambleCardItem(const MsgGambleCardItem *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->key(), "key");
  dict.setDouble(msg->value(), "value");
  return dict.getCCDictionary();
}
void jsonToDto_MsgGiftInfo(CCDictionary *json, MsgGiftInfo *msg) {
  SGDictionary dict(json);
  msg->set_copper((uint64) dict.getDouble("copper"));
  msg->set_gold((uint32) dict.getDouble("gold"));
  msg->set_honour((uint64) dict.getDouble("honour"));
  msg->set_power((uint32) dict.getDouble("power"));
  msg->set_goldticket((uint32) dict.getDouble("goldTicket"));
  msg->set_silverticket((uint32) dict.getDouble("silverTicket"));
  msg->set_copperticket((uint32) dict.getDouble("copperTicket"));
  msg->set_jade((uint32) dict.getDouble("jade"));
  msg->set_friendship((uint32) dict.getDouble("friendShip"));
  msg->set_roleexp((uint64) dict.getDouble("roleExp"));
  msg->set_personcontribution((uint64) dict.getDouble("personContribution"));
  msg->set_yijunwealthpd((uint64) dict.getDouble("yijunWealthPD"));
  CCArray *arr_roleBagGoods = dict.getArray("roleBagGoods");
  CCObject *tmp_roleBagGoodsItem;
  CCARRAY_FOREACH(arr_roleBagGoods, tmp_roleBagGoodsItem) {
    MsgRoleBagGoods *tmp_roleBagGoods = msg->add_rolebaggoods();
    jsonToDto_MsgRoleBagGoods(dynamic_cast<CCDictionary *>(tmp_roleBagGoodsItem), tmp_roleBagGoods);
  }
  CCArray *arr_roleGemBagGoods = dict.getArray("roleGemBagGoods");
  CCObject *tmp_roleGemBagGoodsItem;
  CCARRAY_FOREACH(arr_roleGemBagGoods, tmp_roleGemBagGoodsItem) {
    MsgRoleGemBagGoods *tmp_roleGemBagGoods = msg->add_rolegembaggoods();
    jsonToDto_MsgRoleGemBagGoods(dynamic_cast<CCDictionary *>(tmp_roleGemBagGoodsItem), tmp_roleGemBagGoods);
  }
  CCArray *arr_guaxiangGoods = dict.getArray("guaxiangGoods");
  CCObject *tmp_guaxiangGoodsItem;
  CCARRAY_FOREACH(arr_guaxiangGoods, tmp_guaxiangGoodsItem) {
    MsgGuaxiangGoods *tmp_guaxiangGoods = msg->add_guaxianggoods();
    jsonToDto_MsgGuaxiangGoods(dynamic_cast<CCDictionary *>(tmp_guaxiangGoodsItem), tmp_guaxiangGoods);
  }
  CCArray *arr_petList = dict.getArray("petList");
  CCObject *tmp_petListItem;
  CCARRAY_FOREACH(arr_petList, tmp_petListItem) {
    MsgPet *tmp_petList = msg->add_petlist();
    jsonToDto_MsgPet(dynamic_cast<CCDictionary *>(tmp_petListItem), tmp_petList);
  }
}
CCDictionary* msgToJson_MsgGiftInfo(const MsgGiftInfo *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->copper(), "copper");
  dict.setDouble(msg->gold(), "gold");
  dict.setDouble(msg->honour(), "honour");
  dict.setDouble(msg->power(), "power");
  dict.setDouble(msg->goldticket(), "goldTicket");
  dict.setDouble(msg->silverticket(), "silverTicket");
  dict.setDouble(msg->copperticket(), "copperTicket");
  dict.setDouble(msg->jade(), "jade");
  dict.setDouble(msg->friendship(), "friendShip");
  dict.setDouble(msg->roleexp(), "roleExp");
  dict.setDouble(msg->personcontribution(), "personContribution");
  dict.setDouble(msg->yijunwealthpd(), "yijunWealthPD");
  CCArray *arr_roleBagGoods = CCArray::createWithCapacity(msg->rolebaggoods_size());
  for (int idx = 0; idx < msg->rolebaggoods_size(); idx++) {
    const MsgRoleBagGoods& val = msg->rolebaggoods(idx);
    arr_roleBagGoods->addObject(msgToJson_MsgRoleBagGoods(&val));
  }
  dict.setArray(arr_roleBagGoods, "roleBagGoods");
  CCArray *arr_roleGemBagGoods = CCArray::createWithCapacity(msg->rolegembaggoods_size());
  for (int idx = 0; idx < msg->rolegembaggoods_size(); idx++) {
    const MsgRoleGemBagGoods& val = msg->rolegembaggoods(idx);
    arr_roleGemBagGoods->addObject(msgToJson_MsgRoleGemBagGoods(&val));
  }
  dict.setArray(arr_roleGemBagGoods, "roleGemBagGoods");
  CCArray *arr_guaxiangGoods = CCArray::createWithCapacity(msg->guaxianggoods_size());
  for (int idx = 0; idx < msg->guaxianggoods_size(); idx++) {
    const MsgGuaxiangGoods& val = msg->guaxianggoods(idx);
    arr_guaxiangGoods->addObject(msgToJson_MsgGuaxiangGoods(&val));
  }
  dict.setArray(arr_guaxiangGoods, "guaxiangGoods");
  CCArray *arr_petList = CCArray::createWithCapacity(msg->petlist_size());
  for (int idx = 0; idx < msg->petlist_size(); idx++) {
    const MsgPet& val = msg->petlist(idx);
    arr_petList->addObject(msgToJson_MsgPet(&val));
  }
  dict.setArray(arr_petList, "petList");
  return dict.getCCDictionary();
}
void jsonToDto_MsgKungFuInfo(CCDictionary *json, MsgKungFuInfo *msg) {
  SGDictionary dict(json);
  msg->set_kungfumainid((uint32) dict.getDouble("kungfuMainID"));
  msg->set_kungfuslotnum((uint32) dict.getDouble("kungfuSlotNum"));
  msg->set_equipkungfuid(dict.getCString("equipKungfuId"));
  MsgOpenKungfuSlotCondition *dto_openSlotCondition = new MsgOpenKungfuSlotCondition();
  jsonToDto_MsgOpenKungfuSlotCondition(dict.getDict("openSlotCondition"), dto_openSlotCondition);
  msg->set_allocated_openslotcondition(dto_openSlotCondition);
  msg->set_openstatus((uint32) dict.getDouble("openStatus"));
  CCArray *arr_slotChildrenLevel = dict.getArray("slotChildrenLevel");
  CCObject *tmp_slotChildrenLevel;
  CCARRAY_FOREACH(arr_slotChildrenLevel, tmp_slotChildrenLevel) {
    double val = dynamic_cast<CCDouble *>(tmp_slotChildrenLevel)->getValue();
    msg->add_slotchildrenlevel(val);
  }
  CCArray *arr_slotChildrenProperty = dict.getArray("slotChildrenProperty");
  CCObject *tmp_slotChildrenProperty;
  CCARRAY_FOREACH(arr_slotChildrenProperty, tmp_slotChildrenProperty) {
    double val = dynamic_cast<CCDouble *>(tmp_slotChildrenProperty)->getValue();
    msg->add_slotchildrenproperty(val);
  }
}
CCDictionary* msgToJson_MsgKungFuInfo(const MsgKungFuInfo *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->kungfumainid(), "kungfuMainID");
  dict.setDouble(msg->kungfuslotnum(), "kungfuSlotNum");
  dict.setString(msg->equipkungfuid(), "equipKungfuId");
  dict.setDict(msgToJson_MsgOpenKungfuSlotCondition(&(msg->openslotcondition())), "openSlotCondition");
  dict.setDouble(msg->openstatus(), "openStatus");
  CCArray *arr_slotChildrenLevel = CCArray::createWithCapacity(msg->slotchildrenlevel_size());
  for (int idx = 0; idx < msg->slotchildrenlevel_size(); idx++) {
    double val = msg->slotchildrenlevel(idx);
    arr_slotChildrenLevel->addObject(CCDouble::create(val));
  }
  dict.setArray(arr_slotChildrenLevel, "slotChildrenLevel");
  CCArray *arr_slotChildrenProperty = CCArray::createWithCapacity(msg->slotchildrenproperty_size());
  for (int idx = 0; idx < msg->slotchildrenproperty_size(); idx++) {
    double val = msg->slotchildrenproperty(idx);
    arr_slotChildrenProperty->addObject(CCDouble::create(val));
  }
  dict.setArray(arr_slotChildrenProperty, "slotChildrenProperty");
  return dict.getCCDictionary();
}
void jsonToDto_MsgKungfuSkill(CCDictionary *json, MsgKungfuSkill *msg) {
  SGDictionary dict(json);
  msg->set_kungfuskillid((uint32) dict.getDouble("kungfuSkillID"));
  msg->set_ownernum((uint32) dict.getDouble("ownerNum"));
  msg->set_ownertotalnum((uint32) dict.getDouble("ownerTotalNum"));
  msg->set_level((uint32) dict.getDouble("level"));
  msg->set_star((uint32) dict.getDouble("star"));
}
CCDictionary* msgToJson_MsgKungfuSkill(const MsgKungfuSkill *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->kungfuskillid(), "kungfuSkillID");
  dict.setDouble(msg->ownernum(), "ownerNum");
  dict.setDouble(msg->ownertotalnum(), "ownerTotalNum");
  dict.setDouble(msg->level(), "level");
  dict.setDouble(msg->star(), "star");
  return dict.getCCDictionary();
}
void jsonToDto_MsgKungfuSlotChild(CCDictionary *json, MsgKungfuSlotChild *msg) {
  SGDictionary dict(json);
  msg->set_slotchildrenlevel((uint32) dict.getDouble("slotChildrenLevel"));
  msg->set_slotchildrenproperty((uint32) dict.getDouble("slotChildrenProperty"));
  msg->set_slotchildid((uint32) dict.getDouble("slotChildID"));
  MsgKungfuSkill *dto_msgKungfuSkill = new MsgKungfuSkill();
  jsonToDto_MsgKungfuSkill(dict.getDict("msgKungfuSkill"), dto_msgKungfuSkill);
  msg->set_allocated_msgkungfuskill(dto_msgKungfuSkill);
}
CCDictionary* msgToJson_MsgKungfuSlotChild(const MsgKungfuSlotChild *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->slotchildrenlevel(), "slotChildrenLevel");
  dict.setDouble(msg->slotchildrenproperty(), "slotChildrenProperty");
  dict.setDouble(msg->slotchildid(), "slotChildID");
  dict.setDict(msgToJson_MsgKungfuSkill(&(msg->msgkungfuskill())), "msgKungfuSkill");
  return dict.getCCDictionary();
}
void jsonToDto_MsgLeaderItembordData(CCDictionary *json, MsgLeaderItembordData *msg) {
  SGDictionary dict(json);
  msg->set_rank((uint32) dict.getDouble("rank"));
  msg->set_rolename(dict.getCString("roleName"));
  msg->set_rankvalue((uint64) dict.getDouble("rankValue"));
}
CCDictionary* msgToJson_MsgLeaderItembordData(const MsgLeaderItembordData *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->rank(), "rank");
  dict.setString(msg->rolename(), "roleName");
  dict.setDouble(msg->rankvalue(), "rankValue");
  return dict.getCCDictionary();
}
void jsonToDto_MsgOpenKungfuSlotCondition(CCDictionary *json, MsgOpenKungfuSlotCondition *msg) {
  SGDictionary dict(json);
  msg->set_subneedjade(dict.getCString("subneedjade"));
  msg->set_subneedviplv(dict.getCString("subneedviplv"));
  msg->set_subneedlv(dict.getCString("subneedlv"));
}
CCDictionary* msgToJson_MsgOpenKungfuSlotCondition(const MsgOpenKungfuSlotCondition *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setString(msg->subneedjade(), "subneedjade");
  dict.setString(msg->subneedviplv(), "subneedviplv");
  dict.setString(msg->subneedlv(), "subneedlv");
  return dict.getCCDictionary();
}
void jsonToDto_MsgPet(CCDictionary *json, MsgPet *msg) {
  SGDictionary dict(json);
  msg->set_petid((uint64) dict.getDouble("petID"));
  msg->set_star((uint32) dict.getDouble("star"));
  msg->set_level((uint32) dict.getDouble("level"));
  msg->set_exp((uint32) dict.getDouble("exp"));
  msg->set_attrid((uint32) dict.getDouble("attrID"));
  msg->set_status((uint32) dict.getDouble("status"));
  msg->set_roleid((uint64) dict.getDouble("roleID"));
}
CCDictionary* msgToJson_MsgPet(const MsgPet *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->petid(), "petID");
  dict.setDouble(msg->star(), "star");
  dict.setDouble(msg->level(), "level");
  dict.setDouble(msg->exp(), "exp");
  dict.setDouble(msg->attrid(), "attrID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->roleid(), "roleID");
  return dict.getCCDictionary();
}
void jsonToDto_MsgPetBornEgg(CCDictionary *json, MsgPetBornEgg *msg) {
  SGDictionary dict(json);
  msg->set_id((uint64) dict.getDouble("id"));
  msg->set_status((uint32) dict.getDouble("status"));
  msg->set_slot((uint32) dict.getDouble("slot"));
  msg->set_attrid((uint32) dict.getDouble("attrID"));
}
CCDictionary* msgToJson_MsgPetBornEgg(const MsgPetBornEgg *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->id(), "id");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->slot(), "slot");
  dict.setDouble(msg->attrid(), "attrID");
  return dict.getCCDictionary();
}
void jsonToDto_MsgPetCooldown(CCDictionary *json, MsgPetCooldown *msg) {
  SGDictionary dict(json);
  msg->set_type((uint32) dict.getDouble("type"));
  msg->set_starttime((uint64) dict.getDouble("startTime"));
  msg->set_endtime((uint64) dict.getDouble("endTime"));
  msg->set_status((uint32) dict.getDouble("status"));
  msg->set_petid((uint64) dict.getDouble("petID"));
}
CCDictionary* msgToJson_MsgPetCooldown(const MsgPetCooldown *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->type(), "type");
  dict.setDouble(msg->starttime(), "startTime");
  dict.setDouble(msg->endtime(), "endTime");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->petid(), "petID");
  return dict.getCCDictionary();
}
void jsonToDto_MsgRechargeInfo(CCDictionary *json, MsgRechargeInfo *msg) {
  SGDictionary dict(json);
  msg->set_id((uint32) dict.getDouble("id"));
  msg->set_jade((uint32) dict.getDouble("jade"));
  msg->set_gold((uint32) dict.getDouble("gold"));
  msg->set_status((uint32) dict.getDouble("status"));
  msg->set_iconid((uint32) dict.getDouble("iconID"));
  msg->set_jadeiconid((uint32) dict.getDouble("jadeIconID"));
}
CCDictionary* msgToJson_MsgRechargeInfo(const MsgRechargeInfo *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->id(), "id");
  dict.setDouble(msg->jade(), "jade");
  dict.setDouble(msg->gold(), "gold");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->iconid(), "iconID");
  dict.setDouble(msg->jadeiconid(), "jadeIconID");
  return dict.getCCDictionary();
}
void jsonToDto_MsgResource(CCDictionary *json, MsgResource *msg) {
  SGDictionary dict(json);
  msg->set_copper((uint64) dict.getDouble("copper"));
  msg->set_gold((uint32) dict.getDouble("gold"));
  CCArray *arr_roleBagGoods = dict.getArray("roleBagGoods");
  CCObject *tmp_roleBagGoodsItem;
  CCARRAY_FOREACH(arr_roleBagGoods, tmp_roleBagGoodsItem) {
    MsgRoleBagGoods *tmp_roleBagGoods = msg->add_rolebaggoods();
    jsonToDto_MsgRoleBagGoods(dynamic_cast<CCDictionary *>(tmp_roleBagGoodsItem), tmp_roleBagGoods);
  }
}
CCDictionary* msgToJson_MsgResource(const MsgResource *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->copper(), "copper");
  dict.setDouble(msg->gold(), "gold");
  CCArray *arr_roleBagGoods = CCArray::createWithCapacity(msg->rolebaggoods_size());
  for (int idx = 0; idx < msg->rolebaggoods_size(); idx++) {
    const MsgRoleBagGoods& val = msg->rolebaggoods(idx);
    arr_roleBagGoods->addObject(msgToJson_MsgRoleBagGoods(&val));
  }
  dict.setArray(arr_roleBagGoods, "roleBagGoods");
  return dict.getCCDictionary();
}
void jsonToDto_MsgRoleData(CCDictionary *json, MsgRoleData *msg) {
  SGDictionary dict(json);
  msg->set_roleid((uint64) dict.getDouble("roleID"));
  msg->set_rolename(dict.getCString("roleName"));
  msg->set_rolelevel((uint32) dict.getDouble("roleLevel"));
  msg->set_roleprofession((RoleProfession) dict.getDouble("roleProfession"));
  msg->set_mapid((uint32) dict.getDouble("mapID"));
  msg->set_copper((uint64) dict.getDouble("copper"));
  msg->set_gold((uint32) dict.getDouble("gold"));
  msg->set_jade((uint32) dict.getDouble("jade"));
  msg->set_power((uint32) dict.getDouble("power"));
  msg->set_viplevel((uint32) dict.getDouble("vipLevel"));
  msg->set_credit((uint64) dict.getDouble("credit"));
  msg->set_honour((uint64) dict.getDouble("honour"));
  CCArray *arr_vipRewarded = dict.getArray("vipRewarded");
  CCObject *tmp_vipRewarded;
  CCARRAY_FOREACH(arr_vipRewarded, tmp_vipRewarded) {
    double val = dynamic_cast<CCDouble *>(tmp_vipRewarded)->getValue();
    msg->add_viprewarded(val);
  }
  msg->set_recharge((uint32) dict.getDouble("recharge"));
  msg->set_yijunid((uint64) dict.getDouble("yijunID"));
  msg->set_exp((uint64) dict.getDouble("exp"));
  msg->set_jungong((uint64) dict.getDouble("jungong"));
  msg->set_buypowercounttoday((uint32) dict.getDouble("buyPowerCountToday"));
  msg->set_arenarolerank((uint64) dict.getDouble("arenaRoleRank"));
  msg->set_fight((uint32) dict.getDouble("fight"));
  msg->set_goldticket((uint32) dict.getDouble("goldTicket"));
  msg->set_silverticket((uint32) dict.getDouble("silverTicket"));
  msg->set_copperticket((uint32) dict.getDouble("copperTicket"));
  msg->set_friendship((uint32) dict.getDouble("friendShip"));
  msg->set_curtitle((uint32) dict.getDouble("curtitle"));
  msg->set_vipexperiencecardlevel((uint32) dict.getDouble("vipExperienceCardLevel"));
}
CCDictionary* msgToJson_MsgRoleData(const MsgRoleData *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->roleid(), "roleID");
  dict.setString(msg->rolename(), "roleName");
  dict.setDouble(msg->rolelevel(), "roleLevel");
  dict.setDouble(msg->roleprofession(), "roleProfession");
  dict.setDouble(msg->mapid(), "mapID");
  dict.setDouble(msg->copper(), "copper");
  dict.setDouble(msg->gold(), "gold");
  dict.setDouble(msg->jade(), "jade");
  dict.setDouble(msg->power(), "power");
  dict.setDouble(msg->viplevel(), "vipLevel");
  dict.setDouble(msg->credit(), "credit");
  dict.setDouble(msg->honour(), "honour");
  CCArray *arr_vipRewarded = CCArray::createWithCapacity(msg->viprewarded_size());
  for (int idx = 0; idx < msg->viprewarded_size(); idx++) {
    double val = msg->viprewarded(idx);
    arr_vipRewarded->addObject(CCDouble::create(val));
  }
  dict.setArray(arr_vipRewarded, "vipRewarded");
  dict.setDouble(msg->recharge(), "recharge");
  dict.setDouble(msg->yijunid(), "yijunID");
  dict.setDouble(msg->exp(), "exp");
  dict.setDouble(msg->jungong(), "jungong");
  dict.setDouble(msg->buypowercounttoday(), "buyPowerCountToday");
  dict.setDouble(msg->arenarolerank(), "arenaRoleRank");
  dict.setDouble(msg->fight(), "fight");
  dict.setDouble(msg->goldticket(), "goldTicket");
  dict.setDouble(msg->silverticket(), "silverTicket");
  dict.setDouble(msg->copperticket(), "copperTicket");
  dict.setDouble(msg->friendship(), "friendShip");
  dict.setDouble(msg->curtitle(), "curtitle");
  dict.setDouble(msg->vipexperiencecardlevel(), "vipExperienceCardLevel");
  return dict.getCCDictionary();
}
void jsonToDto_MsgRoleBagGoods(CCDictionary *json, MsgRoleBagGoods *msg) {
  SGDictionary dict(json);
  msg->set_autoincrid((uint64) dict.getDouble("autoIncrID"));
  msg->set_attrid((uint32) dict.getDouble("attrID"));
  msg->set_count((uint32) dict.getDouble("count"));
  msg->set_exp((uint32) dict.getDouble("exp"));
  msg->set_level((uint32) dict.getDouble("level"));
}
CCDictionary* msgToJson_MsgRoleBagGoods(const MsgRoleBagGoods *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->autoincrid(), "autoIncrID");
  dict.setDouble(msg->attrid(), "attrID");
  dict.setDouble(msg->count(), "count");
  dict.setDouble(msg->exp(), "exp");
  dict.setDouble(msg->level(), "level");
  return dict.getCCDictionary();
}
void jsonToDto_MsgRoleBasicInfoData(CCDictionary *json, MsgRoleBasicInfoData *msg) {
  SGDictionary dict(json);
  msg->set_roleid((uint64) dict.getDouble("roleID"));
  msg->set_rolename(dict.getCString("roleName"));
  msg->set_rolelevel((uint32) dict.getDouble("roleLevel"));
  msg->set_roleprofession((RoleProfession) dict.getDouble("roleProfession"));
  msg->set_viplevel((uint32) dict.getDouble("vipLevel"));
}
CCDictionary* msgToJson_MsgRoleBasicInfoData(const MsgRoleBasicInfoData *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->roleid(), "roleID");
  dict.setString(msg->rolename(), "roleName");
  dict.setDouble(msg->rolelevel(), "roleLevel");
  dict.setDouble(msg->roleprofession(), "roleProfession");
  dict.setDouble(msg->viplevel(), "vipLevel");
  return dict.getCCDictionary();
}
void jsonToDto_MsgRoleBuffInfos(CCDictionary *json, MsgRoleBuffInfos *msg) {
  SGDictionary dict(json);
  msg->set_buffid((uint32) dict.getDouble("buffID"));
  msg->set_starttime((uint64) dict.getDouble("startTime"));
  msg->set_buffcount((uint32) dict.getDouble("buffCount"));
}
CCDictionary* msgToJson_MsgRoleBuffInfos(const MsgRoleBuffInfos *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->buffid(), "buffID");
  dict.setDouble(msg->starttime(), "startTime");
  dict.setDouble(msg->buffcount(), "buffCount");
  return dict.getCCDictionary();
}
void jsonToDto_MsgRoleCooldown(CCDictionary *json, MsgRoleCooldown *msg) {
  SGDictionary dict(json);
  msg->set_type((uint32) dict.getDouble("type"));
  msg->set_starttime((uint64) dict.getDouble("startTime"));
  msg->set_endtime((uint64) dict.getDouble("endTime"));
  msg->set_status((uint32) dict.getDouble("status"));
}
CCDictionary* msgToJson_MsgRoleCooldown(const MsgRoleCooldown *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->type(), "type");
  dict.setDouble(msg->starttime(), "startTime");
  dict.setDouble(msg->endtime(), "endTime");
  dict.setDouble(msg->status(), "status");
  return dict.getCCDictionary();
}
void jsonToDto_MsgDungeonReward(CCDictionary *json, MsgDungeonReward *msg) {
  SGDictionary dict(json);
  msg->set_copper((uint64) dict.getDouble("copper"));
  msg->set_power((uint32) dict.getDouble("power"));
  msg->set_jugong((uint64) dict.getDouble("jugong"));
  msg->set_exp((uint64) dict.getDouble("exp"));
  msg->set_star((uint32) dict.getDouble("star"));
}
CCDictionary* msgToJson_MsgDungeonReward(const MsgDungeonReward *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->copper(), "copper");
  dict.setDouble(msg->power(), "power");
  dict.setDouble(msg->jugong(), "jugong");
  dict.setDouble(msg->exp(), "exp");
  dict.setDouble(msg->star(), "star");
  return dict.getCCDictionary();
}
void jsonToDto_MsgRoleDungeonStage(CCDictionary *json, MsgRoleDungeonStage *msg) {
  SGDictionary dict(json);
  msg->set_stageid((uint32) dict.getDouble("stageId"));
  msg->set_star((uint32) dict.getDouble("star"));
}
CCDictionary* msgToJson_MsgRoleDungeonStage(const MsgRoleDungeonStage *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->stageid(), "stageId");
  dict.setDouble(msg->star(), "star");
  return dict.getCCDictionary();
}
void jsonToDto_MsgRoleFriendData(CCDictionary *json, MsgRoleFriendData *msg) {
  SGDictionary dict(json);
  msg->set_autoincrid((uint64) dict.getDouble("autoIncrID"));
  msg->set_friendid((uint64) dict.getDouble("friendID"));
  msg->set_friendname(dict.getCString("friendName"));
  msg->set_friendprofession((RoleProfession) dict.getDouble("friendProfession"));
  msg->set_friendlevel((uint32) dict.getDouble("friendLevel"));
  msg->set_yijunname(dict.getCString("yijunName"));
  msg->set_status((uint32) dict.getDouble("status"));
}
CCDictionary* msgToJson_MsgRoleFriendData(const MsgRoleFriendData *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->autoincrid(), "autoIncrID");
  dict.setDouble(msg->friendid(), "friendID");
  dict.setString(msg->friendname(), "friendName");
  dict.setDouble(msg->friendprofession(), "friendProfession");
  dict.setDouble(msg->friendlevel(), "friendLevel");
  dict.setString(msg->yijunname(), "yijunName");
  dict.setDouble(msg->status(), "status");
  return dict.getCCDictionary();
}
void jsonToDto_MsgRoleFriendAprrove(CCDictionary *json, MsgRoleFriendAprrove *msg) {
  SGDictionary dict(json);
  msg->set_roleid((uint64) dict.getDouble("roleID"));
  msg->set_rolename(dict.getCString("roleName"));
  msg->set_level((uint32) dict.getDouble("level"));
  msg->set_proffesion((uint32) dict.getDouble("proffesion"));
}
CCDictionary* msgToJson_MsgRoleFriendAprrove(const MsgRoleFriendAprrove *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->roleid(), "roleID");
  dict.setString(msg->rolename(), "roleName");
  dict.setDouble(msg->level(), "level");
  dict.setDouble(msg->proffesion(), "proffesion");
  return dict.getCCDictionary();
}
void jsonToDto_MsgGambleCardReward(CCDictionary *json, MsgGambleCardReward *msg) {
  SGDictionary dict(json);
  msg->set_copper((uint64) dict.getDouble("copper"));
  msg->set_honour((uint64) dict.getDouble("honour"));
  MsgRoleGemBagGoods *dto_gem = new MsgRoleGemBagGoods();
  jsonToDto_MsgRoleGemBagGoods(dict.getDict("gem"), dto_gem);
  msg->set_allocated_gem(dto_gem);
  MsgRoleBagGoods *dto_bagGoods = new MsgRoleBagGoods();
  jsonToDto_MsgRoleBagGoods(dict.getDict("bagGoods"), dto_bagGoods);
  msg->set_allocated_baggoods(dto_bagGoods);
}
CCDictionary* msgToJson_MsgGambleCardReward(const MsgGambleCardReward *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->copper(), "copper");
  dict.setDouble(msg->honour(), "honour");
  dict.setDict(msgToJson_MsgRoleGemBagGoods(&(msg->gem())), "gem");
  dict.setDict(msgToJson_MsgRoleBagGoods(&(msg->baggoods())), "bagGoods");
  return dict.getCCDictionary();
}
void jsonToDto_MsgRoleGemBagGoods(CCDictionary *json, MsgRoleGemBagGoods *msg) {
  SGDictionary dict(json);
  msg->set_autoincrid((uint64) dict.getDouble("autoIncrID"));
  msg->set_attrid((sint64) dict.getDouble("attrID"));
  msg->set_count((uint32) dict.getDouble("count"));
}
CCDictionary* msgToJson_MsgRoleGemBagGoods(const MsgRoleGemBagGoods *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->autoincrid(), "autoIncrID");
  dict.setDouble(msg->attrid(), "attrID");
  dict.setDouble(msg->count(), "count");
  return dict.getCCDictionary();
}
void jsonToDto_MsgGuaxiangGoods(CCDictionary *json, MsgGuaxiangGoods *msg) {
  SGDictionary dict(json);
  msg->set_autoincrid((uint64) dict.getDouble("autoIncrID"));
  msg->set_attrid((uint32) dict.getDouble("attrID"));
  msg->set_count((uint32) dict.getDouble("count"));
  msg->set_exp((uint32) dict.getDouble("exp"));
  msg->set_level((uint32) dict.getDouble("level"));
  msg->set_place((uint32) dict.getDouble("place"));
  msg->set_goodsstatus((GoodsStatus) dict.getDouble("goodsStatus"));
}
CCDictionary* msgToJson_MsgGuaxiangGoods(const MsgGuaxiangGoods *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->autoincrid(), "autoIncrID");
  dict.setDouble(msg->attrid(), "attrID");
  dict.setDouble(msg->count(), "count");
  dict.setDouble(msg->exp(), "exp");
  dict.setDouble(msg->level(), "level");
  dict.setDouble(msg->place(), "place");
  dict.setDouble(msg->goodsstatus(), "goodsStatus");
  return dict.getCCDictionary();
}
void jsonToDto_MsgRoleInMainCity(CCDictionary *json, MsgRoleInMainCity *msg) {
  SGDictionary dict(json);
  MsgRoleData *dto_basicInfo = new MsgRoleData();
  jsonToDto_MsgRoleData(dict.getDict("basicInfo"), dto_basicInfo);
  msg->set_allocated_basicinfo(dto_basicInfo);
  CCArray *arr_equipments = dict.getArray("equipments");
  CCObject *tmp_equipmentsItem;
  CCARRAY_FOREACH(arr_equipments, tmp_equipmentsItem) {
    MsgRoleBagGoods *tmp_equipments = msg->add_equipments();
    jsonToDto_MsgRoleBagGoods(dynamic_cast<CCDictionary *>(tmp_equipmentsItem), tmp_equipments);
  }
  CCArray *arr_pet = dict.getArray("pet");
  CCObject *tmp_petItem;
  CCARRAY_FOREACH(arr_pet, tmp_petItem) {
    MsgPet *tmp_pet = msg->add_pet();
    jsonToDto_MsgPet(dynamic_cast<CCDictionary *>(tmp_petItem), tmp_pet);
  }
}
CCDictionary* msgToJson_MsgRoleInMainCity(const MsgRoleInMainCity *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDict(msgToJson_MsgRoleData(&(msg->basicinfo())), "basicInfo");
  CCArray *arr_equipments = CCArray::createWithCapacity(msg->equipments_size());
  for (int idx = 0; idx < msg->equipments_size(); idx++) {
    const MsgRoleBagGoods& val = msg->equipments(idx);
    arr_equipments->addObject(msgToJson_MsgRoleBagGoods(&val));
  }
  dict.setArray(arr_equipments, "equipments");
  CCArray *arr_pet = CCArray::createWithCapacity(msg->pet_size());
  for (int idx = 0; idx < msg->pet_size(); idx++) {
    const MsgPet& val = msg->pet(idx);
    arr_pet->addObject(msgToJson_MsgPet(&val));
  }
  dict.setArray(arr_pet, "pet");
  return dict.getCCDictionary();
}
void jsonToDto_MsgKungfuProperties(CCDictionary *json, MsgKungfuProperties *msg) {
  SGDictionary dict(json);
  msg->set_physicalattack((uint32) dict.getDouble("physicalAttack"));
  msg->set_skillattack((uint32) dict.getDouble("skillAttack"));
  msg->set_magicattack((uint32) dict.getDouble("magicAttack"));
}
CCDictionary* msgToJson_MsgKungfuProperties(const MsgKungfuProperties *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->physicalattack(), "physicalAttack");
  dict.setDouble(msg->skillattack(), "skillAttack");
  dict.setDouble(msg->magicattack(), "magicAttack");
  return dict.getCCDictionary();
}
void jsonToDto_MsgRoleMail(CCDictionary *json, MsgRoleMail *msg) {
  SGDictionary dict(json);
  msg->set_id((uint64) dict.getDouble("id"));
  msg->set_tiltle(dict.getCString("tiltle"));
  msg->set_context(dict.getCString("context"));
  msg->set_kit(dict.getCString("kit"));
  msg->set_senderid((uint64) dict.getDouble("senderId"));
  msg->set_receiverid((uint64) dict.getDouble("receiverId"));
  msg->set_mailstatus((uint32) dict.getDouble("mailStatus"));
  msg->set_kitstatus((uint32) dict.getDouble("kitStatus"));
  msg->set_endtime((uint64) dict.getDouble("endTime"));
  msg->set_sendername(dict.getCString("senderName"));
  msg->set_receivername(dict.getCString("receiverName"));
  msg->set_havereward((uint32) dict.getDouble("haveReward"));
  msg->set_name(dict.getCString("name"));
  msg->set_starttime(dict.getCString("startTime"));
}
CCDictionary* msgToJson_MsgRoleMail(const MsgRoleMail *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->id(), "id");
  dict.setString(msg->tiltle(), "tiltle");
  dict.setString(msg->context(), "context");
  dict.setString(msg->kit(), "kit");
  dict.setDouble(msg->senderid(), "senderId");
  dict.setDouble(msg->receiverid(), "receiverId");
  dict.setDouble(msg->mailstatus(), "mailStatus");
  dict.setDouble(msg->kitstatus(), "kitStatus");
  dict.setDouble(msg->endtime(), "endTime");
  dict.setString(msg->sendername(), "senderName");
  dict.setString(msg->receivername(), "receiverName");
  dict.setDouble(msg->havereward(), "haveReward");
  dict.setString(msg->name(), "name");
  dict.setString(msg->starttime(), "startTime");
  return dict.getCCDictionary();
}
void jsonToDto_MsgRoleMission(CCDictionary *json, MsgRoleMission *msg) {
  SGDictionary dict(json);
  msg->set_autoincrid((uint64) dict.getDouble("autoIncrID"));
  msg->set_attrid((uint32) dict.getDouble("attrID"));
  msg->set_type((uint32) dict.getDouble("type"));
  msg->set_progress((uint32) dict.getDouble("progress"));
  msg->set_status((uint32) dict.getDouble("status"));
  msg->set_star((uint32) dict.getDouble("star"));
}
CCDictionary* msgToJson_MsgRoleMission(const MsgRoleMission *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->autoincrid(), "autoIncrID");
  dict.setDouble(msg->attrid(), "attrID");
  dict.setDouble(msg->type(), "type");
  dict.setDouble(msg->progress(), "progress");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->star(), "star");
  return dict.getCCDictionary();
}
void jsonToDto_MsgRolePassiveSkill(CCDictionary *json, MsgRolePassiveSkill *msg) {
  SGDictionary dict(json);
  msg->set_attrid((uint32) dict.getDouble("attrID"));
  msg->set_level((uint32) dict.getDouble("level"));
}
CCDictionary* msgToJson_MsgRolePassiveSkill(const MsgRolePassiveSkill *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->attrid(), "attrID");
  dict.setDouble(msg->level(), "level");
  return dict.getCCDictionary();
}
void jsonToDto_MsgRoleProperties(CCDictionary *json, MsgRoleProperties *msg) {
  SGDictionary dict(json);
  msg->set_hp((uint32) dict.getDouble("hp"));
  msg->set_physicalattack((uint32) dict.getDouble("physicalAttack"));
  msg->set_physicaldefense((uint32) dict.getDouble("physicalDefense"));
  msg->set_skillattack((uint32) dict.getDouble("skillAttack"));
  msg->set_skilldefense((uint32) dict.getDouble("skillDefense"));
  msg->set_magicattack((uint32) dict.getDouble("magicAttack"));
  msg->set_magicdefense((uint32) dict.getDouble("magicDefense"));
  msg->set_critical((uint32) dict.getDouble("critical"));
  msg->set_toughness((uint32) dict.getDouble("toughness"));
  msg->set_dodge((uint32) dict.getDouble("dodge"));
  msg->set_hit((uint32) dict.getDouble("hit"));
  msg->set_block((uint32) dict.getDouble("block"));
  msg->set_sunder((uint32) dict.getDouble("sunder"));
}
CCDictionary* msgToJson_MsgRoleProperties(const MsgRoleProperties *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->hp(), "hp");
  dict.setDouble(msg->physicalattack(), "physicalAttack");
  dict.setDouble(msg->physicaldefense(), "physicalDefense");
  dict.setDouble(msg->skillattack(), "skillAttack");
  dict.setDouble(msg->skilldefense(), "skillDefense");
  dict.setDouble(msg->magicattack(), "magicAttack");
  dict.setDouble(msg->magicdefense(), "magicDefense");
  dict.setDouble(msg->critical(), "critical");
  dict.setDouble(msg->toughness(), "toughness");
  dict.setDouble(msg->dodge(), "dodge");
  dict.setDouble(msg->hit(), "hit");
  dict.setDouble(msg->block(), "block");
  dict.setDouble(msg->sunder(), "sunder");
  return dict.getCCDictionary();
}
void jsonToDto_MsgRankItem(CCDictionary *json, MsgRankItem *msg) {
  SGDictionary dict(json);
  msg->set_id((uint64) dict.getDouble("id"));
  msg->set_name(dict.getCString("name"));
  msg->set_rankvalue((uint64) dict.getDouble("rankValue"));
}
CCDictionary* msgToJson_MsgRankItem(const MsgRankItem *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->id(), "id");
  dict.setString(msg->name(), "name");
  dict.setDouble(msg->rankvalue(), "rankValue");
  return dict.getCCDictionary();
}
void jsonToDto_MsgRoleYijunBuilding(CCDictionary *json, MsgRoleYijunBuilding *msg) {
  SGDictionary dict(json);
  msg->set_id((uint32) dict.getDouble("id"));
  msg->set_level((uint32) dict.getDouble("level"));
}
CCDictionary* msgToJson_MsgRoleYijunBuilding(const MsgRoleYijunBuilding *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->id(), "id");
  dict.setDouble(msg->level(), "level");
  return dict.getCCDictionary();
}
void jsonToDto_MsgRoleYijunSkill(CCDictionary *json, MsgRoleYijunSkill *msg) {
  SGDictionary dict(json);
  msg->set_attrid((uint32) dict.getDouble("attrID"));
  msg->set_level((uint32) dict.getDouble("level"));
}
CCDictionary* msgToJson_MsgRoleYijunSkill(const MsgRoleYijunSkill *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->attrid(), "attrID");
  dict.setDouble(msg->level(), "level");
  return dict.getCCDictionary();
}
void jsonToDto_MsgRollDiceInfo(CCDictionary *json, MsgRollDiceInfo *msg) {
  SGDictionary dict(json);
  msg->set_rewardjson(dict.getCString("rewardJson"));
  msg->set_desc(dict.getCString("desc"));
  msg->set_dicepoint((uint32) dict.getDouble("dicePoint"));
}
CCDictionary* msgToJson_MsgRollDiceInfo(const MsgRollDiceInfo *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setString(msg->rewardjson(), "rewardJson");
  dict.setString(msg->desc(), "desc");
  dict.setDouble(msg->dicepoint(), "dicePoint");
  return dict.getCCDictionary();
}
void jsonToDto_MsgServerInfoData(CCDictionary *json, MsgServerInfoData *msg) {
  SGDictionary dict(json);
  msg->set_serverid((uint32) dict.getDouble("serverID"));
  msg->set_serverip(dict.getCString("serverIP"));
  msg->set_serverport((uint32) dict.getDouble("serverPort"));
  msg->set_servername(dict.getCString("serverName"));
  msg->set_rolecount((uint32) dict.getDouble("roleCount"));
  msg->set_status((uint32) dict.getDouble("status"));
}
CCDictionary* msgToJson_MsgServerInfoData(const MsgServerInfoData *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->serverid(), "serverID");
  dict.setString(msg->serverip(), "serverIP");
  dict.setDouble(msg->serverport(), "serverPort");
  dict.setString(msg->servername(), "serverName");
  dict.setDouble(msg->rolecount(), "roleCount");
  dict.setDouble(msg->status(), "status");
  return dict.getCCDictionary();
}
void jsonToDto_MsgShopGoodsInfoData(CCDictionary *json, MsgShopGoodsInfoData *msg) {
  SGDictionary dict(json);
  msg->set_id((uint64) dict.getDouble("id"));
  msg->set_type((uint32) dict.getDouble("type"));
  msg->set_subtype((uint32) dict.getDouble("subtype"));
  msg->set_goodsid((uint32) dict.getDouble("goodsid"));
  msg->set_level((uint32) dict.getDouble("level"));
  msg->set_count((uint32) dict.getDouble("count"));
  msg->set_price((uint32) dict.getDouble("price"));
  msg->set_sale((uint32) dict.getDouble("sale"));
  msg->set_state((uint32) dict.getDouble("state"));
}
CCDictionary* msgToJson_MsgShopGoodsInfoData(const MsgShopGoodsInfoData *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->id(), "id");
  dict.setDouble(msg->type(), "type");
  dict.setDouble(msg->subtype(), "subtype");
  dict.setDouble(msg->goodsid(), "goodsid");
  dict.setDouble(msg->level(), "level");
  dict.setDouble(msg->count(), "count");
  dict.setDouble(msg->price(), "price");
  dict.setDouble(msg->sale(), "sale");
  dict.setDouble(msg->state(), "state");
  return dict.getCCDictionary();
}
void jsonToDto_MsgSignReward(CCDictionary *json, MsgSignReward *msg) {
  SGDictionary dict(json);
  msg->set_giftid((uint64) dict.getDouble("giftID"));
  msg->set_rewardinfo(dict.getCString("rewardInfo"));
  msg->set_days((uint32) dict.getDouble("days"));
}
CCDictionary* msgToJson_MsgSignReward(const MsgSignReward *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->giftid(), "giftID");
  dict.setString(msg->rewardinfo(), "rewardInfo");
  dict.setDouble(msg->days(), "days");
  return dict.getCCDictionary();
}
void jsonToDto_MsgStatuesInMainCity(CCDictionary *json, MsgStatuesInMainCity *msg) {
  SGDictionary dict(json);
  msg->set_roleid((uint64) dict.getDouble("roleID"));
  msg->set_statuestype((uint32) dict.getDouble("statuesType"));
}
CCDictionary* msgToJson_MsgStatuesInMainCity(const MsgStatuesInMainCity *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->roleid(), "roleID");
  dict.setDouble(msg->statuestype(), "statuesType");
  return dict.getCCDictionary();
}
void jsonToDto_MsgSweepDungeonAward(CCDictionary *json, MsgSweepDungeonAward *msg) {
  SGDictionary dict(json);
  CCArray *arr_cardReward = dict.getArray("cardReward");
  CCObject *tmp_cardRewardItem;
  CCARRAY_FOREACH(arr_cardReward, tmp_cardRewardItem) {
    MsgGambleCardReward *tmp_cardReward = msg->add_cardreward();
    jsonToDto_MsgGambleCardReward(dynamic_cast<CCDictionary *>(tmp_cardRewardItem), tmp_cardReward);
  }
  MsgDungeonReward *dto_dungeonReward = new MsgDungeonReward();
  jsonToDto_MsgDungeonReward(dict.getDict("dungeonReward"), dto_dungeonReward);
  msg->set_allocated_dungeonreward(dto_dungeonReward);
}
CCDictionary* msgToJson_MsgSweepDungeonAward(const MsgSweepDungeonAward *msg) {
  SGDictionary dict(CCDictionary::create());
  CCArray *arr_cardReward = CCArray::createWithCapacity(msg->cardreward_size());
  for (int idx = 0; idx < msg->cardreward_size(); idx++) {
    const MsgGambleCardReward& val = msg->cardreward(idx);
    arr_cardReward->addObject(msgToJson_MsgGambleCardReward(&val));
  }
  dict.setArray(arr_cardReward, "cardReward");
  dict.setDict(msgToJson_MsgDungeonReward(&(msg->dungeonreward())), "dungeonReward");
  return dict.getCCDictionary();
}
void jsonToDto_MsgWorldbossRankInfo(CCDictionary *json, MsgWorldbossRankInfo *msg) {
  SGDictionary dict(json);
  msg->set_rank((uint32) dict.getDouble("rank"));
  msg->set_rolename(dict.getCString("rolename"));
  msg->set_damage((uint64) dict.getDouble("damage"));
}
CCDictionary* msgToJson_MsgWorldbossRankInfo(const MsgWorldbossRankInfo *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->rank(), "rank");
  dict.setString(msg->rolename(), "rolename");
  dict.setDouble(msg->damage(), "damage");
  return dict.getCCDictionary();
}
void jsonToDto_MsgYijun(CCDictionary *json, MsgYijun *msg) {
  SGDictionary dict(json);
  msg->set_id((uint64) dict.getDouble("id"));
  msg->set_name(dict.getCString("name"));
  msg->set_level((uint32) dict.getDouble("level"));
  msg->set_membercount((uint32) dict.getDouble("memberCount"));
  msg->set_wealth((uint64) dict.getDouble("wealth"));
  msg->set_wealthpd((uint64) dict.getDouble("wealthPD"));
  msg->set_marshalid((uint64) dict.getDouble("marshalID"));
  msg->set_marshalname(dict.getCString("marshalName"));
  msg->set_applied((uint32) dict.getDouble("applied"));
  msg->set_generalaid((uint64) dict.getDouble("generalAID"));
  msg->set_generalbid((uint64) dict.getDouble("generalBID"));
  msg->set_notice(dict.getCString("notice"));
  msg->set_spywealthpd((sint64) dict.getDouble("spyWealthPD"));
}
CCDictionary* msgToJson_MsgYijun(const MsgYijun *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->id(), "id");
  dict.setString(msg->name(), "name");
  dict.setDouble(msg->level(), "level");
  dict.setDouble(msg->membercount(), "memberCount");
  dict.setDouble(msg->wealth(), "wealth");
  dict.setDouble(msg->wealthpd(), "wealthPD");
  dict.setDouble(msg->marshalid(), "marshalID");
  dict.setString(msg->marshalname(), "marshalName");
  dict.setDouble(msg->applied(), "applied");
  dict.setDouble(msg->generalaid(), "generalAID");
  dict.setDouble(msg->generalbid(), "generalBID");
  dict.setString(msg->notice(), "notice");
  dict.setDouble(msg->spywealthpd(), "spyWealthPD");
  return dict.getCCDictionary();
}
void jsonToDto_MsgYijunApplication(CCDictionary *json, MsgYijunApplication *msg) {
  SGDictionary dict(json);
  msg->set_roleid((uint64) dict.getDouble("roleId"));
  msg->set_rolelevel((uint32) dict.getDouble("roleLevel"));
  msg->set_rolename(dict.getCString("roleName"));
}
CCDictionary* msgToJson_MsgYijunApplication(const MsgYijunApplication *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->roleid(), "roleId");
  dict.setDouble(msg->rolelevel(), "roleLevel");
  dict.setString(msg->rolename(), "roleName");
  return dict.getCCDictionary();
}
void jsonToDto_MsgYijunCaptureRole(CCDictionary *json, MsgYijunCaptureRole *msg) {
  SGDictionary dict(json);
  msg->set_roleid((uint64) dict.getDouble("roleID"));
  msg->set_captureprotectedtime((uint32) dict.getDouble("captureProtectedTime"));
  msg->set_capturename(dict.getCString("captureName"));
  msg->set_yijuncapturelasttime((uint64) dict.getDouble("yijunCaptureLastTime"));
  msg->set_profession((uint32) dict.getDouble("profession"));
  msg->set_level((uint32) dict.getDouble("level"));
}
CCDictionary* msgToJson_MsgYijunCaptureRole(const MsgYijunCaptureRole *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->roleid(), "roleID");
  dict.setDouble(msg->captureprotectedtime(), "captureProtectedTime");
  dict.setString(msg->capturename(), "captureName");
  dict.setDouble(msg->yijuncapturelasttime(), "yijunCaptureLastTime");
  dict.setDouble(msg->profession(), "profession");
  dict.setDouble(msg->level(), "level");
  return dict.getCCDictionary();
}
void jsonToDto_MsgYijunContribution(CCDictionary *json, MsgYijunContribution *msg) {
  SGDictionary dict(json);
  msg->set_wealth((uint64) dict.getDouble("wealth"));
  msg->set_rolename(dict.getCString("roleName"));
}
CCDictionary* msgToJson_MsgYijunContribution(const MsgYijunContribution *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->wealth(), "wealth");
  dict.setString(msg->rolename(), "roleName");
  return dict.getCCDictionary();
}
void jsonToDto_MsgYijunMember(CCDictionary *json, MsgYijunMember *msg) {
  SGDictionary dict(json);
  msg->set_roleid((uint64) dict.getDouble("roleID"));
  msg->set_rolename(dict.getCString("roleName"));
  msg->set_rolelevel((uint32) dict.getDouble("roleLevel"));
  msg->set_contribution((uint64) dict.getDouble("contribution"));
  msg->set_offlinetime((uint64) dict.getDouble("offlineTime"));
}
CCDictionary* msgToJson_MsgYijunMember(const MsgYijunMember *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->roleid(), "roleID");
  dict.setString(msg->rolename(), "roleName");
  dict.setDouble(msg->rolelevel(), "roleLevel");
  dict.setDouble(msg->contribution(), "contribution");
  dict.setDouble(msg->offlinetime(), "offlineTime");
  return dict.getCCDictionary();
}
void jsonToDto_MsgYijunPray(CCDictionary *json, MsgYijunPray *msg) {
  SGDictionary dict(json);
  msg->set_praytime((uint64) dict.getDouble("prayTime"));
  msg->set_rolename(dict.getCString("roleName"));
}
CCDictionary* msgToJson_MsgYijunPray(const MsgYijunPray *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->praytime(), "prayTime");
  dict.setString(msg->rolename(), "roleName");
  return dict.getCCDictionary();
}
void jsonToDto_ArenaNotice(CCDictionary *json, ArenaNotice *msg) {
  SGDictionary dict(json);
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_status((StatusCode) dict.getDouble("status"));
  msg->set_result((uint32) dict.getDouble("result"));
}
CCDictionary* msgToJson_ArenaNotice(const ArenaNotice *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->result(), "result");
  return dict.getCCDictionary();
}
void jsonToDto_AprroveFriend(CCDictionary *json, AprroveFriend *msg) {
  SGDictionary dict(json);
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  MsgRoleFriendAprrove *dto_approveFriend = new MsgRoleFriendAprrove();
  jsonToDto_MsgRoleFriendAprrove(dict.getDict("approveFriend"), dto_approveFriend);
  msg->set_allocated_approvefriend(dto_approveFriend);
}
CCDictionary* msgToJson_AprroveFriend(const AprroveFriend *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDict(msgToJson_MsgRoleFriendAprrove(&(msg->approvefriend())), "approveFriend");
  return dict.getCCDictionary();
}
void jsonToDto_AprroveFriendResult(CCDictionary *json, AprroveFriendResult *msg) {
  SGDictionary dict(json);
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  MsgRoleFriendAprrove *dto_approveFriend = new MsgRoleFriendAprrove();
  jsonToDto_MsgRoleFriendAprrove(dict.getDict("approveFriend"), dto_approveFriend);
  msg->set_allocated_approvefriend(dto_approveFriend);
}
CCDictionary* msgToJson_AprroveFriendResult(const AprroveFriendResult *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDict(msgToJson_MsgRoleFriendAprrove(&(msg->approvefriend())), "approveFriend");
  return dict.getCCDictionary();
}
void jsonToDto_ActivityGift(CCDictionary *json, ActivityGift *msg) {
  SGDictionary dict(json);
  msg->set_giftconfigid((uint64) dict.getDouble("giftConfigId"));
  msg->set_giftid((uint64) dict.getDouble("giftId"));
  msg->set_giftcount((uint32) dict.getDouble("giftCount"));
}
CCDictionary* msgToJson_ActivityGift(const ActivityGift *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->giftconfigid(), "giftConfigId");
  dict.setDouble(msg->giftid(), "giftId");
  dict.setDouble(msg->giftcount(), "giftCount");
  return dict.getCCDictionary();
}
void jsonToDto_UnlockKungfuButtonBroadCast(CCDictionary *json, UnlockKungfuButtonBroadCast *msg) {
  SGDictionary dict(json);
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_status((StatusCode) dict.getDouble("status"));
  msg->set_kungfuid((uint32) dict.getDouble("KungfuID"));
  msg->set_kungfuslotnum((uint32) dict.getDouble("kungfuSlotNum"));
}
CCDictionary* msgToJson_UnlockKungfuButtonBroadCast(const UnlockKungfuButtonBroadCast *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->kungfuid(), "KungfuID");
  dict.setDouble(msg->kungfuslotnum(), "kungfuSlotNum");
  return dict.getCCDictionary();
}
void jsonToDto_UnlockKungfuSlotBroadCast(CCDictionary *json, UnlockKungfuSlotBroadCast *msg) {
  SGDictionary dict(json);
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_status((StatusCode) dict.getDouble("status"));
  msg->set_kungfuslotnum((uint32) dict.getDouble("kungfuSlotNum"));
  MsgOpenKungfuSlotCondition *dto_openSlotCondition = new MsgOpenKungfuSlotCondition();
  jsonToDto_MsgOpenKungfuSlotCondition(dict.getDict("openSlotCondition"), dto_openSlotCondition);
  msg->set_allocated_openslotcondition(dto_openSlotCondition);
  msg->set_kungfuid((uint32) dict.getDouble("KungfuID"));
}
CCDictionary* msgToJson_UnlockKungfuSlotBroadCast(const UnlockKungfuSlotBroadCast *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->kungfuslotnum(), "kungfuSlotNum");
  dict.setDict(msgToJson_MsgOpenKungfuSlotCondition(&(msg->openslotcondition())), "openSlotCondition");
  dict.setDouble(msg->kungfuid(), "KungfuID");
  return dict.getCCDictionary();
}
void jsonToDto_PayResult(CCDictionary *json, PayResult *msg) {
  SGDictionary dict(json);
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_status((StatusCode) dict.getDouble("status"));
  msg->set_jade((uint32) dict.getDouble("jade"));
  msg->set_gold((uint32) dict.getDouble("gold"));
  msg->set_viplevel((uint32) dict.getDouble("vipLevel"));
  msg->set_rechargetype((uint32) dict.getDouble("rechargeType"));
}
CCDictionary* msgToJson_PayResult(const PayResult *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->jade(), "jade");
  dict.setDouble(msg->gold(), "gold");
  dict.setDouble(msg->viplevel(), "vipLevel");
  dict.setDouble(msg->rechargetype(), "rechargeType");
  return dict.getCCDictionary();
}
void jsonToDto_KickOutPush(CCDictionary *json, KickOutPush *msg) {
  SGDictionary dict(json);
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_status((StatusCode) dict.getDouble("status"));
  msg->set_reason((KickOutReason) dict.getDouble("reason"));
}
CCDictionary* msgToJson_KickOutPush(const KickOutPush *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->reason(), "reason");
  return dict.getCCDictionary();
}
void jsonToDto_ForbidRoleChatPush(CCDictionary *json, ForbidRoleChatPush *msg) {
  SGDictionary dict(json);
  msg->set_msgid((MsgID) dict.getDouble("msgID"));
  msg->set_status((StatusCode) dict.getDouble("status"));
  msg->set_channelid((uint32) dict.getDouble("channelId"));
  msg->set_endtime((uint64) dict.getDouble("endTime"));
}
CCDictionary* msgToJson_ForbidRoleChatPush(const ForbidRoleChatPush *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->msgid(), "msgID");
  dict.setDouble(msg->status(), "status");
  dict.setDouble(msg->channelid(), "channelId");
  dict.setDouble(msg->endtime(), "endTime");
  return dict.getCCDictionary();
}
void jsonToDto_MsgRefreshData(CCDictionary *json, MsgRefreshData *msg) {
  SGDictionary dict(json);
  msg->set_count((uint32) dict.getDouble("count"));
}
CCDictionary* msgToJson_MsgRefreshData(const MsgRefreshData *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->count(), "count");
  return dict.getCCDictionary();
}
void jsonToDto_MsgInviteInfoData(CCDictionary *json, MsgInviteInfoData *msg) {
  SGDictionary dict(json);
  msg->set_roleid((uint64) dict.getDouble("roleid"));
  msg->set_name(dict.getCString("name"));
  msg->set_relationtype((uint32) dict.getDouble("relationtype"));
  msg->set_fight((uint32) dict.getDouble("fight"));
  msg->set_level((uint32) dict.getDouble("level"));
  msg->set_profession((uint32) dict.getDouble("profession"));
  msg->set_friendship((uint32) dict.getDouble("friendShip"));
}
CCDictionary* msgToJson_MsgInviteInfoData(const MsgInviteInfoData *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->roleid(), "roleid");
  dict.setString(msg->name(), "name");
  dict.setDouble(msg->relationtype(), "relationtype");
  dict.setDouble(msg->fight(), "fight");
  dict.setDouble(msg->level(), "level");
  dict.setDouble(msg->profession(), "profession");
  dict.setDouble(msg->friendship(), "friendShip");
  return dict.getCCDictionary();
}
void jsonToDto_MsgWorldbossItem(CCDictionary *json, MsgWorldbossItem *msg) {
  SGDictionary dict(json);
  msg->set_bossid((uint64) dict.getDouble("bossId"));
  msg->set_bossconfigid((uint32) dict.getDouble("bossConfigId"));
  msg->set_bossstatus((uint32) dict.getDouble("bossStatus"));
  msg->set_opencitystarttime((uint64) dict.getDouble("openCityStartTime"));
  msg->set_opencityendtime((uint64) dict.getDouble("openCityEndTime"));
  msg->set_opendungeonstarttime((uint64) dict.getDouble("openDungeonStartTime"));
  msg->set_rewardtypes(dict.getCString("rewardTypes"));
  msg->set_bosstype((WorldbossType) dict.getDouble("bossType"));
}
CCDictionary* msgToJson_MsgWorldbossItem(const MsgWorldbossItem *msg) {
  SGDictionary dict(CCDictionary::create());
  dict.setDouble(msg->bossid(), "bossId");
  dict.setDouble(msg->bossconfigid(), "bossConfigId");
  dict.setDouble(msg->bossstatus(), "bossStatus");
  dict.setDouble(msg->opencitystarttime(), "openCityStartTime");
  dict.setDouble(msg->opencityendtime(), "openCityEndTime");
  dict.setDouble(msg->opendungeonstarttime(), "openDungeonStartTime");
  dict.setString(msg->rewardtypes(), "rewardTypes");
  dict.setDouble(msg->bosstype(), "bossType");
  return dict.getCCDictionary();
}
