// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: worldboss_get_all_configs.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "worldboss_get_all_configs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace sanguo {

void protobuf_ShutdownFile_worldboss_5fget_5fall_5fconfigs_2eproto() {
  delete WorldbossGetAllConfigsRequest::default_instance_;
  delete WorldbossGetAllConfigsResponse::default_instance_;
  delete MsgWorldbossItem::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_worldboss_5fget_5fall_5fconfigs_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_worldboss_5fget_5fall_5fconfigs_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::sanguo::protobuf_AddDesc_msg_5fid_2eproto();
  ::sanguo::protobuf_AddDesc_msg_5fstatus_5fcode_2eproto();
  ::sanguo::protobuf_AddDesc_constants_2eproto();
  WorldbossGetAllConfigsRequest::default_instance_ = new WorldbossGetAllConfigsRequest();
  WorldbossGetAllConfigsResponse::default_instance_ = new WorldbossGetAllConfigsResponse();
  MsgWorldbossItem::default_instance_ = new MsgWorldbossItem();
  WorldbossGetAllConfigsRequest::default_instance_->InitAsDefaultInstance();
  WorldbossGetAllConfigsResponse::default_instance_->InitAsDefaultInstance();
  MsgWorldbossItem::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_worldboss_5fget_5fall_5fconfigs_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_worldboss_5fget_5fall_5fconfigs_2eproto_once_);
void protobuf_AddDesc_worldboss_5fget_5fall_5fconfigs_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_worldboss_5fget_5fall_5fconfigs_2eproto_once_,
                 &protobuf_AddDesc_worldboss_5fget_5fall_5fconfigs_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_worldboss_5fget_5fall_5fconfigs_2eproto {
  StaticDescriptorInitializer_worldboss_5fget_5fall_5fconfigs_2eproto() {
    protobuf_AddDesc_worldboss_5fget_5fall_5fconfigs_2eproto();
  }
} static_descriptor_initializer_worldboss_5fget_5fall_5fconfigs_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int WorldbossGetAllConfigsRequest::kMsgIDFieldNumber;
const int WorldbossGetAllConfigsRequest::kBossTypeFieldNumber;
#endif  // !_MSC_VER

WorldbossGetAllConfigsRequest::WorldbossGetAllConfigsRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void WorldbossGetAllConfigsRequest::InitAsDefaultInstance() {
}

WorldbossGetAllConfigsRequest::WorldbossGetAllConfigsRequest(const WorldbossGetAllConfigsRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void WorldbossGetAllConfigsRequest::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 1;
  bosstype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldbossGetAllConfigsRequest::~WorldbossGetAllConfigsRequest() {
  SharedDtor();
}

void WorldbossGetAllConfigsRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void WorldbossGetAllConfigsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const WorldbossGetAllConfigsRequest& WorldbossGetAllConfigsRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_worldboss_5fget_5fall_5fconfigs_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_worldboss_5fget_5fall_5fconfigs_2eproto();
#endif
  return *default_instance_;
}

WorldbossGetAllConfigsRequest* WorldbossGetAllConfigsRequest::default_instance_ = NULL;

WorldbossGetAllConfigsRequest* WorldbossGetAllConfigsRequest::New() const {
  return new WorldbossGetAllConfigsRequest;
}

void WorldbossGetAllConfigsRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 1;
    bosstype_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool WorldbossGetAllConfigsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sanguo.MsgID msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::sanguo::MsgID >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bossType;
        break;
      }

      // required .sanguo.WorldbossType bossType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bossType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::WorldbossType_IsValid(value)) {
            set_bosstype(static_cast< ::sanguo::WorldbossType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldbossGetAllConfigsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .sanguo.MsgID msgID = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // required .sanguo.WorldbossType bossType = 2;
  if (has_bosstype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->bosstype(), output);
  }

}

int WorldbossGetAllConfigsRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .sanguo.MsgID msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // required .sanguo.WorldbossType bossType = 2;
    if (has_bosstype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bosstype());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldbossGetAllConfigsRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const WorldbossGetAllConfigsRequest*>(&from));
}

void WorldbossGetAllConfigsRequest::MergeFrom(const WorldbossGetAllConfigsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_bosstype()) {
      set_bosstype(from.bosstype());
    }
  }
}

void WorldbossGetAllConfigsRequest::CopyFrom(const WorldbossGetAllConfigsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldbossGetAllConfigsRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void WorldbossGetAllConfigsRequest::Swap(WorldbossGetAllConfigsRequest* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(bosstype_, other->bosstype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string WorldbossGetAllConfigsRequest::GetTypeName() const {
  return "sanguo.WorldbossGetAllConfigsRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int WorldbossGetAllConfigsResponse::kMsgIDFieldNumber;
const int WorldbossGetAllConfigsResponse::kStatusFieldNumber;
const int WorldbossGetAllConfigsResponse::kWorldbossesFieldNumber;
const int WorldbossGetAllConfigsResponse::kBossTypeFieldNumber;
#endif  // !_MSC_VER

WorldbossGetAllConfigsResponse::WorldbossGetAllConfigsResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void WorldbossGetAllConfigsResponse::InitAsDefaultInstance() {
}

WorldbossGetAllConfigsResponse::WorldbossGetAllConfigsResponse(const WorldbossGetAllConfigsResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void WorldbossGetAllConfigsResponse::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 1;
  status_ = 0;
  bosstype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldbossGetAllConfigsResponse::~WorldbossGetAllConfigsResponse() {
  SharedDtor();
}

void WorldbossGetAllConfigsResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void WorldbossGetAllConfigsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const WorldbossGetAllConfigsResponse& WorldbossGetAllConfigsResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_worldboss_5fget_5fall_5fconfigs_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_worldboss_5fget_5fall_5fconfigs_2eproto();
#endif
  return *default_instance_;
}

WorldbossGetAllConfigsResponse* WorldbossGetAllConfigsResponse::default_instance_ = NULL;

WorldbossGetAllConfigsResponse* WorldbossGetAllConfigsResponse::New() const {
  return new WorldbossGetAllConfigsResponse;
}

void WorldbossGetAllConfigsResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 1;
    status_ = 0;
    bosstype_ = 1;
  }
  worldbosses_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool WorldbossGetAllConfigsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sanguo.MsgID msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::sanguo::MsgID >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .sanguo.StatusCode status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::StatusCode_IsValid(value)) {
            set_status(static_cast< ::sanguo::StatusCode >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_worldbosses;
        break;
      }

      // repeated .sanguo.MsgWorldbossItem worldbosses = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_worldbosses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_worldbosses()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_worldbosses;
        if (input->ExpectTag(32)) goto parse_bossType;
        break;
      }

      // required .sanguo.WorldbossType bossType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bossType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::WorldbossType_IsValid(value)) {
            set_bosstype(static_cast< ::sanguo::WorldbossType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldbossGetAllConfigsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .sanguo.MsgID msgID = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // required .sanguo.StatusCode status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // repeated .sanguo.MsgWorldbossItem worldbosses = 3;
  for (int i = 0; i < this->worldbosses_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->worldbosses(i), output);
  }

  // required .sanguo.WorldbossType bossType = 4;
  if (has_bosstype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->bosstype(), output);
  }

}

int WorldbossGetAllConfigsResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .sanguo.MsgID msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // required .sanguo.StatusCode status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // required .sanguo.WorldbossType bossType = 4;
    if (has_bosstype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bosstype());
    }

  }
  // repeated .sanguo.MsgWorldbossItem worldbosses = 3;
  total_size += 1 * this->worldbosses_size();
  for (int i = 0; i < this->worldbosses_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->worldbosses(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldbossGetAllConfigsResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const WorldbossGetAllConfigsResponse*>(&from));
}

void WorldbossGetAllConfigsResponse::MergeFrom(const WorldbossGetAllConfigsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  worldbosses_.MergeFrom(from.worldbosses_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_bosstype()) {
      set_bosstype(from.bosstype());
    }
  }
}

void WorldbossGetAllConfigsResponse::CopyFrom(const WorldbossGetAllConfigsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldbossGetAllConfigsResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  for (int i = 0; i < worldbosses_size(); i++) {
    if (!this->worldbosses(i).IsInitialized()) return false;
  }
  return true;
}

void WorldbossGetAllConfigsResponse::Swap(WorldbossGetAllConfigsResponse* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(status_, other->status_);
    worldbosses_.Swap(&other->worldbosses_);
    std::swap(bosstype_, other->bosstype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string WorldbossGetAllConfigsResponse::GetTypeName() const {
  return "sanguo.WorldbossGetAllConfigsResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int MsgWorldbossItem::kBossIdFieldNumber;
const int MsgWorldbossItem::kBossConfigIdFieldNumber;
const int MsgWorldbossItem::kBossStatusFieldNumber;
const int MsgWorldbossItem::kOpenCityStartTimeFieldNumber;
const int MsgWorldbossItem::kOpenCityEndTimeFieldNumber;
const int MsgWorldbossItem::kOpenDungeonStartTimeFieldNumber;
const int MsgWorldbossItem::kRewardTypesFieldNumber;
const int MsgWorldbossItem::kBossTypeFieldNumber;
#endif  // !_MSC_VER

MsgWorldbossItem::MsgWorldbossItem()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void MsgWorldbossItem::InitAsDefaultInstance() {
}

MsgWorldbossItem::MsgWorldbossItem(const MsgWorldbossItem& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void MsgWorldbossItem::SharedCtor() {
  _cached_size_ = 0;
  bossid_ = GOOGLE_ULONGLONG(0);
  bossconfigid_ = 0u;
  bossstatus_ = 0u;
  opencitystarttime_ = GOOGLE_ULONGLONG(0);
  opencityendtime_ = GOOGLE_ULONGLONG(0);
  opendungeonstarttime_ = GOOGLE_ULONGLONG(0);
  rewardtypes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bosstype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgWorldbossItem::~MsgWorldbossItem() {
  SharedDtor();
}

void MsgWorldbossItem::SharedDtor() {
  if (rewardtypes_ != &::google::protobuf::internal::kEmptyString) {
    delete rewardtypes_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgWorldbossItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgWorldbossItem& MsgWorldbossItem::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_worldboss_5fget_5fall_5fconfigs_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_worldboss_5fget_5fall_5fconfigs_2eproto();
#endif
  return *default_instance_;
}

MsgWorldbossItem* MsgWorldbossItem::default_instance_ = NULL;

MsgWorldbossItem* MsgWorldbossItem::New() const {
  return new MsgWorldbossItem;
}

void MsgWorldbossItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bossid_ = GOOGLE_ULONGLONG(0);
    bossconfigid_ = 0u;
    bossstatus_ = 0u;
    opencitystarttime_ = GOOGLE_ULONGLONG(0);
    opencityendtime_ = GOOGLE_ULONGLONG(0);
    opendungeonstarttime_ = GOOGLE_ULONGLONG(0);
    if (has_rewardtypes()) {
      if (rewardtypes_ != &::google::protobuf::internal::kEmptyString) {
        rewardtypes_->clear();
      }
    }
    bosstype_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool MsgWorldbossItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 bossId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bossConfigId;
        break;
      }

      // required uint32 bossConfigId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bossConfigId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bossconfigid_)));
          set_has_bossconfigid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bossStatus;
        break;
      }

      // required uint32 bossStatus = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bossStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bossstatus_)));
          set_has_bossstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_openCityStartTime;
        break;
      }

      // required uint64 openCityStartTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_openCityStartTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &opencitystarttime_)));
          set_has_opencitystarttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_openCityEndTime;
        break;
      }

      // required uint64 openCityEndTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_openCityEndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &opencityendtime_)));
          set_has_opencityendtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_openDungeonStartTime;
        break;
      }

      // required uint64 openDungeonStartTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_openDungeonStartTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &opendungeonstarttime_)));
          set_has_opendungeonstarttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_rewardTypes;
        break;
      }

      // required string rewardTypes = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rewardTypes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rewardtypes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_bossType;
        break;
      }

      // required .sanguo.WorldbossType bossType = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bossType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::WorldbossType_IsValid(value)) {
            set_bosstype(static_cast< ::sanguo::WorldbossType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgWorldbossItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 bossId = 1;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->bossid(), output);
  }

  // required uint32 bossConfigId = 2;
  if (has_bossconfigid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bossconfigid(), output);
  }

  // required uint32 bossStatus = 3;
  if (has_bossstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->bossstatus(), output);
  }

  // required uint64 openCityStartTime = 4;
  if (has_opencitystarttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->opencitystarttime(), output);
  }

  // required uint64 openCityEndTime = 5;
  if (has_opencityendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->opencityendtime(), output);
  }

  // required uint64 openDungeonStartTime = 6;
  if (has_opendungeonstarttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->opendungeonstarttime(), output);
  }

  // required string rewardTypes = 7;
  if (has_rewardtypes()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->rewardtypes(), output);
  }

  // required .sanguo.WorldbossType bossType = 8;
  if (has_bosstype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->bosstype(), output);
  }

}

int MsgWorldbossItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 bossId = 1;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bossid());
    }

    // required uint32 bossConfigId = 2;
    if (has_bossconfigid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bossconfigid());
    }

    // required uint32 bossStatus = 3;
    if (has_bossstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bossstatus());
    }

    // required uint64 openCityStartTime = 4;
    if (has_opencitystarttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->opencitystarttime());
    }

    // required uint64 openCityEndTime = 5;
    if (has_opencityendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->opencityendtime());
    }

    // required uint64 openDungeonStartTime = 6;
    if (has_opendungeonstarttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->opendungeonstarttime());
    }

    // required string rewardTypes = 7;
    if (has_rewardtypes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rewardtypes());
    }

    // required .sanguo.WorldbossType bossType = 8;
    if (has_bosstype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bosstype());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgWorldbossItem::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgWorldbossItem*>(&from));
}

void MsgWorldbossItem::MergeFrom(const MsgWorldbossItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
    if (from.has_bossconfigid()) {
      set_bossconfigid(from.bossconfigid());
    }
    if (from.has_bossstatus()) {
      set_bossstatus(from.bossstatus());
    }
    if (from.has_opencitystarttime()) {
      set_opencitystarttime(from.opencitystarttime());
    }
    if (from.has_opencityendtime()) {
      set_opencityendtime(from.opencityendtime());
    }
    if (from.has_opendungeonstarttime()) {
      set_opendungeonstarttime(from.opendungeonstarttime());
    }
    if (from.has_rewardtypes()) {
      set_rewardtypes(from.rewardtypes());
    }
    if (from.has_bosstype()) {
      set_bosstype(from.bosstype());
    }
  }
}

void MsgWorldbossItem::CopyFrom(const MsgWorldbossItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgWorldbossItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void MsgWorldbossItem::Swap(MsgWorldbossItem* other) {
  if (other != this) {
    std::swap(bossid_, other->bossid_);
    std::swap(bossconfigid_, other->bossconfigid_);
    std::swap(bossstatus_, other->bossstatus_);
    std::swap(opencitystarttime_, other->opencitystarttime_);
    std::swap(opencityendtime_, other->opencityendtime_);
    std::swap(opendungeonstarttime_, other->opendungeonstarttime_);
    std::swap(rewardtypes_, other->rewardtypes_);
    std::swap(bosstype_, other->bosstype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MsgWorldbossItem::GetTypeName() const {
  return "sanguo.MsgWorldbossItem";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sanguo

// @@protoc_insertion_point(global_scope)
