// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: get_friend_properties.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "get_friend_properties.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace sanguo {

void protobuf_ShutdownFile_get_5ffriend_5fproperties_2eproto() {
  delete GetFriendPropertiesRequest::default_instance_;
  delete GetFriendPropertiesResponse::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_get_5ffriend_5fproperties_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_get_5ffriend_5fproperties_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::sanguo::protobuf_AddDesc_msg_5fid_2eproto();
  ::sanguo::protobuf_AddDesc_msg_5fstatus_5fcode_2eproto();
  ::sanguo::protobuf_AddDesc_role_5ffriend_2eproto();
  ::sanguo::protobuf_AddDesc_role_5fproperties_2eproto();
  ::sanguo::protobuf_AddDesc_role_5fbag_5fgoods_2eproto();
  ::sanguo::protobuf_AddDesc_role_5fgem_5fbag_5fgoods_2eproto();
  ::sanguo::protobuf_AddDesc_role_5fguaxiang_5fgoods_2eproto();
  ::sanguo::protobuf_AddDesc_role_5fkungfu_5fproperties_2eproto();
  GetFriendPropertiesRequest::default_instance_ = new GetFriendPropertiesRequest();
  GetFriendPropertiesResponse::default_instance_ = new GetFriendPropertiesResponse();
  GetFriendPropertiesRequest::default_instance_->InitAsDefaultInstance();
  GetFriendPropertiesResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_get_5ffriend_5fproperties_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_get_5ffriend_5fproperties_2eproto_once_);
void protobuf_AddDesc_get_5ffriend_5fproperties_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_get_5ffriend_5fproperties_2eproto_once_,
                 &protobuf_AddDesc_get_5ffriend_5fproperties_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_get_5ffriend_5fproperties_2eproto {
  StaticDescriptorInitializer_get_5ffriend_5fproperties_2eproto() {
    protobuf_AddDesc_get_5ffriend_5fproperties_2eproto();
  }
} static_descriptor_initializer_get_5ffriend_5fproperties_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int GetFriendPropertiesRequest::kMsgIDFieldNumber;
const int GetFriendPropertiesRequest::kFriendIDFieldNumber;
#endif  // !_MSC_VER

GetFriendPropertiesRequest::GetFriendPropertiesRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GetFriendPropertiesRequest::InitAsDefaultInstance() {
}

GetFriendPropertiesRequest::GetFriendPropertiesRequest(const GetFriendPropertiesRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GetFriendPropertiesRequest::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 1;
  friendid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFriendPropertiesRequest::~GetFriendPropertiesRequest() {
  SharedDtor();
}

void GetFriendPropertiesRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetFriendPropertiesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetFriendPropertiesRequest& GetFriendPropertiesRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_get_5ffriend_5fproperties_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_get_5ffriend_5fproperties_2eproto();
#endif
  return *default_instance_;
}

GetFriendPropertiesRequest* GetFriendPropertiesRequest::default_instance_ = NULL;

GetFriendPropertiesRequest* GetFriendPropertiesRequest::New() const {
  return new GetFriendPropertiesRequest;
}

void GetFriendPropertiesRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 1;
    friendid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GetFriendPropertiesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sanguo.MsgID msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::sanguo::MsgID >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_friendID;
        break;
      }

      // required uint64 friendID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friendID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &friendid_)));
          set_has_friendid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetFriendPropertiesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .sanguo.MsgID msgID = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // required uint64 friendID = 2;
  if (has_friendid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->friendid(), output);
  }

}

int GetFriendPropertiesRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .sanguo.MsgID msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // required uint64 friendID = 2;
    if (has_friendid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->friendid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFriendPropertiesRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetFriendPropertiesRequest*>(&from));
}

void GetFriendPropertiesRequest::MergeFrom(const GetFriendPropertiesRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_friendid()) {
      set_friendid(from.friendid());
    }
  }
}

void GetFriendPropertiesRequest::CopyFrom(const GetFriendPropertiesRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFriendPropertiesRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GetFriendPropertiesRequest::Swap(GetFriendPropertiesRequest* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(friendid_, other->friendid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetFriendPropertiesRequest::GetTypeName() const {
  return "sanguo.GetFriendPropertiesRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int GetFriendPropertiesResponse::kMsgIDFieldNumber;
const int GetFriendPropertiesResponse::kStatusFieldNumber;
const int GetFriendPropertiesResponse::kRolePropertiesFieldNumber;
const int GetFriendPropertiesResponse::kBagGoodsFieldNumber;
const int GetFriendPropertiesResponse::kGemBagGoodsFieldNumber;
const int GetFriendPropertiesResponse::kGuaxiangGoodsFieldNumber;
const int GetFriendPropertiesResponse::kRoleLevelFieldNumber;
const int GetFriendPropertiesResponse::kRoleKungfuPropertiesFieldNumber;
#endif  // !_MSC_VER

GetFriendPropertiesResponse::GetFriendPropertiesResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GetFriendPropertiesResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  roleproperties_ = const_cast< ::sanguo::MsgRoleProperties*>(
      ::sanguo::MsgRoleProperties::internal_default_instance());
#else
  roleproperties_ = const_cast< ::sanguo::MsgRoleProperties*>(&::sanguo::MsgRoleProperties::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  rolekungfuproperties_ = const_cast< ::sanguo::MsgKungfuProperties*>(
      ::sanguo::MsgKungfuProperties::internal_default_instance());
#else
  rolekungfuproperties_ = const_cast< ::sanguo::MsgKungfuProperties*>(&::sanguo::MsgKungfuProperties::default_instance());
#endif
}

GetFriendPropertiesResponse::GetFriendPropertiesResponse(const GetFriendPropertiesResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GetFriendPropertiesResponse::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 1;
  status_ = 0;
  roleproperties_ = NULL;
  rolelevel_ = 0u;
  rolekungfuproperties_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFriendPropertiesResponse::~GetFriendPropertiesResponse() {
  SharedDtor();
}

void GetFriendPropertiesResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete roleproperties_;
    delete rolekungfuproperties_;
  }
}

void GetFriendPropertiesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetFriendPropertiesResponse& GetFriendPropertiesResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_get_5ffriend_5fproperties_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_get_5ffriend_5fproperties_2eproto();
#endif
  return *default_instance_;
}

GetFriendPropertiesResponse* GetFriendPropertiesResponse::default_instance_ = NULL;

GetFriendPropertiesResponse* GetFriendPropertiesResponse::New() const {
  return new GetFriendPropertiesResponse;
}

void GetFriendPropertiesResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 1;
    status_ = 0;
    if (has_roleproperties()) {
      if (roleproperties_ != NULL) roleproperties_->::sanguo::MsgRoleProperties::Clear();
    }
    rolelevel_ = 0u;
    if (has_rolekungfuproperties()) {
      if (rolekungfuproperties_ != NULL) rolekungfuproperties_->::sanguo::MsgKungfuProperties::Clear();
    }
  }
  baggoods_.Clear();
  gembaggoods_.Clear();
  guaxianggoods_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GetFriendPropertiesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sanguo.MsgID msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::sanguo::MsgID >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .sanguo.StatusCode status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::StatusCode_IsValid(value)) {
            set_status(static_cast< ::sanguo::StatusCode >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_roleProperties;
        break;
      }

      // required .sanguo.MsgRoleProperties roleProperties = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleProperties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roleproperties()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_bagGoods;
        break;
      }

      // repeated .sanguo.MsgRoleBagGoods bagGoods = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bagGoods:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_baggoods()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_bagGoods;
        if (input->ExpectTag(42)) goto parse_gemBagGoods;
        break;
      }

      // repeated .sanguo.MsgRoleGemBagGoods gemBagGoods = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gemBagGoods:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gembaggoods()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_gemBagGoods;
        if (input->ExpectTag(50)) goto parse_guaxiangGoods;
        break;
      }

      // repeated .sanguo.MsgGuaxiangGoods guaxiangGoods = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guaxiangGoods:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_guaxianggoods()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_guaxiangGoods;
        if (input->ExpectTag(56)) goto parse_roleLevel;
        break;
      }

      // required uint32 roleLevel = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rolelevel_)));
          set_has_rolelevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_roleKungfuProperties;
        break;
      }

      // required .sanguo.MsgKungfuProperties roleKungfuProperties = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleKungfuProperties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rolekungfuproperties()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetFriendPropertiesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .sanguo.MsgID msgID = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // required .sanguo.StatusCode status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // required .sanguo.MsgRoleProperties roleProperties = 3;
  if (has_roleproperties()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->roleproperties(), output);
  }

  // repeated .sanguo.MsgRoleBagGoods bagGoods = 4;
  for (int i = 0; i < this->baggoods_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->baggoods(i), output);
  }

  // repeated .sanguo.MsgRoleGemBagGoods gemBagGoods = 5;
  for (int i = 0; i < this->gembaggoods_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->gembaggoods(i), output);
  }

  // repeated .sanguo.MsgGuaxiangGoods guaxiangGoods = 6;
  for (int i = 0; i < this->guaxianggoods_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->guaxianggoods(i), output);
  }

  // required uint32 roleLevel = 7;
  if (has_rolelevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->rolelevel(), output);
  }

  // required .sanguo.MsgKungfuProperties roleKungfuProperties = 8;
  if (has_rolekungfuproperties()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->rolekungfuproperties(), output);
  }

}

int GetFriendPropertiesResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .sanguo.MsgID msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // required .sanguo.StatusCode status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // required .sanguo.MsgRoleProperties roleProperties = 3;
    if (has_roleproperties()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roleproperties());
    }

    // required uint32 roleLevel = 7;
    if (has_rolelevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rolelevel());
    }

    // required .sanguo.MsgKungfuProperties roleKungfuProperties = 8;
    if (has_rolekungfuproperties()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rolekungfuproperties());
    }

  }
  // repeated .sanguo.MsgRoleBagGoods bagGoods = 4;
  total_size += 1 * this->baggoods_size();
  for (int i = 0; i < this->baggoods_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->baggoods(i));
  }

  // repeated .sanguo.MsgRoleGemBagGoods gemBagGoods = 5;
  total_size += 1 * this->gembaggoods_size();
  for (int i = 0; i < this->gembaggoods_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gembaggoods(i));
  }

  // repeated .sanguo.MsgGuaxiangGoods guaxiangGoods = 6;
  total_size += 1 * this->guaxianggoods_size();
  for (int i = 0; i < this->guaxianggoods_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guaxianggoods(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFriendPropertiesResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetFriendPropertiesResponse*>(&from));
}

void GetFriendPropertiesResponse::MergeFrom(const GetFriendPropertiesResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  baggoods_.MergeFrom(from.baggoods_);
  gembaggoods_.MergeFrom(from.gembaggoods_);
  guaxianggoods_.MergeFrom(from.guaxianggoods_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_roleproperties()) {
      mutable_roleproperties()->::sanguo::MsgRoleProperties::MergeFrom(from.roleproperties());
    }
    if (from.has_rolelevel()) {
      set_rolelevel(from.rolelevel());
    }
    if (from.has_rolekungfuproperties()) {
      mutable_rolekungfuproperties()->::sanguo::MsgKungfuProperties::MergeFrom(from.rolekungfuproperties());
    }
  }
}

void GetFriendPropertiesResponse::CopyFrom(const GetFriendPropertiesResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFriendPropertiesResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000c7) != 0x000000c7) return false;

  if (has_roleproperties()) {
    if (!this->roleproperties().IsInitialized()) return false;
  }
  for (int i = 0; i < baggoods_size(); i++) {
    if (!this->baggoods(i).IsInitialized()) return false;
  }
  for (int i = 0; i < gembaggoods_size(); i++) {
    if (!this->gembaggoods(i).IsInitialized()) return false;
  }
  for (int i = 0; i < guaxianggoods_size(); i++) {
    if (!this->guaxianggoods(i).IsInitialized()) return false;
  }
  if (has_rolekungfuproperties()) {
    if (!this->rolekungfuproperties().IsInitialized()) return false;
  }
  return true;
}

void GetFriendPropertiesResponse::Swap(GetFriendPropertiesResponse* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(status_, other->status_);
    std::swap(roleproperties_, other->roleproperties_);
    baggoods_.Swap(&other->baggoods_);
    gembaggoods_.Swap(&other->gembaggoods_);
    guaxianggoods_.Swap(&other->guaxianggoods_);
    std::swap(rolelevel_, other->rolelevel_);
    std::swap(rolekungfuproperties_, other->rolekungfuproperties_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetFriendPropertiesResponse::GetTypeName() const {
  return "sanguo.GetFriendPropertiesResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sanguo

// @@protoc_insertion_point(global_scope)
