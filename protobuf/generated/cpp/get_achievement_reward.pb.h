// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: get_achievement_reward.proto

#ifndef PROTOBUF_get_5fachievement_5freward_2eproto__INCLUDED
#define PROTOBUF_get_5fachievement_5freward_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "msg_id.pb.h"
#include "msg_status_code.pb.h"
#include "gift_info.pb.h"
#include "achievement_info.pb.h"
// @@protoc_insertion_point(includes)

namespace sanguo {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_get_5fachievement_5freward_2eproto();
void protobuf_AssignDesc_get_5fachievement_5freward_2eproto();
void protobuf_ShutdownFile_get_5fachievement_5freward_2eproto();

class GetAchievementRewardRequest;
class GetAchievementRewardResponse;

// ===================================================================

class GetAchievementRewardRequest : public ::google::protobuf::MessageLite {
 public:
  GetAchievementRewardRequest();
  virtual ~GetAchievementRewardRequest();

  GetAchievementRewardRequest(const GetAchievementRewardRequest& from);

  inline GetAchievementRewardRequest& operator=(const GetAchievementRewardRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const GetAchievementRewardRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const GetAchievementRewardRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(GetAchievementRewardRequest* other);

  // implements Message ----------------------------------------------

  GetAchievementRewardRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GetAchievementRewardRequest& from);
  void MergeFrom(const GetAchievementRewardRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .sanguo.MsgID msgID = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline ::sanguo::MsgID msgid() const;
  inline void set_msgid(::sanguo::MsgID value);

  // required uint32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:sanguo.GetAchievementRewardRequest)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_id();
  inline void clear_has_id();

  int msgid_;
  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_get_5fachievement_5freward_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_get_5fachievement_5freward_2eproto();
  #endif
  friend void protobuf_AssignDesc_get_5fachievement_5freward_2eproto();
  friend void protobuf_ShutdownFile_get_5fachievement_5freward_2eproto();

  void InitAsDefaultInstance();
  static GetAchievementRewardRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetAchievementRewardResponse : public ::google::protobuf::MessageLite {
 public:
  GetAchievementRewardResponse();
  virtual ~GetAchievementRewardResponse();

  GetAchievementRewardResponse(const GetAchievementRewardResponse& from);

  inline GetAchievementRewardResponse& operator=(const GetAchievementRewardResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const GetAchievementRewardResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const GetAchievementRewardResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(GetAchievementRewardResponse* other);

  // implements Message ----------------------------------------------

  GetAchievementRewardResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GetAchievementRewardResponse& from);
  void MergeFrom(const GetAchievementRewardResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .sanguo.MsgID msgID = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline ::sanguo::MsgID msgid() const;
  inline void set_msgid(::sanguo::MsgID value);

  // required .sanguo.StatusCode status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::sanguo::StatusCode status() const;
  inline void set_status(::sanguo::StatusCode value);

  // required .sanguo.MsgGiftInfo giftInfoData = 3;
  inline bool has_giftinfodata() const;
  inline void clear_giftinfodata();
  static const int kGiftInfoDataFieldNumber = 3;
  inline const ::sanguo::MsgGiftInfo& giftinfodata() const;
  inline ::sanguo::MsgGiftInfo* mutable_giftinfodata();
  inline ::sanguo::MsgGiftInfo* release_giftinfodata();
  inline void set_allocated_giftinfodata(::sanguo::MsgGiftInfo* giftinfodata);

  // required .sanguo.MsgAchievementInfoData achievementData = 4;
  inline bool has_achievementdata() const;
  inline void clear_achievementdata();
  static const int kAchievementDataFieldNumber = 4;
  inline const ::sanguo::MsgAchievementInfoData& achievementdata() const;
  inline ::sanguo::MsgAchievementInfoData* mutable_achievementdata();
  inline ::sanguo::MsgAchievementInfoData* release_achievementdata();
  inline void set_allocated_achievementdata(::sanguo::MsgAchievementInfoData* achievementdata);

  // @@protoc_insertion_point(class_scope:sanguo.GetAchievementRewardResponse)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_giftinfodata();
  inline void clear_has_giftinfodata();
  inline void set_has_achievementdata();
  inline void clear_has_achievementdata();

  int msgid_;
  int status_;
  ::sanguo::MsgGiftInfo* giftinfodata_;
  ::sanguo::MsgAchievementInfoData* achievementdata_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_get_5fachievement_5freward_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_get_5fachievement_5freward_2eproto();
  #endif
  friend void protobuf_AssignDesc_get_5fachievement_5freward_2eproto();
  friend void protobuf_ShutdownFile_get_5fachievement_5freward_2eproto();

  void InitAsDefaultInstance();
  static GetAchievementRewardResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// GetAchievementRewardRequest

// required .sanguo.MsgID msgID = 1;
inline bool GetAchievementRewardRequest::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetAchievementRewardRequest::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetAchievementRewardRequest::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetAchievementRewardRequest::clear_msgid() {
  msgid_ = 1;
  clear_has_msgid();
}
inline ::sanguo::MsgID GetAchievementRewardRequest::msgid() const {
  return static_cast< ::sanguo::MsgID >(msgid_);
}
inline void GetAchievementRewardRequest::set_msgid(::sanguo::MsgID value) {
  assert(::sanguo::MsgID_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// required uint32 id = 2;
inline bool GetAchievementRewardRequest::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetAchievementRewardRequest::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetAchievementRewardRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetAchievementRewardRequest::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 GetAchievementRewardRequest::id() const {
  return id_;
}
inline void GetAchievementRewardRequest::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// GetAchievementRewardResponse

// required .sanguo.MsgID msgID = 1;
inline bool GetAchievementRewardResponse::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetAchievementRewardResponse::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetAchievementRewardResponse::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetAchievementRewardResponse::clear_msgid() {
  msgid_ = 1;
  clear_has_msgid();
}
inline ::sanguo::MsgID GetAchievementRewardResponse::msgid() const {
  return static_cast< ::sanguo::MsgID >(msgid_);
}
inline void GetAchievementRewardResponse::set_msgid(::sanguo::MsgID value) {
  assert(::sanguo::MsgID_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// required .sanguo.StatusCode status = 2;
inline bool GetAchievementRewardResponse::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetAchievementRewardResponse::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetAchievementRewardResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetAchievementRewardResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::sanguo::StatusCode GetAchievementRewardResponse::status() const {
  return static_cast< ::sanguo::StatusCode >(status_);
}
inline void GetAchievementRewardResponse::set_status(::sanguo::StatusCode value) {
  assert(::sanguo::StatusCode_IsValid(value));
  set_has_status();
  status_ = value;
}

// required .sanguo.MsgGiftInfo giftInfoData = 3;
inline bool GetAchievementRewardResponse::has_giftinfodata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetAchievementRewardResponse::set_has_giftinfodata() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetAchievementRewardResponse::clear_has_giftinfodata() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetAchievementRewardResponse::clear_giftinfodata() {
  if (giftinfodata_ != NULL) giftinfodata_->::sanguo::MsgGiftInfo::Clear();
  clear_has_giftinfodata();
}
inline const ::sanguo::MsgGiftInfo& GetAchievementRewardResponse::giftinfodata() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return giftinfodata_ != NULL ? *giftinfodata_ : *default_instance().giftinfodata_;
#else
  return giftinfodata_ != NULL ? *giftinfodata_ : *default_instance_->giftinfodata_;
#endif
}
inline ::sanguo::MsgGiftInfo* GetAchievementRewardResponse::mutable_giftinfodata() {
  set_has_giftinfodata();
  if (giftinfodata_ == NULL) giftinfodata_ = new ::sanguo::MsgGiftInfo;
  return giftinfodata_;
}
inline ::sanguo::MsgGiftInfo* GetAchievementRewardResponse::release_giftinfodata() {
  clear_has_giftinfodata();
  ::sanguo::MsgGiftInfo* temp = giftinfodata_;
  giftinfodata_ = NULL;
  return temp;
}
inline void GetAchievementRewardResponse::set_allocated_giftinfodata(::sanguo::MsgGiftInfo* giftinfodata) {
  delete giftinfodata_;
  giftinfodata_ = giftinfodata;
  if (giftinfodata) {
    set_has_giftinfodata();
  } else {
    clear_has_giftinfodata();
  }
}

// required .sanguo.MsgAchievementInfoData achievementData = 4;
inline bool GetAchievementRewardResponse::has_achievementdata() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetAchievementRewardResponse::set_has_achievementdata() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetAchievementRewardResponse::clear_has_achievementdata() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetAchievementRewardResponse::clear_achievementdata() {
  if (achievementdata_ != NULL) achievementdata_->::sanguo::MsgAchievementInfoData::Clear();
  clear_has_achievementdata();
}
inline const ::sanguo::MsgAchievementInfoData& GetAchievementRewardResponse::achievementdata() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return achievementdata_ != NULL ? *achievementdata_ : *default_instance().achievementdata_;
#else
  return achievementdata_ != NULL ? *achievementdata_ : *default_instance_->achievementdata_;
#endif
}
inline ::sanguo::MsgAchievementInfoData* GetAchievementRewardResponse::mutable_achievementdata() {
  set_has_achievementdata();
  if (achievementdata_ == NULL) achievementdata_ = new ::sanguo::MsgAchievementInfoData;
  return achievementdata_;
}
inline ::sanguo::MsgAchievementInfoData* GetAchievementRewardResponse::release_achievementdata() {
  clear_has_achievementdata();
  ::sanguo::MsgAchievementInfoData* temp = achievementdata_;
  achievementdata_ = NULL;
  return temp;
}
inline void GetAchievementRewardResponse::set_allocated_achievementdata(::sanguo::MsgAchievementInfoData* achievementdata) {
  delete achievementdata_;
  achievementdata_ = achievementdata;
  if (achievementdata) {
    set_has_achievementdata();
  } else {
    clear_has_achievementdata();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sanguo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_get_5fachievement_5freward_2eproto__INCLUDED
