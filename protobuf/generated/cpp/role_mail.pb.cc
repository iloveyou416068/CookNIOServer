// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: role_mail.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "role_mail.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace sanguo {

void protobuf_ShutdownFile_role_5fmail_2eproto() {
  delete MsgRoleMail::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_role_5fmail_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_role_5fmail_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::sanguo::protobuf_AddDesc_constants_2eproto();
  MsgRoleMail::default_instance_ = new MsgRoleMail();
  MsgRoleMail::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_role_5fmail_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_role_5fmail_2eproto_once_);
void protobuf_AddDesc_role_5fmail_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_role_5fmail_2eproto_once_,
                 &protobuf_AddDesc_role_5fmail_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_role_5fmail_2eproto {
  StaticDescriptorInitializer_role_5fmail_2eproto() {
    protobuf_AddDesc_role_5fmail_2eproto();
  }
} static_descriptor_initializer_role_5fmail_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int MsgRoleMail::kIdFieldNumber;
const int MsgRoleMail::kTiltleFieldNumber;
const int MsgRoleMail::kContextFieldNumber;
const int MsgRoleMail::kKitFieldNumber;
const int MsgRoleMail::kSenderIdFieldNumber;
const int MsgRoleMail::kReceiverIdFieldNumber;
const int MsgRoleMail::kMailStatusFieldNumber;
const int MsgRoleMail::kKitStatusFieldNumber;
const int MsgRoleMail::kEndTimeFieldNumber;
const int MsgRoleMail::kSenderNameFieldNumber;
const int MsgRoleMail::kReceiverNameFieldNumber;
const int MsgRoleMail::kHaveRewardFieldNumber;
const int MsgRoleMail::kNameFieldNumber;
const int MsgRoleMail::kStartTimeFieldNumber;
#endif  // !_MSC_VER

MsgRoleMail::MsgRoleMail()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void MsgRoleMail::InitAsDefaultInstance() {
}

MsgRoleMail::MsgRoleMail(const MsgRoleMail& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void MsgRoleMail::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  tiltle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  context_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  kit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  senderid_ = GOOGLE_ULONGLONG(0);
  receiverid_ = GOOGLE_ULONGLONG(0);
  mailstatus_ = 0u;
  kitstatus_ = 0u;
  endtime_ = GOOGLE_ULONGLONG(0);
  sendername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  receivername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  havereward_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  starttime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgRoleMail::~MsgRoleMail() {
  SharedDtor();
}

void MsgRoleMail::SharedDtor() {
  if (tiltle_ != &::google::protobuf::internal::kEmptyString) {
    delete tiltle_;
  }
  if (context_ != &::google::protobuf::internal::kEmptyString) {
    delete context_;
  }
  if (kit_ != &::google::protobuf::internal::kEmptyString) {
    delete kit_;
  }
  if (sendername_ != &::google::protobuf::internal::kEmptyString) {
    delete sendername_;
  }
  if (receivername_ != &::google::protobuf::internal::kEmptyString) {
    delete receivername_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (starttime_ != &::google::protobuf::internal::kEmptyString) {
    delete starttime_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgRoleMail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgRoleMail& MsgRoleMail::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_role_5fmail_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_role_5fmail_2eproto();
#endif
  return *default_instance_;
}

MsgRoleMail* MsgRoleMail::default_instance_ = NULL;

MsgRoleMail* MsgRoleMail::New() const {
  return new MsgRoleMail;
}

void MsgRoleMail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    if (has_tiltle()) {
      if (tiltle_ != &::google::protobuf::internal::kEmptyString) {
        tiltle_->clear();
      }
    }
    if (has_context()) {
      if (context_ != &::google::protobuf::internal::kEmptyString) {
        context_->clear();
      }
    }
    if (has_kit()) {
      if (kit_ != &::google::protobuf::internal::kEmptyString) {
        kit_->clear();
      }
    }
    senderid_ = GOOGLE_ULONGLONG(0);
    receiverid_ = GOOGLE_ULONGLONG(0);
    mailstatus_ = 0u;
    kitstatus_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    endtime_ = GOOGLE_ULONGLONG(0);
    if (has_sendername()) {
      if (sendername_ != &::google::protobuf::internal::kEmptyString) {
        sendername_->clear();
      }
    }
    if (has_receivername()) {
      if (receivername_ != &::google::protobuf::internal::kEmptyString) {
        receivername_->clear();
      }
    }
    havereward_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_starttime()) {
      if (starttime_ != &::google::protobuf::internal::kEmptyString) {
        starttime_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool MsgRoleMail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tiltle;
        break;
      }

      // required string tiltle = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tiltle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tiltle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_context;
        break;
      }

      // required string context = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_context:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_context()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_kit;
        break;
      }

      // required string kit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kit()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_senderId;
        break;
      }

      // required uint64 senderId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_senderId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &senderid_)));
          set_has_senderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_receiverId;
        break;
      }

      // required uint64 receiverId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_receiverId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &receiverid_)));
          set_has_receiverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_mailStatus;
        break;
      }

      // required uint32 mailStatus = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mailStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mailstatus_)));
          set_has_mailstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_kitStatus;
        break;
      }

      // required uint32 kitStatus = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kitStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kitstatus_)));
          set_has_kitstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_endTime;
        break;
      }

      // required uint64 endTime = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_senderName;
        break;
      }

      // required string senderName = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_senderName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sendername()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_receiverName;
        break;
      }

      // required string receiverName = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_receiverName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_receivername()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_haveReward;
        break;
      }

      // required uint32 haveReward = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_haveReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &havereward_)));
          set_has_havereward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_name;
        break;
      }

      // required string name = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_startTime;
        break;
      }

      // required string startTime = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_startTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_starttime()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgRoleMail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // required string tiltle = 2;
  if (has_tiltle()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->tiltle(), output);
  }

  // required string context = 3;
  if (has_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->context(), output);
  }

  // required string kit = 4;
  if (has_kit()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->kit(), output);
  }

  // required uint64 senderId = 5;
  if (has_senderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->senderid(), output);
  }

  // required uint64 receiverId = 6;
  if (has_receiverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->receiverid(), output);
  }

  // required uint32 mailStatus = 7;
  if (has_mailstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->mailstatus(), output);
  }

  // required uint32 kitStatus = 8;
  if (has_kitstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->kitstatus(), output);
  }

  // required uint64 endTime = 9;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->endtime(), output);
  }

  // required string senderName = 10;
  if (has_sendername()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->sendername(), output);
  }

  // required string receiverName = 11;
  if (has_receivername()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->receivername(), output);
  }

  // required uint32 haveReward = 12;
  if (has_havereward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->havereward(), output);
  }

  // required string name = 13;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->name(), output);
  }

  // required string startTime = 14;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->starttime(), output);
  }

}

int MsgRoleMail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // required string tiltle = 2;
    if (has_tiltle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tiltle());
    }

    // required string context = 3;
    if (has_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->context());
    }

    // required string kit = 4;
    if (has_kit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->kit());
    }

    // required uint64 senderId = 5;
    if (has_senderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->senderid());
    }

    // required uint64 receiverId = 6;
    if (has_receiverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->receiverid());
    }

    // required uint32 mailStatus = 7;
    if (has_mailstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mailstatus());
    }

    // required uint32 kitStatus = 8;
    if (has_kitstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kitstatus());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint64 endTime = 9;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->endtime());
    }

    // required string senderName = 10;
    if (has_sendername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sendername());
    }

    // required string receiverName = 11;
    if (has_receivername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->receivername());
    }

    // required uint32 haveReward = 12;
    if (has_havereward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->havereward());
    }

    // required string name = 13;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string startTime = 14;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->starttime());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgRoleMail::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgRoleMail*>(&from));
}

void MsgRoleMail::MergeFrom(const MsgRoleMail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_tiltle()) {
      set_tiltle(from.tiltle());
    }
    if (from.has_context()) {
      set_context(from.context());
    }
    if (from.has_kit()) {
      set_kit(from.kit());
    }
    if (from.has_senderid()) {
      set_senderid(from.senderid());
    }
    if (from.has_receiverid()) {
      set_receiverid(from.receiverid());
    }
    if (from.has_mailstatus()) {
      set_mailstatus(from.mailstatus());
    }
    if (from.has_kitstatus()) {
      set_kitstatus(from.kitstatus());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_sendername()) {
      set_sendername(from.sendername());
    }
    if (from.has_receivername()) {
      set_receivername(from.receivername());
    }
    if (from.has_havereward()) {
      set_havereward(from.havereward());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
  }
}

void MsgRoleMail::CopyFrom(const MsgRoleMail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRoleMail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00003fff) != 0x00003fff) return false;

  return true;
}

void MsgRoleMail::Swap(MsgRoleMail* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(tiltle_, other->tiltle_);
    std::swap(context_, other->context_);
    std::swap(kit_, other->kit_);
    std::swap(senderid_, other->senderid_);
    std::swap(receiverid_, other->receiverid_);
    std::swap(mailstatus_, other->mailstatus_);
    std::swap(kitstatus_, other->kitstatus_);
    std::swap(endtime_, other->endtime_);
    std::swap(sendername_, other->sendername_);
    std::swap(receivername_, other->receivername_);
    std::swap(havereward_, other->havereward_);
    std::swap(name_, other->name_);
    std::swap(starttime_, other->starttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MsgRoleMail::GetTypeName() const {
  return "sanguo.MsgRoleMail";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sanguo

// @@protoc_insertion_point(global_scope)
