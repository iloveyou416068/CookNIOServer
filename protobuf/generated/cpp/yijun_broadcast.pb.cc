// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: yijun_broadcast.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "yijun_broadcast.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace sanguo {

void protobuf_ShutdownFile_yijun_5fbroadcast_2eproto() {
  delete ApproveAppBroadcast::default_instance_;
  delete PromoteGeneralBroadcast::default_instance_;
  delete DismissYijunBroadcast::default_instance_;
  delete TransferMarshalBroadcast::default_instance_;
  delete LevelUpYijunBroadcast::default_instance_;
  delete LevelUpYijunBuildingBroadcast::default_instance_;
  delete SendAppBroadcast::default_instance_;
  delete DemoteGeneralBroadcast::default_instance_;
  delete KickMemberBroadcast::default_instance_;
  delete ExitYijunBroadcast::default_instance_;
  delete SendYijunCaptureBroadcast::default_instance_;
  delete SendYijunCaptureResultBroadcast::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_yijun_5fbroadcast_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_yijun_5fbroadcast_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::sanguo::protobuf_AddDesc_msg_5fid_2eproto();
  ::sanguo::protobuf_AddDesc_msg_5fstatus_5fcode_2eproto();
  ApproveAppBroadcast::default_instance_ = new ApproveAppBroadcast();
  PromoteGeneralBroadcast::default_instance_ = new PromoteGeneralBroadcast();
  DismissYijunBroadcast::default_instance_ = new DismissYijunBroadcast();
  TransferMarshalBroadcast::default_instance_ = new TransferMarshalBroadcast();
  LevelUpYijunBroadcast::default_instance_ = new LevelUpYijunBroadcast();
  LevelUpYijunBuildingBroadcast::default_instance_ = new LevelUpYijunBuildingBroadcast();
  SendAppBroadcast::default_instance_ = new SendAppBroadcast();
  DemoteGeneralBroadcast::default_instance_ = new DemoteGeneralBroadcast();
  KickMemberBroadcast::default_instance_ = new KickMemberBroadcast();
  ExitYijunBroadcast::default_instance_ = new ExitYijunBroadcast();
  SendYijunCaptureBroadcast::default_instance_ = new SendYijunCaptureBroadcast();
  SendYijunCaptureResultBroadcast::default_instance_ = new SendYijunCaptureResultBroadcast();
  ApproveAppBroadcast::default_instance_->InitAsDefaultInstance();
  PromoteGeneralBroadcast::default_instance_->InitAsDefaultInstance();
  DismissYijunBroadcast::default_instance_->InitAsDefaultInstance();
  TransferMarshalBroadcast::default_instance_->InitAsDefaultInstance();
  LevelUpYijunBroadcast::default_instance_->InitAsDefaultInstance();
  LevelUpYijunBuildingBroadcast::default_instance_->InitAsDefaultInstance();
  SendAppBroadcast::default_instance_->InitAsDefaultInstance();
  DemoteGeneralBroadcast::default_instance_->InitAsDefaultInstance();
  KickMemberBroadcast::default_instance_->InitAsDefaultInstance();
  ExitYijunBroadcast::default_instance_->InitAsDefaultInstance();
  SendYijunCaptureBroadcast::default_instance_->InitAsDefaultInstance();
  SendYijunCaptureResultBroadcast::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_yijun_5fbroadcast_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_yijun_5fbroadcast_2eproto_once_);
void protobuf_AddDesc_yijun_5fbroadcast_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_yijun_5fbroadcast_2eproto_once_,
                 &protobuf_AddDesc_yijun_5fbroadcast_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_yijun_5fbroadcast_2eproto {
  StaticDescriptorInitializer_yijun_5fbroadcast_2eproto() {
    protobuf_AddDesc_yijun_5fbroadcast_2eproto();
  }
} static_descriptor_initializer_yijun_5fbroadcast_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int ApproveAppBroadcast::kMsgIDFieldNumber;
const int ApproveAppBroadcast::kStatusFieldNumber;
const int ApproveAppBroadcast::kAdminIDFieldNumber;
const int ApproveAppBroadcast::kRoleIDFieldNumber;
const int ApproveAppBroadcast::kRoleNameFieldNumber;
const int ApproveAppBroadcast::kYijunIDFieldNumber;
const int ApproveAppBroadcast::kYijunNameFieldNumber;
#endif  // !_MSC_VER

ApproveAppBroadcast::ApproveAppBroadcast()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ApproveAppBroadcast::InitAsDefaultInstance() {
}

ApproveAppBroadcast::ApproveAppBroadcast(const ApproveAppBroadcast& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ApproveAppBroadcast::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 1;
  status_ = 0;
  adminid_ = GOOGLE_ULONGLONG(0);
  roleid_ = GOOGLE_ULONGLONG(0);
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  yijunid_ = GOOGLE_ULONGLONG(0);
  yijunname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApproveAppBroadcast::~ApproveAppBroadcast() {
  SharedDtor();
}

void ApproveAppBroadcast::SharedDtor() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (yijunname_ != &::google::protobuf::internal::kEmptyString) {
    delete yijunname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ApproveAppBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ApproveAppBroadcast& ApproveAppBroadcast::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_yijun_5fbroadcast_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_yijun_5fbroadcast_2eproto();
#endif
  return *default_instance_;
}

ApproveAppBroadcast* ApproveAppBroadcast::default_instance_ = NULL;

ApproveAppBroadcast* ApproveAppBroadcast::New() const {
  return new ApproveAppBroadcast;
}

void ApproveAppBroadcast::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 1;
    status_ = 0;
    adminid_ = GOOGLE_ULONGLONG(0);
    roleid_ = GOOGLE_ULONGLONG(0);
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    yijunid_ = GOOGLE_ULONGLONG(0);
    if (has_yijunname()) {
      if (yijunname_ != &::google::protobuf::internal::kEmptyString) {
        yijunname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ApproveAppBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sanguo.MsgID msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::sanguo::MsgID >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .sanguo.StatusCode status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::StatusCode_IsValid(value)) {
            set_status(static_cast< ::sanguo::StatusCode >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_adminID;
        break;
      }

      // required uint64 adminID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_adminID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &adminid_)));
          set_has_adminid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_roleID;
        break;
      }

      // required uint64 roleID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_roleName;
        break;
      }

      // required string roleName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_yijunID;
        break;
      }

      // required uint64 yijunID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_yijunID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &yijunid_)));
          set_has_yijunid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_yijunName;
        break;
      }

      // required string yijunName = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_yijunName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_yijunname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ApproveAppBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .sanguo.MsgID msgID = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // required .sanguo.StatusCode status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // required uint64 adminID = 3;
  if (has_adminid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->adminid(), output);
  }

  // required uint64 roleID = 4;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->roleid(), output);
  }

  // required string roleName = 5;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->rolename(), output);
  }

  // required uint64 yijunID = 6;
  if (has_yijunid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->yijunid(), output);
  }

  // required string yijunName = 7;
  if (has_yijunname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->yijunname(), output);
  }

}

int ApproveAppBroadcast::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .sanguo.MsgID msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // required .sanguo.StatusCode status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // required uint64 adminID = 3;
    if (has_adminid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->adminid());
    }

    // required uint64 roleID = 4;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

    // required string roleName = 5;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }

    // required uint64 yijunID = 6;
    if (has_yijunid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->yijunid());
    }

    // required string yijunName = 7;
    if (has_yijunname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->yijunname());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApproveAppBroadcast::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ApproveAppBroadcast*>(&from));
}

void ApproveAppBroadcast::MergeFrom(const ApproveAppBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_adminid()) {
      set_adminid(from.adminid());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_yijunid()) {
      set_yijunid(from.yijunid());
    }
    if (from.has_yijunname()) {
      set_yijunname(from.yijunname());
    }
  }
}

void ApproveAppBroadcast::CopyFrom(const ApproveAppBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApproveAppBroadcast::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void ApproveAppBroadcast::Swap(ApproveAppBroadcast* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(status_, other->status_);
    std::swap(adminid_, other->adminid_);
    std::swap(roleid_, other->roleid_);
    std::swap(rolename_, other->rolename_);
    std::swap(yijunid_, other->yijunid_);
    std::swap(yijunname_, other->yijunname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ApproveAppBroadcast::GetTypeName() const {
  return "sanguo.ApproveAppBroadcast";
}


// ===================================================================

#ifndef _MSC_VER
const int PromoteGeneralBroadcast::kMsgIDFieldNumber;
const int PromoteGeneralBroadcast::kStatusFieldNumber;
const int PromoteGeneralBroadcast::kAdminIDFieldNumber;
const int PromoteGeneralBroadcast::kAdminNameFieldNumber;
const int PromoteGeneralBroadcast::kRoleIDFieldNumber;
const int PromoteGeneralBroadcast::kRoleNameFieldNumber;
#endif  // !_MSC_VER

PromoteGeneralBroadcast::PromoteGeneralBroadcast()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PromoteGeneralBroadcast::InitAsDefaultInstance() {
}

PromoteGeneralBroadcast::PromoteGeneralBroadcast(const PromoteGeneralBroadcast& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PromoteGeneralBroadcast::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 1;
  status_ = 0;
  adminid_ = GOOGLE_ULONGLONG(0);
  adminname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roleid_ = GOOGLE_ULONGLONG(0);
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PromoteGeneralBroadcast::~PromoteGeneralBroadcast() {
  SharedDtor();
}

void PromoteGeneralBroadcast::SharedDtor() {
  if (adminname_ != &::google::protobuf::internal::kEmptyString) {
    delete adminname_;
  }
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PromoteGeneralBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PromoteGeneralBroadcast& PromoteGeneralBroadcast::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_yijun_5fbroadcast_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_yijun_5fbroadcast_2eproto();
#endif
  return *default_instance_;
}

PromoteGeneralBroadcast* PromoteGeneralBroadcast::default_instance_ = NULL;

PromoteGeneralBroadcast* PromoteGeneralBroadcast::New() const {
  return new PromoteGeneralBroadcast;
}

void PromoteGeneralBroadcast::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 1;
    status_ = 0;
    adminid_ = GOOGLE_ULONGLONG(0);
    if (has_adminname()) {
      if (adminname_ != &::google::protobuf::internal::kEmptyString) {
        adminname_->clear();
      }
    }
    roleid_ = GOOGLE_ULONGLONG(0);
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PromoteGeneralBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sanguo.MsgID msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::sanguo::MsgID >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .sanguo.StatusCode status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::StatusCode_IsValid(value)) {
            set_status(static_cast< ::sanguo::StatusCode >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_adminID;
        break;
      }

      // required uint64 adminID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_adminID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &adminid_)));
          set_has_adminid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_adminName;
        break;
      }

      // required string adminName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_adminName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_adminname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_roleID;
        break;
      }

      // required uint64 roleID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_roleName;
        break;
      }

      // required string roleName = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PromoteGeneralBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .sanguo.MsgID msgID = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // required .sanguo.StatusCode status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // required uint64 adminID = 3;
  if (has_adminid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->adminid(), output);
  }

  // required string adminName = 4;
  if (has_adminname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->adminname(), output);
  }

  // required uint64 roleID = 5;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->roleid(), output);
  }

  // required string roleName = 6;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->rolename(), output);
  }

}

int PromoteGeneralBroadcast::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .sanguo.MsgID msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // required .sanguo.StatusCode status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // required uint64 adminID = 3;
    if (has_adminid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->adminid());
    }

    // required string adminName = 4;
    if (has_adminname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->adminname());
    }

    // required uint64 roleID = 5;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

    // required string roleName = 6;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PromoteGeneralBroadcast::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PromoteGeneralBroadcast*>(&from));
}

void PromoteGeneralBroadcast::MergeFrom(const PromoteGeneralBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_adminid()) {
      set_adminid(from.adminid());
    }
    if (from.has_adminname()) {
      set_adminname(from.adminname());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
  }
}

void PromoteGeneralBroadcast::CopyFrom(const PromoteGeneralBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PromoteGeneralBroadcast::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void PromoteGeneralBroadcast::Swap(PromoteGeneralBroadcast* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(status_, other->status_);
    std::swap(adminid_, other->adminid_);
    std::swap(adminname_, other->adminname_);
    std::swap(roleid_, other->roleid_);
    std::swap(rolename_, other->rolename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PromoteGeneralBroadcast::GetTypeName() const {
  return "sanguo.PromoteGeneralBroadcast";
}


// ===================================================================

#ifndef _MSC_VER
const int DismissYijunBroadcast::kMsgIDFieldNumber;
const int DismissYijunBroadcast::kStatusFieldNumber;
#endif  // !_MSC_VER

DismissYijunBroadcast::DismissYijunBroadcast()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DismissYijunBroadcast::InitAsDefaultInstance() {
}

DismissYijunBroadcast::DismissYijunBroadcast(const DismissYijunBroadcast& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DismissYijunBroadcast::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 1;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DismissYijunBroadcast::~DismissYijunBroadcast() {
  SharedDtor();
}

void DismissYijunBroadcast::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DismissYijunBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DismissYijunBroadcast& DismissYijunBroadcast::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_yijun_5fbroadcast_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_yijun_5fbroadcast_2eproto();
#endif
  return *default_instance_;
}

DismissYijunBroadcast* DismissYijunBroadcast::default_instance_ = NULL;

DismissYijunBroadcast* DismissYijunBroadcast::New() const {
  return new DismissYijunBroadcast;
}

void DismissYijunBroadcast::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 1;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DismissYijunBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sanguo.MsgID msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::sanguo::MsgID >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .sanguo.StatusCode status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::StatusCode_IsValid(value)) {
            set_status(static_cast< ::sanguo::StatusCode >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DismissYijunBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .sanguo.MsgID msgID = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // required .sanguo.StatusCode status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

}

int DismissYijunBroadcast::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .sanguo.MsgID msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // required .sanguo.StatusCode status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DismissYijunBroadcast::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DismissYijunBroadcast*>(&from));
}

void DismissYijunBroadcast::MergeFrom(const DismissYijunBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
}

void DismissYijunBroadcast::CopyFrom(const DismissYijunBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DismissYijunBroadcast::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DismissYijunBroadcast::Swap(DismissYijunBroadcast* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DismissYijunBroadcast::GetTypeName() const {
  return "sanguo.DismissYijunBroadcast";
}


// ===================================================================

#ifndef _MSC_VER
const int TransferMarshalBroadcast::kMsgIDFieldNumber;
const int TransferMarshalBroadcast::kStatusFieldNumber;
const int TransferMarshalBroadcast::kAdminIDFieldNumber;
const int TransferMarshalBroadcast::kAdminNameFieldNumber;
const int TransferMarshalBroadcast::kRoleIDFieldNumber;
const int TransferMarshalBroadcast::kRoleNameFieldNumber;
#endif  // !_MSC_VER

TransferMarshalBroadcast::TransferMarshalBroadcast()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TransferMarshalBroadcast::InitAsDefaultInstance() {
}

TransferMarshalBroadcast::TransferMarshalBroadcast(const TransferMarshalBroadcast& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TransferMarshalBroadcast::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 1;
  status_ = 0;
  adminid_ = GOOGLE_ULONGLONG(0);
  adminname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roleid_ = GOOGLE_ULONGLONG(0);
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransferMarshalBroadcast::~TransferMarshalBroadcast() {
  SharedDtor();
}

void TransferMarshalBroadcast::SharedDtor() {
  if (adminname_ != &::google::protobuf::internal::kEmptyString) {
    delete adminname_;
  }
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TransferMarshalBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TransferMarshalBroadcast& TransferMarshalBroadcast::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_yijun_5fbroadcast_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_yijun_5fbroadcast_2eproto();
#endif
  return *default_instance_;
}

TransferMarshalBroadcast* TransferMarshalBroadcast::default_instance_ = NULL;

TransferMarshalBroadcast* TransferMarshalBroadcast::New() const {
  return new TransferMarshalBroadcast;
}

void TransferMarshalBroadcast::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 1;
    status_ = 0;
    adminid_ = GOOGLE_ULONGLONG(0);
    if (has_adminname()) {
      if (adminname_ != &::google::protobuf::internal::kEmptyString) {
        adminname_->clear();
      }
    }
    roleid_ = GOOGLE_ULONGLONG(0);
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TransferMarshalBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sanguo.MsgID msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::sanguo::MsgID >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .sanguo.StatusCode status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::StatusCode_IsValid(value)) {
            set_status(static_cast< ::sanguo::StatusCode >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_adminID;
        break;
      }

      // required uint64 adminID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_adminID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &adminid_)));
          set_has_adminid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_adminName;
        break;
      }

      // required string adminName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_adminName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_adminname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_roleID;
        break;
      }

      // required uint64 roleID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_roleName;
        break;
      }

      // required string roleName = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransferMarshalBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .sanguo.MsgID msgID = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // required .sanguo.StatusCode status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // required uint64 adminID = 3;
  if (has_adminid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->adminid(), output);
  }

  // required string adminName = 4;
  if (has_adminname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->adminname(), output);
  }

  // required uint64 roleID = 5;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->roleid(), output);
  }

  // required string roleName = 6;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->rolename(), output);
  }

}

int TransferMarshalBroadcast::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .sanguo.MsgID msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // required .sanguo.StatusCode status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // required uint64 adminID = 3;
    if (has_adminid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->adminid());
    }

    // required string adminName = 4;
    if (has_adminname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->adminname());
    }

    // required uint64 roleID = 5;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

    // required string roleName = 6;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransferMarshalBroadcast::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TransferMarshalBroadcast*>(&from));
}

void TransferMarshalBroadcast::MergeFrom(const TransferMarshalBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_adminid()) {
      set_adminid(from.adminid());
    }
    if (from.has_adminname()) {
      set_adminname(from.adminname());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
  }
}

void TransferMarshalBroadcast::CopyFrom(const TransferMarshalBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferMarshalBroadcast::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void TransferMarshalBroadcast::Swap(TransferMarshalBroadcast* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(status_, other->status_);
    std::swap(adminid_, other->adminid_);
    std::swap(adminname_, other->adminname_);
    std::swap(roleid_, other->roleid_);
    std::swap(rolename_, other->rolename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TransferMarshalBroadcast::GetTypeName() const {
  return "sanguo.TransferMarshalBroadcast";
}


// ===================================================================

#ifndef _MSC_VER
const int LevelUpYijunBroadcast::kMsgIDFieldNumber;
const int LevelUpYijunBroadcast::kStatusFieldNumber;
const int LevelUpYijunBroadcast::kAdminIDFieldNumber;
const int LevelUpYijunBroadcast::kYijunNameFieldNumber;
const int LevelUpYijunBroadcast::kYijunLevelFieldNumber;
#endif  // !_MSC_VER

LevelUpYijunBroadcast::LevelUpYijunBroadcast()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void LevelUpYijunBroadcast::InitAsDefaultInstance() {
}

LevelUpYijunBroadcast::LevelUpYijunBroadcast(const LevelUpYijunBroadcast& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void LevelUpYijunBroadcast::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 1;
  status_ = 0;
  adminid_ = GOOGLE_ULONGLONG(0);
  yijunname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  yijunlevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LevelUpYijunBroadcast::~LevelUpYijunBroadcast() {
  SharedDtor();
}

void LevelUpYijunBroadcast::SharedDtor() {
  if (yijunname_ != &::google::protobuf::internal::kEmptyString) {
    delete yijunname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LevelUpYijunBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LevelUpYijunBroadcast& LevelUpYijunBroadcast::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_yijun_5fbroadcast_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_yijun_5fbroadcast_2eproto();
#endif
  return *default_instance_;
}

LevelUpYijunBroadcast* LevelUpYijunBroadcast::default_instance_ = NULL;

LevelUpYijunBroadcast* LevelUpYijunBroadcast::New() const {
  return new LevelUpYijunBroadcast;
}

void LevelUpYijunBroadcast::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 1;
    status_ = 0;
    adminid_ = GOOGLE_ULONGLONG(0);
    if (has_yijunname()) {
      if (yijunname_ != &::google::protobuf::internal::kEmptyString) {
        yijunname_->clear();
      }
    }
    yijunlevel_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool LevelUpYijunBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sanguo.MsgID msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::sanguo::MsgID >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .sanguo.StatusCode status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::StatusCode_IsValid(value)) {
            set_status(static_cast< ::sanguo::StatusCode >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_adminID;
        break;
      }

      // required uint64 adminID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_adminID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &adminid_)));
          set_has_adminid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_yijunName;
        break;
      }

      // required string yijunName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_yijunName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_yijunname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_yijunLevel;
        break;
      }

      // required uint32 yijunLevel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_yijunLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &yijunlevel_)));
          set_has_yijunlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LevelUpYijunBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .sanguo.MsgID msgID = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // required .sanguo.StatusCode status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // required uint64 adminID = 3;
  if (has_adminid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->adminid(), output);
  }

  // required string yijunName = 4;
  if (has_yijunname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->yijunname(), output);
  }

  // required uint32 yijunLevel = 5;
  if (has_yijunlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->yijunlevel(), output);
  }

}

int LevelUpYijunBroadcast::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .sanguo.MsgID msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // required .sanguo.StatusCode status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // required uint64 adminID = 3;
    if (has_adminid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->adminid());
    }

    // required string yijunName = 4;
    if (has_yijunname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->yijunname());
    }

    // required uint32 yijunLevel = 5;
    if (has_yijunlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->yijunlevel());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LevelUpYijunBroadcast::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LevelUpYijunBroadcast*>(&from));
}

void LevelUpYijunBroadcast::MergeFrom(const LevelUpYijunBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_adminid()) {
      set_adminid(from.adminid());
    }
    if (from.has_yijunname()) {
      set_yijunname(from.yijunname());
    }
    if (from.has_yijunlevel()) {
      set_yijunlevel(from.yijunlevel());
    }
  }
}

void LevelUpYijunBroadcast::CopyFrom(const LevelUpYijunBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LevelUpYijunBroadcast::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void LevelUpYijunBroadcast::Swap(LevelUpYijunBroadcast* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(status_, other->status_);
    std::swap(adminid_, other->adminid_);
    std::swap(yijunname_, other->yijunname_);
    std::swap(yijunlevel_, other->yijunlevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LevelUpYijunBroadcast::GetTypeName() const {
  return "sanguo.LevelUpYijunBroadcast";
}


// ===================================================================

#ifndef _MSC_VER
const int LevelUpYijunBuildingBroadcast::kMsgIDFieldNumber;
const int LevelUpYijunBuildingBroadcast::kStatusFieldNumber;
const int LevelUpYijunBuildingBroadcast::kAdminNameFieldNumber;
const int LevelUpYijunBuildingBroadcast::kBuildingIdFieldNumber;
const int LevelUpYijunBuildingBroadcast::kBuildingLevelFieldNumber;
#endif  // !_MSC_VER

LevelUpYijunBuildingBroadcast::LevelUpYijunBuildingBroadcast()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void LevelUpYijunBuildingBroadcast::InitAsDefaultInstance() {
}

LevelUpYijunBuildingBroadcast::LevelUpYijunBuildingBroadcast(const LevelUpYijunBuildingBroadcast& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void LevelUpYijunBuildingBroadcast::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 1;
  status_ = 0;
  adminname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  buildingid_ = 0u;
  buildinglevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LevelUpYijunBuildingBroadcast::~LevelUpYijunBuildingBroadcast() {
  SharedDtor();
}

void LevelUpYijunBuildingBroadcast::SharedDtor() {
  if (adminname_ != &::google::protobuf::internal::kEmptyString) {
    delete adminname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LevelUpYijunBuildingBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LevelUpYijunBuildingBroadcast& LevelUpYijunBuildingBroadcast::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_yijun_5fbroadcast_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_yijun_5fbroadcast_2eproto();
#endif
  return *default_instance_;
}

LevelUpYijunBuildingBroadcast* LevelUpYijunBuildingBroadcast::default_instance_ = NULL;

LevelUpYijunBuildingBroadcast* LevelUpYijunBuildingBroadcast::New() const {
  return new LevelUpYijunBuildingBroadcast;
}

void LevelUpYijunBuildingBroadcast::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 1;
    status_ = 0;
    if (has_adminname()) {
      if (adminname_ != &::google::protobuf::internal::kEmptyString) {
        adminname_->clear();
      }
    }
    buildingid_ = 0u;
    buildinglevel_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool LevelUpYijunBuildingBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sanguo.MsgID msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::sanguo::MsgID >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .sanguo.StatusCode status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::StatusCode_IsValid(value)) {
            set_status(static_cast< ::sanguo::StatusCode >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_adminName;
        break;
      }

      // required string adminName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_adminName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_adminname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_buildingId;
        break;
      }

      // required uint32 buildingId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buildingId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buildingid_)));
          set_has_buildingid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_buildingLevel;
        break;
      }

      // required uint32 buildingLevel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buildingLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buildinglevel_)));
          set_has_buildinglevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LevelUpYijunBuildingBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .sanguo.MsgID msgID = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // required .sanguo.StatusCode status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // required string adminName = 3;
  if (has_adminname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->adminname(), output);
  }

  // required uint32 buildingId = 4;
  if (has_buildingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->buildingid(), output);
  }

  // required uint32 buildingLevel = 5;
  if (has_buildinglevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->buildinglevel(), output);
  }

}

int LevelUpYijunBuildingBroadcast::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .sanguo.MsgID msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // required .sanguo.StatusCode status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // required string adminName = 3;
    if (has_adminname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->adminname());
    }

    // required uint32 buildingId = 4;
    if (has_buildingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buildingid());
    }

    // required uint32 buildingLevel = 5;
    if (has_buildinglevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buildinglevel());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LevelUpYijunBuildingBroadcast::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LevelUpYijunBuildingBroadcast*>(&from));
}

void LevelUpYijunBuildingBroadcast::MergeFrom(const LevelUpYijunBuildingBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_adminname()) {
      set_adminname(from.adminname());
    }
    if (from.has_buildingid()) {
      set_buildingid(from.buildingid());
    }
    if (from.has_buildinglevel()) {
      set_buildinglevel(from.buildinglevel());
    }
  }
}

void LevelUpYijunBuildingBroadcast::CopyFrom(const LevelUpYijunBuildingBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LevelUpYijunBuildingBroadcast::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void LevelUpYijunBuildingBroadcast::Swap(LevelUpYijunBuildingBroadcast* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(status_, other->status_);
    std::swap(adminname_, other->adminname_);
    std::swap(buildingid_, other->buildingid_);
    std::swap(buildinglevel_, other->buildinglevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LevelUpYijunBuildingBroadcast::GetTypeName() const {
  return "sanguo.LevelUpYijunBuildingBroadcast";
}


// ===================================================================

#ifndef _MSC_VER
const int SendAppBroadcast::kMsgIDFieldNumber;
const int SendAppBroadcast::kStatusFieldNumber;
const int SendAppBroadcast::kRoleNameFieldNumber;
#endif  // !_MSC_VER

SendAppBroadcast::SendAppBroadcast()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SendAppBroadcast::InitAsDefaultInstance() {
}

SendAppBroadcast::SendAppBroadcast(const SendAppBroadcast& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SendAppBroadcast::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 1;
  status_ = 0;
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendAppBroadcast::~SendAppBroadcast() {
  SharedDtor();
}

void SendAppBroadcast::SharedDtor() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SendAppBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SendAppBroadcast& SendAppBroadcast::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_yijun_5fbroadcast_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_yijun_5fbroadcast_2eproto();
#endif
  return *default_instance_;
}

SendAppBroadcast* SendAppBroadcast::default_instance_ = NULL;

SendAppBroadcast* SendAppBroadcast::New() const {
  return new SendAppBroadcast;
}

void SendAppBroadcast::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 1;
    status_ = 0;
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SendAppBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sanguo.MsgID msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::sanguo::MsgID >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .sanguo.StatusCode status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::StatusCode_IsValid(value)) {
            set_status(static_cast< ::sanguo::StatusCode >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_roleName;
        break;
      }

      // required string roleName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SendAppBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .sanguo.MsgID msgID = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // required .sanguo.StatusCode status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // required string roleName = 3;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->rolename(), output);
  }

}

int SendAppBroadcast::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .sanguo.MsgID msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // required .sanguo.StatusCode status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // required string roleName = 3;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendAppBroadcast::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SendAppBroadcast*>(&from));
}

void SendAppBroadcast::MergeFrom(const SendAppBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
  }
}

void SendAppBroadcast::CopyFrom(const SendAppBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendAppBroadcast::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SendAppBroadcast::Swap(SendAppBroadcast* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(status_, other->status_);
    std::swap(rolename_, other->rolename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SendAppBroadcast::GetTypeName() const {
  return "sanguo.SendAppBroadcast";
}


// ===================================================================

#ifndef _MSC_VER
const int DemoteGeneralBroadcast::kMsgIDFieldNumber;
const int DemoteGeneralBroadcast::kStatusFieldNumber;
const int DemoteGeneralBroadcast::kAdminIDFieldNumber;
const int DemoteGeneralBroadcast::kAdminNameFieldNumber;
const int DemoteGeneralBroadcast::kRoleIDFieldNumber;
const int DemoteGeneralBroadcast::kRoleNameFieldNumber;
#endif  // !_MSC_VER

DemoteGeneralBroadcast::DemoteGeneralBroadcast()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DemoteGeneralBroadcast::InitAsDefaultInstance() {
}

DemoteGeneralBroadcast::DemoteGeneralBroadcast(const DemoteGeneralBroadcast& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DemoteGeneralBroadcast::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 1;
  status_ = 0;
  adminid_ = GOOGLE_ULONGLONG(0);
  adminname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roleid_ = GOOGLE_ULONGLONG(0);
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DemoteGeneralBroadcast::~DemoteGeneralBroadcast() {
  SharedDtor();
}

void DemoteGeneralBroadcast::SharedDtor() {
  if (adminname_ != &::google::protobuf::internal::kEmptyString) {
    delete adminname_;
  }
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DemoteGeneralBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DemoteGeneralBroadcast& DemoteGeneralBroadcast::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_yijun_5fbroadcast_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_yijun_5fbroadcast_2eproto();
#endif
  return *default_instance_;
}

DemoteGeneralBroadcast* DemoteGeneralBroadcast::default_instance_ = NULL;

DemoteGeneralBroadcast* DemoteGeneralBroadcast::New() const {
  return new DemoteGeneralBroadcast;
}

void DemoteGeneralBroadcast::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 1;
    status_ = 0;
    adminid_ = GOOGLE_ULONGLONG(0);
    if (has_adminname()) {
      if (adminname_ != &::google::protobuf::internal::kEmptyString) {
        adminname_->clear();
      }
    }
    roleid_ = GOOGLE_ULONGLONG(0);
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DemoteGeneralBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sanguo.MsgID msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::sanguo::MsgID >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .sanguo.StatusCode status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::StatusCode_IsValid(value)) {
            set_status(static_cast< ::sanguo::StatusCode >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_adminID;
        break;
      }

      // required uint64 adminID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_adminID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &adminid_)));
          set_has_adminid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_adminName;
        break;
      }

      // required string adminName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_adminName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_adminname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_roleID;
        break;
      }

      // required uint64 roleID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_roleName;
        break;
      }

      // required string roleName = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DemoteGeneralBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .sanguo.MsgID msgID = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // required .sanguo.StatusCode status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // required uint64 adminID = 3;
  if (has_adminid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->adminid(), output);
  }

  // required string adminName = 4;
  if (has_adminname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->adminname(), output);
  }

  // required uint64 roleID = 5;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->roleid(), output);
  }

  // required string roleName = 6;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->rolename(), output);
  }

}

int DemoteGeneralBroadcast::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .sanguo.MsgID msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // required .sanguo.StatusCode status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // required uint64 adminID = 3;
    if (has_adminid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->adminid());
    }

    // required string adminName = 4;
    if (has_adminname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->adminname());
    }

    // required uint64 roleID = 5;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

    // required string roleName = 6;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DemoteGeneralBroadcast::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DemoteGeneralBroadcast*>(&from));
}

void DemoteGeneralBroadcast::MergeFrom(const DemoteGeneralBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_adminid()) {
      set_adminid(from.adminid());
    }
    if (from.has_adminname()) {
      set_adminname(from.adminname());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
  }
}

void DemoteGeneralBroadcast::CopyFrom(const DemoteGeneralBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DemoteGeneralBroadcast::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void DemoteGeneralBroadcast::Swap(DemoteGeneralBroadcast* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(status_, other->status_);
    std::swap(adminid_, other->adminid_);
    std::swap(adminname_, other->adminname_);
    std::swap(roleid_, other->roleid_);
    std::swap(rolename_, other->rolename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DemoteGeneralBroadcast::GetTypeName() const {
  return "sanguo.DemoteGeneralBroadcast";
}


// ===================================================================

#ifndef _MSC_VER
const int KickMemberBroadcast::kMsgIDFieldNumber;
const int KickMemberBroadcast::kStatusFieldNumber;
const int KickMemberBroadcast::kAdminIDFieldNumber;
const int KickMemberBroadcast::kAdminNameFieldNumber;
const int KickMemberBroadcast::kRoleIDFieldNumber;
const int KickMemberBroadcast::kRoleNameFieldNumber;
#endif  // !_MSC_VER

KickMemberBroadcast::KickMemberBroadcast()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void KickMemberBroadcast::InitAsDefaultInstance() {
}

KickMemberBroadcast::KickMemberBroadcast(const KickMemberBroadcast& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void KickMemberBroadcast::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 1;
  status_ = 0;
  adminid_ = GOOGLE_ULONGLONG(0);
  adminname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roleid_ = GOOGLE_ULONGLONG(0);
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KickMemberBroadcast::~KickMemberBroadcast() {
  SharedDtor();
}

void KickMemberBroadcast::SharedDtor() {
  if (adminname_ != &::google::protobuf::internal::kEmptyString) {
    delete adminname_;
  }
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void KickMemberBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const KickMemberBroadcast& KickMemberBroadcast::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_yijun_5fbroadcast_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_yijun_5fbroadcast_2eproto();
#endif
  return *default_instance_;
}

KickMemberBroadcast* KickMemberBroadcast::default_instance_ = NULL;

KickMemberBroadcast* KickMemberBroadcast::New() const {
  return new KickMemberBroadcast;
}

void KickMemberBroadcast::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 1;
    status_ = 0;
    adminid_ = GOOGLE_ULONGLONG(0);
    if (has_adminname()) {
      if (adminname_ != &::google::protobuf::internal::kEmptyString) {
        adminname_->clear();
      }
    }
    roleid_ = GOOGLE_ULONGLONG(0);
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool KickMemberBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sanguo.MsgID msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::sanguo::MsgID >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .sanguo.StatusCode status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::StatusCode_IsValid(value)) {
            set_status(static_cast< ::sanguo::StatusCode >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_adminID;
        break;
      }

      // required uint64 adminID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_adminID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &adminid_)));
          set_has_adminid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_adminName;
        break;
      }

      // required string adminName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_adminName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_adminname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_roleID;
        break;
      }

      // required uint64 roleID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_roleName;
        break;
      }

      // required string roleName = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KickMemberBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .sanguo.MsgID msgID = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // required .sanguo.StatusCode status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // required uint64 adminID = 3;
  if (has_adminid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->adminid(), output);
  }

  // required string adminName = 4;
  if (has_adminname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->adminname(), output);
  }

  // required uint64 roleID = 5;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->roleid(), output);
  }

  // required string roleName = 6;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->rolename(), output);
  }

}

int KickMemberBroadcast::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .sanguo.MsgID msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // required .sanguo.StatusCode status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // required uint64 adminID = 3;
    if (has_adminid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->adminid());
    }

    // required string adminName = 4;
    if (has_adminname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->adminname());
    }

    // required uint64 roleID = 5;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

    // required string roleName = 6;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KickMemberBroadcast::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const KickMemberBroadcast*>(&from));
}

void KickMemberBroadcast::MergeFrom(const KickMemberBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_adminid()) {
      set_adminid(from.adminid());
    }
    if (from.has_adminname()) {
      set_adminname(from.adminname());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
  }
}

void KickMemberBroadcast::CopyFrom(const KickMemberBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickMemberBroadcast::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void KickMemberBroadcast::Swap(KickMemberBroadcast* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(status_, other->status_);
    std::swap(adminid_, other->adminid_);
    std::swap(adminname_, other->adminname_);
    std::swap(roleid_, other->roleid_);
    std::swap(rolename_, other->rolename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string KickMemberBroadcast::GetTypeName() const {
  return "sanguo.KickMemberBroadcast";
}


// ===================================================================

#ifndef _MSC_VER
const int ExitYijunBroadcast::kMsgIDFieldNumber;
const int ExitYijunBroadcast::kStatusFieldNumber;
const int ExitYijunBroadcast::kRoleNameFieldNumber;
#endif  // !_MSC_VER

ExitYijunBroadcast::ExitYijunBroadcast()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ExitYijunBroadcast::InitAsDefaultInstance() {
}

ExitYijunBroadcast::ExitYijunBroadcast(const ExitYijunBroadcast& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ExitYijunBroadcast::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 1;
  status_ = 0;
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExitYijunBroadcast::~ExitYijunBroadcast() {
  SharedDtor();
}

void ExitYijunBroadcast::SharedDtor() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ExitYijunBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ExitYijunBroadcast& ExitYijunBroadcast::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_yijun_5fbroadcast_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_yijun_5fbroadcast_2eproto();
#endif
  return *default_instance_;
}

ExitYijunBroadcast* ExitYijunBroadcast::default_instance_ = NULL;

ExitYijunBroadcast* ExitYijunBroadcast::New() const {
  return new ExitYijunBroadcast;
}

void ExitYijunBroadcast::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 1;
    status_ = 0;
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ExitYijunBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sanguo.MsgID msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::sanguo::MsgID >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .sanguo.StatusCode status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::StatusCode_IsValid(value)) {
            set_status(static_cast< ::sanguo::StatusCode >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_roleName;
        break;
      }

      // required string roleName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExitYijunBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .sanguo.MsgID msgID = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // required .sanguo.StatusCode status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // required string roleName = 3;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->rolename(), output);
  }

}

int ExitYijunBroadcast::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .sanguo.MsgID msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // required .sanguo.StatusCode status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // required string roleName = 3;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExitYijunBroadcast::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ExitYijunBroadcast*>(&from));
}

void ExitYijunBroadcast::MergeFrom(const ExitYijunBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
  }
}

void ExitYijunBroadcast::CopyFrom(const ExitYijunBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExitYijunBroadcast::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ExitYijunBroadcast::Swap(ExitYijunBroadcast* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(status_, other->status_);
    std::swap(rolename_, other->rolename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ExitYijunBroadcast::GetTypeName() const {
  return "sanguo.ExitYijunBroadcast";
}


// ===================================================================

#ifndef _MSC_VER
const int SendYijunCaptureBroadcast::kMsgIDFieldNumber;
const int SendYijunCaptureBroadcast::kStatusFieldNumber;
#endif  // !_MSC_VER

SendYijunCaptureBroadcast::SendYijunCaptureBroadcast()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SendYijunCaptureBroadcast::InitAsDefaultInstance() {
}

SendYijunCaptureBroadcast::SendYijunCaptureBroadcast(const SendYijunCaptureBroadcast& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SendYijunCaptureBroadcast::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 1;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendYijunCaptureBroadcast::~SendYijunCaptureBroadcast() {
  SharedDtor();
}

void SendYijunCaptureBroadcast::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SendYijunCaptureBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SendYijunCaptureBroadcast& SendYijunCaptureBroadcast::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_yijun_5fbroadcast_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_yijun_5fbroadcast_2eproto();
#endif
  return *default_instance_;
}

SendYijunCaptureBroadcast* SendYijunCaptureBroadcast::default_instance_ = NULL;

SendYijunCaptureBroadcast* SendYijunCaptureBroadcast::New() const {
  return new SendYijunCaptureBroadcast;
}

void SendYijunCaptureBroadcast::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 1;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SendYijunCaptureBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sanguo.MsgID msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::sanguo::MsgID >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .sanguo.StatusCode status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::StatusCode_IsValid(value)) {
            set_status(static_cast< ::sanguo::StatusCode >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SendYijunCaptureBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .sanguo.MsgID msgID = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // required .sanguo.StatusCode status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

}

int SendYijunCaptureBroadcast::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .sanguo.MsgID msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // required .sanguo.StatusCode status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendYijunCaptureBroadcast::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SendYijunCaptureBroadcast*>(&from));
}

void SendYijunCaptureBroadcast::MergeFrom(const SendYijunCaptureBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
}

void SendYijunCaptureBroadcast::CopyFrom(const SendYijunCaptureBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendYijunCaptureBroadcast::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SendYijunCaptureBroadcast::Swap(SendYijunCaptureBroadcast* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SendYijunCaptureBroadcast::GetTypeName() const {
  return "sanguo.SendYijunCaptureBroadcast";
}


// ===================================================================

#ifndef _MSC_VER
const int SendYijunCaptureResultBroadcast::kMsgIDFieldNumber;
const int SendYijunCaptureResultBroadcast::kStatusFieldNumber;
const int SendYijunCaptureResultBroadcast::kResultFieldNumber;
const int SendYijunCaptureResultBroadcast::kWeathePDFieldNumber;
const int SendYijunCaptureResultBroadcast::kRoleNameFieldNumber;
const int SendYijunCaptureResultBroadcast::kRoleIDFieldNumber;
#endif  // !_MSC_VER

SendYijunCaptureResultBroadcast::SendYijunCaptureResultBroadcast()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SendYijunCaptureResultBroadcast::InitAsDefaultInstance() {
}

SendYijunCaptureResultBroadcast::SendYijunCaptureResultBroadcast(const SendYijunCaptureResultBroadcast& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SendYijunCaptureResultBroadcast::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 1;
  status_ = 0;
  result_ = 0u;
  weathepd_ = GOOGLE_ULONGLONG(0);
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roleid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendYijunCaptureResultBroadcast::~SendYijunCaptureResultBroadcast() {
  SharedDtor();
}

void SendYijunCaptureResultBroadcast::SharedDtor() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SendYijunCaptureResultBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SendYijunCaptureResultBroadcast& SendYijunCaptureResultBroadcast::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_yijun_5fbroadcast_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_yijun_5fbroadcast_2eproto();
#endif
  return *default_instance_;
}

SendYijunCaptureResultBroadcast* SendYijunCaptureResultBroadcast::default_instance_ = NULL;

SendYijunCaptureResultBroadcast* SendYijunCaptureResultBroadcast::New() const {
  return new SendYijunCaptureResultBroadcast;
}

void SendYijunCaptureResultBroadcast::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 1;
    status_ = 0;
    result_ = 0u;
    weathepd_ = GOOGLE_ULONGLONG(0);
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    roleid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SendYijunCaptureResultBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sanguo.MsgID msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::sanguo::MsgID >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .sanguo.StatusCode status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::StatusCode_IsValid(value)) {
            set_status(static_cast< ::sanguo::StatusCode >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional uint32 result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_weathePD;
        break;
      }

      // optional uint64 weathePD = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weathePD:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &weathepd_)));
          set_has_weathepd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_roleName;
        break;
      }

      // optional string roleName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_roleID;
        break;
      }

      // optional uint64 roleID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SendYijunCaptureResultBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .sanguo.MsgID msgID = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // required .sanguo.StatusCode status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // optional uint32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->result(), output);
  }

  // optional uint64 weathePD = 4;
  if (has_weathepd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->weathepd(), output);
  }

  // optional string roleName = 5;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->rolename(), output);
  }

  // optional uint64 roleID = 6;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->roleid(), output);
  }

}

int SendYijunCaptureResultBroadcast::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .sanguo.MsgID msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // required .sanguo.StatusCode status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional uint32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional uint64 weathePD = 4;
    if (has_weathepd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->weathepd());
    }

    // optional string roleName = 5;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }

    // optional uint64 roleID = 6;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendYijunCaptureResultBroadcast::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SendYijunCaptureResultBroadcast*>(&from));
}

void SendYijunCaptureResultBroadcast::MergeFrom(const SendYijunCaptureResultBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_weathepd()) {
      set_weathepd(from.weathepd());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
}

void SendYijunCaptureResultBroadcast::CopyFrom(const SendYijunCaptureResultBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendYijunCaptureResultBroadcast::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SendYijunCaptureResultBroadcast::Swap(SendYijunCaptureResultBroadcast* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(status_, other->status_);
    std::swap(result_, other->result_);
    std::swap(weathepd_, other->weathepd_);
    std::swap(rolename_, other->rolename_);
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SendYijunCaptureResultBroadcast::GetTypeName() const {
  return "sanguo.SendYijunCaptureResultBroadcast";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sanguo

// @@protoc_insertion_point(global_scope)
