// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: role_friend_aprrove.proto

#ifndef PROTOBUF_role_5ffriend_5faprrove_2eproto__INCLUDED
#define PROTOBUF_role_5ffriend_5faprrove_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "constants.pb.h"
// @@protoc_insertion_point(includes)

namespace sanguo {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_role_5ffriend_5faprrove_2eproto();
void protobuf_AssignDesc_role_5ffriend_5faprrove_2eproto();
void protobuf_ShutdownFile_role_5ffriend_5faprrove_2eproto();

class MsgRoleFriendAprrove;

// ===================================================================

class MsgRoleFriendAprrove : public ::google::protobuf::MessageLite {
 public:
  MsgRoleFriendAprrove();
  virtual ~MsgRoleFriendAprrove();

  MsgRoleFriendAprrove(const MsgRoleFriendAprrove& from);

  inline MsgRoleFriendAprrove& operator=(const MsgRoleFriendAprrove& from) {
    CopyFrom(from);
    return *this;
  }

  static const MsgRoleFriendAprrove& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const MsgRoleFriendAprrove* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(MsgRoleFriendAprrove* other);

  // implements Message ----------------------------------------------

  MsgRoleFriendAprrove* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const MsgRoleFriendAprrove& from);
  void MergeFrom(const MsgRoleFriendAprrove& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 roleID = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIDFieldNumber = 1;
  inline ::google::protobuf::uint64 roleid() const;
  inline void set_roleid(::google::protobuf::uint64 value);

  // required string roleName = 2;
  inline bool has_rolename() const;
  inline void clear_rolename();
  static const int kRoleNameFieldNumber = 2;
  inline const ::std::string& rolename() const;
  inline void set_rolename(const ::std::string& value);
  inline void set_rolename(const char* value);
  inline void set_rolename(const char* value, size_t size);
  inline ::std::string* mutable_rolename();
  inline ::std::string* release_rolename();
  inline void set_allocated_rolename(::std::string* rolename);

  // required uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // required uint32 proffesion = 4;
  inline bool has_proffesion() const;
  inline void clear_proffesion();
  static const int kProffesionFieldNumber = 4;
  inline ::google::protobuf::uint32 proffesion() const;
  inline void set_proffesion(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:sanguo.MsgRoleFriendAprrove)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_rolename();
  inline void clear_has_rolename();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_proffesion();
  inline void clear_has_proffesion();

  ::google::protobuf::uint64 roleid_;
  ::std::string* rolename_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 proffesion_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_role_5ffriend_5faprrove_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_role_5ffriend_5faprrove_2eproto();
  #endif
  friend void protobuf_AssignDesc_role_5ffriend_5faprrove_2eproto();
  friend void protobuf_ShutdownFile_role_5ffriend_5faprrove_2eproto();

  void InitAsDefaultInstance();
  static MsgRoleFriendAprrove* default_instance_;
};
// ===================================================================


// ===================================================================

// MsgRoleFriendAprrove

// required uint64 roleID = 1;
inline bool MsgRoleFriendAprrove::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgRoleFriendAprrove::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgRoleFriendAprrove::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgRoleFriendAprrove::clear_roleid() {
  roleid_ = GOOGLE_ULONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::uint64 MsgRoleFriendAprrove::roleid() const {
  return roleid_;
}
inline void MsgRoleFriendAprrove::set_roleid(::google::protobuf::uint64 value) {
  set_has_roleid();
  roleid_ = value;
}

// required string roleName = 2;
inline bool MsgRoleFriendAprrove::has_rolename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgRoleFriendAprrove::set_has_rolename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgRoleFriendAprrove::clear_has_rolename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgRoleFriendAprrove::clear_rolename() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    rolename_->clear();
  }
  clear_has_rolename();
}
inline const ::std::string& MsgRoleFriendAprrove::rolename() const {
  return *rolename_;
}
inline void MsgRoleFriendAprrove::set_rolename(const ::std::string& value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void MsgRoleFriendAprrove::set_rolename(const char* value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void MsgRoleFriendAprrove::set_rolename(const char* value, size_t size) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgRoleFriendAprrove::mutable_rolename() {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  return rolename_;
}
inline ::std::string* MsgRoleFriendAprrove::release_rolename() {
  clear_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rolename_;
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MsgRoleFriendAprrove::set_allocated_rolename(::std::string* rolename) {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (rolename) {
    set_has_rolename();
    rolename_ = rolename;
  } else {
    clear_has_rolename();
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 level = 3;
inline bool MsgRoleFriendAprrove::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgRoleFriendAprrove::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgRoleFriendAprrove::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgRoleFriendAprrove::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 MsgRoleFriendAprrove::level() const {
  return level_;
}
inline void MsgRoleFriendAprrove::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// required uint32 proffesion = 4;
inline bool MsgRoleFriendAprrove::has_proffesion() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgRoleFriendAprrove::set_has_proffesion() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgRoleFriendAprrove::clear_has_proffesion() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgRoleFriendAprrove::clear_proffesion() {
  proffesion_ = 0u;
  clear_has_proffesion();
}
inline ::google::protobuf::uint32 MsgRoleFriendAprrove::proffesion() const {
  return proffesion_;
}
inline void MsgRoleFriendAprrove::set_proffesion(::google::protobuf::uint32 value) {
  set_has_proffesion();
  proffesion_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sanguo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_role_5ffriend_5faprrove_2eproto__INCLUDED
