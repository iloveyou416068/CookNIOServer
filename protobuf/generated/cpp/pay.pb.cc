// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pay.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pay.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace sanguo {

void protobuf_ShutdownFile_pay_2eproto() {
  delete PayRequest::default_instance_;
  delete PayResponse::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_pay_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_pay_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::sanguo::protobuf_AddDesc_msg_5fid_2eproto();
  ::sanguo::protobuf_AddDesc_msg_5fstatus_5fcode_2eproto();
  PayRequest::default_instance_ = new PayRequest();
  PayResponse::default_instance_ = new PayResponse();
  PayRequest::default_instance_->InitAsDefaultInstance();
  PayResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pay_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_pay_2eproto_once_);
void protobuf_AddDesc_pay_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_pay_2eproto_once_,
                 &protobuf_AddDesc_pay_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pay_2eproto {
  StaticDescriptorInitializer_pay_2eproto() {
    protobuf_AddDesc_pay_2eproto();
  }
} static_descriptor_initializer_pay_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int PayRequest::kMsgIDFieldNumber;
const int PayRequest::kPayDescFieldNumber;
const int PayRequest::kRechargeInfoIDFieldNumber;
#endif  // !_MSC_VER

PayRequest::PayRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PayRequest::InitAsDefaultInstance() {
}

PayRequest::PayRequest(const PayRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PayRequest::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 1;
  paydesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rechargeinfoid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PayRequest::~PayRequest() {
  SharedDtor();
}

void PayRequest::SharedDtor() {
  if (paydesc_ != &::google::protobuf::internal::kEmptyString) {
    delete paydesc_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PayRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PayRequest& PayRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pay_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pay_2eproto();
#endif
  return *default_instance_;
}

PayRequest* PayRequest::default_instance_ = NULL;

PayRequest* PayRequest::New() const {
  return new PayRequest;
}

void PayRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 1;
    if (has_paydesc()) {
      if (paydesc_ != &::google::protobuf::internal::kEmptyString) {
        paydesc_->clear();
      }
    }
    rechargeinfoid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PayRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sanguo.MsgID msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::sanguo::MsgID >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_payDesc;
        break;
      }

      // required string payDesc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_payDesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_paydesc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rechargeInfoID;
        break;
      }

      // required uint32 rechargeInfoID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rechargeInfoID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rechargeinfoid_)));
          set_has_rechargeinfoid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PayRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .sanguo.MsgID msgID = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // required string payDesc = 2;
  if (has_paydesc()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->paydesc(), output);
  }

  // required uint32 rechargeInfoID = 3;
  if (has_rechargeinfoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rechargeinfoid(), output);
  }

}

int PayRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .sanguo.MsgID msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // required string payDesc = 2;
    if (has_paydesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->paydesc());
    }

    // required uint32 rechargeInfoID = 3;
    if (has_rechargeinfoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rechargeinfoid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PayRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PayRequest*>(&from));
}

void PayRequest::MergeFrom(const PayRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_paydesc()) {
      set_paydesc(from.paydesc());
    }
    if (from.has_rechargeinfoid()) {
      set_rechargeinfoid(from.rechargeinfoid());
    }
  }
}

void PayRequest::CopyFrom(const PayRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PayRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PayRequest::Swap(PayRequest* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(paydesc_, other->paydesc_);
    std::swap(rechargeinfoid_, other->rechargeinfoid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PayRequest::GetTypeName() const {
  return "sanguo.PayRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int PayResponse::kMsgIDFieldNumber;
const int PayResponse::kStatusFieldNumber;
const int PayResponse::kCoolOrderSerialFieldNumber;
const int PayResponse::kProductPriceFieldNumber;
const int PayResponse::kProductOrignalPriceFieldNumber;
const int PayResponse::kJadeFieldNumber;
const int PayResponse::kAccessTokenFieldNumber;
#endif  // !_MSC_VER

PayResponse::PayResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PayResponse::InitAsDefaultInstance() {
}

PayResponse::PayResponse(const PayResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PayResponse::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 1;
  status_ = 0;
  coolorderserial_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  productprice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  productorignalprice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  jade_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  accesstoken_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PayResponse::~PayResponse() {
  SharedDtor();
}

void PayResponse::SharedDtor() {
  if (coolorderserial_ != &::google::protobuf::internal::kEmptyString) {
    delete coolorderserial_;
  }
  if (productprice_ != &::google::protobuf::internal::kEmptyString) {
    delete productprice_;
  }
  if (productorignalprice_ != &::google::protobuf::internal::kEmptyString) {
    delete productorignalprice_;
  }
  if (jade_ != &::google::protobuf::internal::kEmptyString) {
    delete jade_;
  }
  if (accesstoken_ != &::google::protobuf::internal::kEmptyString) {
    delete accesstoken_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PayResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PayResponse& PayResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pay_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pay_2eproto();
#endif
  return *default_instance_;
}

PayResponse* PayResponse::default_instance_ = NULL;

PayResponse* PayResponse::New() const {
  return new PayResponse;
}

void PayResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 1;
    status_ = 0;
    if (has_coolorderserial()) {
      if (coolorderserial_ != &::google::protobuf::internal::kEmptyString) {
        coolorderserial_->clear();
      }
    }
    if (has_productprice()) {
      if (productprice_ != &::google::protobuf::internal::kEmptyString) {
        productprice_->clear();
      }
    }
    if (has_productorignalprice()) {
      if (productorignalprice_ != &::google::protobuf::internal::kEmptyString) {
        productorignalprice_->clear();
      }
    }
    if (has_jade()) {
      if (jade_ != &::google::protobuf::internal::kEmptyString) {
        jade_->clear();
      }
    }
    if (has_accesstoken()) {
      if (accesstoken_ != &::google::protobuf::internal::kEmptyString) {
        accesstoken_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PayResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sanguo.MsgID msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::sanguo::MsgID >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .sanguo.StatusCode status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::StatusCode_IsValid(value)) {
            set_status(static_cast< ::sanguo::StatusCode >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_coolOrderSerial;
        break;
      }

      // optional string coolOrderSerial = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_coolOrderSerial:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_coolorderserial()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_productPrice;
        break;
      }

      // optional string productPrice = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_productPrice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productprice()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_productOrignalPrice;
        break;
      }

      // optional string productOrignalPrice = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_productOrignalPrice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productorignalprice()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_jade;
        break;
      }

      // optional string jade = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_jade:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jade()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_accessToken;
        break;
      }

      // optional string accessToken = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accessToken:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accesstoken()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PayResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .sanguo.MsgID msgID = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // required .sanguo.StatusCode status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // optional string coolOrderSerial = 3;
  if (has_coolorderserial()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->coolorderserial(), output);
  }

  // optional string productPrice = 4;
  if (has_productprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->productprice(), output);
  }

  // optional string productOrignalPrice = 5;
  if (has_productorignalprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->productorignalprice(), output);
  }

  // optional string jade = 6;
  if (has_jade()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->jade(), output);
  }

  // optional string accessToken = 7;
  if (has_accesstoken()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->accesstoken(), output);
  }

}

int PayResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .sanguo.MsgID msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // required .sanguo.StatusCode status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional string coolOrderSerial = 3;
    if (has_coolorderserial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->coolorderserial());
    }

    // optional string productPrice = 4;
    if (has_productprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->productprice());
    }

    // optional string productOrignalPrice = 5;
    if (has_productorignalprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->productorignalprice());
    }

    // optional string jade = 6;
    if (has_jade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->jade());
    }

    // optional string accessToken = 7;
    if (has_accesstoken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accesstoken());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PayResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PayResponse*>(&from));
}

void PayResponse::MergeFrom(const PayResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_coolorderserial()) {
      set_coolorderserial(from.coolorderserial());
    }
    if (from.has_productprice()) {
      set_productprice(from.productprice());
    }
    if (from.has_productorignalprice()) {
      set_productorignalprice(from.productorignalprice());
    }
    if (from.has_jade()) {
      set_jade(from.jade());
    }
    if (from.has_accesstoken()) {
      set_accesstoken(from.accesstoken());
    }
  }
}

void PayResponse::CopyFrom(const PayResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PayResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PayResponse::Swap(PayResponse* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(status_, other->status_);
    std::swap(coolorderserial_, other->coolorderserial_);
    std::swap(productprice_, other->productprice_);
    std::swap(productorignalprice_, other->productorignalprice_);
    std::swap(jade_, other->jade_);
    std::swap(accesstoken_, other->accesstoken_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PayResponse::GetTypeName() const {
  return "sanguo.PayResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sanguo

// @@protoc_insertion_point(global_scope)
