// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aprrove_friend_result.proto

#ifndef PROTOBUF_aprrove_5ffriend_5fresult_2eproto__INCLUDED
#define PROTOBUF_aprrove_5ffriend_5fresult_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "msg_id.pb.h"
#include "msg_status_code.pb.h"
#include "role_friend_aprrove.pb.h"
// @@protoc_insertion_point(includes)

namespace sanguo {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_aprrove_5ffriend_5fresult_2eproto();
void protobuf_AssignDesc_aprrove_5ffriend_5fresult_2eproto();
void protobuf_ShutdownFile_aprrove_5ffriend_5fresult_2eproto();

class AprroveFriendResult;

// ===================================================================

class AprroveFriendResult : public ::google::protobuf::MessageLite {
 public:
  AprroveFriendResult();
  virtual ~AprroveFriendResult();

  AprroveFriendResult(const AprroveFriendResult& from);

  inline AprroveFriendResult& operator=(const AprroveFriendResult& from) {
    CopyFrom(from);
    return *this;
  }

  static const AprroveFriendResult& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const AprroveFriendResult* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(AprroveFriendResult* other);

  // implements Message ----------------------------------------------

  AprroveFriendResult* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const AprroveFriendResult& from);
  void MergeFrom(const AprroveFriendResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .sanguo.MsgID msgID = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline ::sanguo::MsgID msgid() const;
  inline void set_msgid(::sanguo::MsgID value);

  // required .sanguo.MsgRoleFriendAprrove approveFriend = 2;
  inline bool has_approvefriend() const;
  inline void clear_approvefriend();
  static const int kApproveFriendFieldNumber = 2;
  inline const ::sanguo::MsgRoleFriendAprrove& approvefriend() const;
  inline ::sanguo::MsgRoleFriendAprrove* mutable_approvefriend();
  inline ::sanguo::MsgRoleFriendAprrove* release_approvefriend();
  inline void set_allocated_approvefriend(::sanguo::MsgRoleFriendAprrove* approvefriend);

  // @@protoc_insertion_point(class_scope:sanguo.AprroveFriendResult)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_approvefriend();
  inline void clear_has_approvefriend();

  ::sanguo::MsgRoleFriendAprrove* approvefriend_;
  int msgid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_aprrove_5ffriend_5fresult_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_aprrove_5ffriend_5fresult_2eproto();
  #endif
  friend void protobuf_AssignDesc_aprrove_5ffriend_5fresult_2eproto();
  friend void protobuf_ShutdownFile_aprrove_5ffriend_5fresult_2eproto();

  void InitAsDefaultInstance();
  static AprroveFriendResult* default_instance_;
};
// ===================================================================


// ===================================================================

// AprroveFriendResult

// required .sanguo.MsgID msgID = 1;
inline bool AprroveFriendResult::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AprroveFriendResult::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AprroveFriendResult::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AprroveFriendResult::clear_msgid() {
  msgid_ = 1;
  clear_has_msgid();
}
inline ::sanguo::MsgID AprroveFriendResult::msgid() const {
  return static_cast< ::sanguo::MsgID >(msgid_);
}
inline void AprroveFriendResult::set_msgid(::sanguo::MsgID value) {
  assert(::sanguo::MsgID_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// required .sanguo.MsgRoleFriendAprrove approveFriend = 2;
inline bool AprroveFriendResult::has_approvefriend() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AprroveFriendResult::set_has_approvefriend() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AprroveFriendResult::clear_has_approvefriend() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AprroveFriendResult::clear_approvefriend() {
  if (approvefriend_ != NULL) approvefriend_->::sanguo::MsgRoleFriendAprrove::Clear();
  clear_has_approvefriend();
}
inline const ::sanguo::MsgRoleFriendAprrove& AprroveFriendResult::approvefriend() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return approvefriend_ != NULL ? *approvefriend_ : *default_instance().approvefriend_;
#else
  return approvefriend_ != NULL ? *approvefriend_ : *default_instance_->approvefriend_;
#endif
}
inline ::sanguo::MsgRoleFriendAprrove* AprroveFriendResult::mutable_approvefriend() {
  set_has_approvefriend();
  if (approvefriend_ == NULL) approvefriend_ = new ::sanguo::MsgRoleFriendAprrove;
  return approvefriend_;
}
inline ::sanguo::MsgRoleFriendAprrove* AprroveFriendResult::release_approvefriend() {
  clear_has_approvefriend();
  ::sanguo::MsgRoleFriendAprrove* temp = approvefriend_;
  approvefriend_ = NULL;
  return temp;
}
inline void AprroveFriendResult::set_allocated_approvefriend(::sanguo::MsgRoleFriendAprrove* approvefriend) {
  delete approvefriend_;
  approvefriend_ = approvefriend;
  if (approvefriend) {
    set_has_approvefriend();
  } else {
    clear_has_approvefriend();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sanguo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_aprrove_5ffriend_5fresult_2eproto__INCLUDED
