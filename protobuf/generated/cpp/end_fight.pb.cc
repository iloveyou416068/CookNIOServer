// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: end_fight.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "end_fight.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace sanguo {

void protobuf_ShutdownFile_end_5ffight_2eproto() {
  delete EndFightRequest::default_instance_;
  delete EndFightResponse::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_end_5ffight_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_end_5ffight_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::sanguo::protobuf_AddDesc_msg_5fid_2eproto();
  ::sanguo::protobuf_AddDesc_msg_5fstatus_5fcode_2eproto();
  ::sanguo::protobuf_AddDesc_role_5fbag_5fgoods_2eproto();
  EndFightRequest::default_instance_ = new EndFightRequest();
  EndFightResponse::default_instance_ = new EndFightResponse();
  EndFightRequest::default_instance_->InitAsDefaultInstance();
  EndFightResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_end_5ffight_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_end_5ffight_2eproto_once_);
void protobuf_AddDesc_end_5ffight_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_end_5ffight_2eproto_once_,
                 &protobuf_AddDesc_end_5ffight_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_end_5ffight_2eproto {
  StaticDescriptorInitializer_end_5ffight_2eproto() {
    protobuf_AddDesc_end_5ffight_2eproto();
  }
} static_descriptor_initializer_end_5ffight_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int EndFightRequest::kMsgIDFieldNumber;
const int EndFightRequest::kCombonumFieldNumber;
const int EndFightRequest::kKillnumFieldNumber;
#endif  // !_MSC_VER

EndFightRequest::EndFightRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void EndFightRequest::InitAsDefaultInstance() {
}

EndFightRequest::EndFightRequest(const EndFightRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void EndFightRequest::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 1;
  combonum_ = 0u;
  killnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EndFightRequest::~EndFightRequest() {
  SharedDtor();
}

void EndFightRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EndFightRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EndFightRequest& EndFightRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_end_5ffight_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_end_5ffight_2eproto();
#endif
  return *default_instance_;
}

EndFightRequest* EndFightRequest::default_instance_ = NULL;

EndFightRequest* EndFightRequest::New() const {
  return new EndFightRequest;
}

void EndFightRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 1;
    combonum_ = 0u;
    killnum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool EndFightRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sanguo.MsgID msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::sanguo::MsgID >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_combonum;
        break;
      }

      // required uint32 combonum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_combonum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &combonum_)));
          set_has_combonum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_killnum;
        break;
      }

      // required uint32 killnum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killnum_)));
          set_has_killnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EndFightRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .sanguo.MsgID msgID = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // required uint32 combonum = 2;
  if (has_combonum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->combonum(), output);
  }

  // required uint32 killnum = 3;
  if (has_killnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->killnum(), output);
  }

}

int EndFightRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .sanguo.MsgID msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // required uint32 combonum = 2;
    if (has_combonum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->combonum());
    }

    // required uint32 killnum = 3;
    if (has_killnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killnum());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EndFightRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EndFightRequest*>(&from));
}

void EndFightRequest::MergeFrom(const EndFightRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_combonum()) {
      set_combonum(from.combonum());
    }
    if (from.has_killnum()) {
      set_killnum(from.killnum());
    }
  }
}

void EndFightRequest::CopyFrom(const EndFightRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndFightRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void EndFightRequest::Swap(EndFightRequest* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(combonum_, other->combonum_);
    std::swap(killnum_, other->killnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EndFightRequest::GetTypeName() const {
  return "sanguo.EndFightRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int EndFightResponse::kMsgIDFieldNumber;
const int EndFightResponse::kStatusFieldNumber;
const int EndFightResponse::kGoodsinfoDataFieldNumber;
const int EndFightResponse::kFriendshipFieldNumber;
const int EndFightResponse::kScoreFieldNumber;
const int EndFightResponse::kFreecountFieldNumber;
const int EndFightResponse::kBuycountFieldNumber;
const int EndFightResponse::kBuyusecountFieldNumber;
#endif  // !_MSC_VER

EndFightResponse::EndFightResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void EndFightResponse::InitAsDefaultInstance() {
}

EndFightResponse::EndFightResponse(const EndFightResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void EndFightResponse::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 1;
  status_ = 0;
  friendship_ = 0u;
  score_ = 0u;
  freecount_ = 0u;
  buycount_ = 0u;
  buyusecount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EndFightResponse::~EndFightResponse() {
  SharedDtor();
}

void EndFightResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EndFightResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EndFightResponse& EndFightResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_end_5ffight_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_end_5ffight_2eproto();
#endif
  return *default_instance_;
}

EndFightResponse* EndFightResponse::default_instance_ = NULL;

EndFightResponse* EndFightResponse::New() const {
  return new EndFightResponse;
}

void EndFightResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 1;
    status_ = 0;
    friendship_ = 0u;
    score_ = 0u;
    freecount_ = 0u;
    buycount_ = 0u;
    buyusecount_ = 0u;
  }
  goodsinfodata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool EndFightResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sanguo.MsgID msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::sanguo::MsgID >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .sanguo.StatusCode status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::StatusCode_IsValid(value)) {
            set_status(static_cast< ::sanguo::StatusCode >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_goodsinfoData;
        break;
      }

      // repeated .sanguo.MsgRoleBagGoods goodsinfoData = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_goodsinfoData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_goodsinfodata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_goodsinfoData;
        if (input->ExpectTag(32)) goto parse_friendship;
        break;
      }

      // required uint32 friendship = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friendship:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &friendship_)));
          set_has_friendship();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_score;
        break;
      }

      // required uint32 score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_freecount;
        break;
      }

      // required uint32 freecount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freecount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &freecount_)));
          set_has_freecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_buycount;
        break;
      }

      // required uint32 buycount = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buycount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buycount_)));
          set_has_buycount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_buyusecount;
        break;
      }

      // required uint32 buyusecount = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyusecount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buyusecount_)));
          set_has_buyusecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EndFightResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .sanguo.MsgID msgID = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // required .sanguo.StatusCode status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // repeated .sanguo.MsgRoleBagGoods goodsinfoData = 3;
  for (int i = 0; i < this->goodsinfodata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->goodsinfodata(i), output);
  }

  // required uint32 friendship = 4;
  if (has_friendship()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->friendship(), output);
  }

  // required uint32 score = 5;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->score(), output);
  }

  // required uint32 freecount = 6;
  if (has_freecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->freecount(), output);
  }

  // required uint32 buycount = 7;
  if (has_buycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->buycount(), output);
  }

  // required uint32 buyusecount = 8;
  if (has_buyusecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->buyusecount(), output);
  }

}

int EndFightResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .sanguo.MsgID msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // required .sanguo.StatusCode status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // required uint32 friendship = 4;
    if (has_friendship()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->friendship());
    }

    // required uint32 score = 5;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // required uint32 freecount = 6;
    if (has_freecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->freecount());
    }

    // required uint32 buycount = 7;
    if (has_buycount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buycount());
    }

    // required uint32 buyusecount = 8;
    if (has_buyusecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buyusecount());
    }

  }
  // repeated .sanguo.MsgRoleBagGoods goodsinfoData = 3;
  total_size += 1 * this->goodsinfodata_size();
  for (int i = 0; i < this->goodsinfodata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->goodsinfodata(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EndFightResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EndFightResponse*>(&from));
}

void EndFightResponse::MergeFrom(const EndFightResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  goodsinfodata_.MergeFrom(from.goodsinfodata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_friendship()) {
      set_friendship(from.friendship());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_freecount()) {
      set_freecount(from.freecount());
    }
    if (from.has_buycount()) {
      set_buycount(from.buycount());
    }
    if (from.has_buyusecount()) {
      set_buyusecount(from.buyusecount());
    }
  }
}

void EndFightResponse::CopyFrom(const EndFightResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndFightResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000fb) != 0x000000fb) return false;

  for (int i = 0; i < goodsinfodata_size(); i++) {
    if (!this->goodsinfodata(i).IsInitialized()) return false;
  }
  return true;
}

void EndFightResponse::Swap(EndFightResponse* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(status_, other->status_);
    goodsinfodata_.Swap(&other->goodsinfodata_);
    std::swap(friendship_, other->friendship_);
    std::swap(score_, other->score_);
    std::swap(freecount_, other->freecount_);
    std::swap(buycount_, other->buycount_);
    std::swap(buyusecount_, other->buyusecount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EndFightResponse::GetTypeName() const {
  return "sanguo.EndFightResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sanguo

// @@protoc_insertion_point(global_scope)
