// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: open_kungfu_slot_condition.proto

#ifndef PROTOBUF_open_5fkungfu_5fslot_5fcondition_2eproto__INCLUDED
#define PROTOBUF_open_5fkungfu_5fslot_5fcondition_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "constants.pb.h"
// @@protoc_insertion_point(includes)

namespace sanguo {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_open_5fkungfu_5fslot_5fcondition_2eproto();
void protobuf_AssignDesc_open_5fkungfu_5fslot_5fcondition_2eproto();
void protobuf_ShutdownFile_open_5fkungfu_5fslot_5fcondition_2eproto();

class MsgOpenKungfuSlotCondition;

// ===================================================================

class MsgOpenKungfuSlotCondition : public ::google::protobuf::MessageLite {
 public:
  MsgOpenKungfuSlotCondition();
  virtual ~MsgOpenKungfuSlotCondition();

  MsgOpenKungfuSlotCondition(const MsgOpenKungfuSlotCondition& from);

  inline MsgOpenKungfuSlotCondition& operator=(const MsgOpenKungfuSlotCondition& from) {
    CopyFrom(from);
    return *this;
  }

  static const MsgOpenKungfuSlotCondition& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const MsgOpenKungfuSlotCondition* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(MsgOpenKungfuSlotCondition* other);

  // implements Message ----------------------------------------------

  MsgOpenKungfuSlotCondition* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const MsgOpenKungfuSlotCondition& from);
  void MergeFrom(const MsgOpenKungfuSlotCondition& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string subneedjade = 1;
  inline bool has_subneedjade() const;
  inline void clear_subneedjade();
  static const int kSubneedjadeFieldNumber = 1;
  inline const ::std::string& subneedjade() const;
  inline void set_subneedjade(const ::std::string& value);
  inline void set_subneedjade(const char* value);
  inline void set_subneedjade(const char* value, size_t size);
  inline ::std::string* mutable_subneedjade();
  inline ::std::string* release_subneedjade();
  inline void set_allocated_subneedjade(::std::string* subneedjade);

  // required string subneedviplv = 2;
  inline bool has_subneedviplv() const;
  inline void clear_subneedviplv();
  static const int kSubneedviplvFieldNumber = 2;
  inline const ::std::string& subneedviplv() const;
  inline void set_subneedviplv(const ::std::string& value);
  inline void set_subneedviplv(const char* value);
  inline void set_subneedviplv(const char* value, size_t size);
  inline ::std::string* mutable_subneedviplv();
  inline ::std::string* release_subneedviplv();
  inline void set_allocated_subneedviplv(::std::string* subneedviplv);

  // required string subneedlv = 3;
  inline bool has_subneedlv() const;
  inline void clear_subneedlv();
  static const int kSubneedlvFieldNumber = 3;
  inline const ::std::string& subneedlv() const;
  inline void set_subneedlv(const ::std::string& value);
  inline void set_subneedlv(const char* value);
  inline void set_subneedlv(const char* value, size_t size);
  inline ::std::string* mutable_subneedlv();
  inline ::std::string* release_subneedlv();
  inline void set_allocated_subneedlv(::std::string* subneedlv);

  // @@protoc_insertion_point(class_scope:sanguo.MsgOpenKungfuSlotCondition)
 private:
  inline void set_has_subneedjade();
  inline void clear_has_subneedjade();
  inline void set_has_subneedviplv();
  inline void clear_has_subneedviplv();
  inline void set_has_subneedlv();
  inline void clear_has_subneedlv();

  ::std::string* subneedjade_;
  ::std::string* subneedviplv_;
  ::std::string* subneedlv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_open_5fkungfu_5fslot_5fcondition_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_open_5fkungfu_5fslot_5fcondition_2eproto();
  #endif
  friend void protobuf_AssignDesc_open_5fkungfu_5fslot_5fcondition_2eproto();
  friend void protobuf_ShutdownFile_open_5fkungfu_5fslot_5fcondition_2eproto();

  void InitAsDefaultInstance();
  static MsgOpenKungfuSlotCondition* default_instance_;
};
// ===================================================================


// ===================================================================

// MsgOpenKungfuSlotCondition

// required string subneedjade = 1;
inline bool MsgOpenKungfuSlotCondition::has_subneedjade() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgOpenKungfuSlotCondition::set_has_subneedjade() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgOpenKungfuSlotCondition::clear_has_subneedjade() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgOpenKungfuSlotCondition::clear_subneedjade() {
  if (subneedjade_ != &::google::protobuf::internal::kEmptyString) {
    subneedjade_->clear();
  }
  clear_has_subneedjade();
}
inline const ::std::string& MsgOpenKungfuSlotCondition::subneedjade() const {
  return *subneedjade_;
}
inline void MsgOpenKungfuSlotCondition::set_subneedjade(const ::std::string& value) {
  set_has_subneedjade();
  if (subneedjade_ == &::google::protobuf::internal::kEmptyString) {
    subneedjade_ = new ::std::string;
  }
  subneedjade_->assign(value);
}
inline void MsgOpenKungfuSlotCondition::set_subneedjade(const char* value) {
  set_has_subneedjade();
  if (subneedjade_ == &::google::protobuf::internal::kEmptyString) {
    subneedjade_ = new ::std::string;
  }
  subneedjade_->assign(value);
}
inline void MsgOpenKungfuSlotCondition::set_subneedjade(const char* value, size_t size) {
  set_has_subneedjade();
  if (subneedjade_ == &::google::protobuf::internal::kEmptyString) {
    subneedjade_ = new ::std::string;
  }
  subneedjade_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgOpenKungfuSlotCondition::mutable_subneedjade() {
  set_has_subneedjade();
  if (subneedjade_ == &::google::protobuf::internal::kEmptyString) {
    subneedjade_ = new ::std::string;
  }
  return subneedjade_;
}
inline ::std::string* MsgOpenKungfuSlotCondition::release_subneedjade() {
  clear_has_subneedjade();
  if (subneedjade_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = subneedjade_;
    subneedjade_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MsgOpenKungfuSlotCondition::set_allocated_subneedjade(::std::string* subneedjade) {
  if (subneedjade_ != &::google::protobuf::internal::kEmptyString) {
    delete subneedjade_;
  }
  if (subneedjade) {
    set_has_subneedjade();
    subneedjade_ = subneedjade;
  } else {
    clear_has_subneedjade();
    subneedjade_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string subneedviplv = 2;
inline bool MsgOpenKungfuSlotCondition::has_subneedviplv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgOpenKungfuSlotCondition::set_has_subneedviplv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgOpenKungfuSlotCondition::clear_has_subneedviplv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgOpenKungfuSlotCondition::clear_subneedviplv() {
  if (subneedviplv_ != &::google::protobuf::internal::kEmptyString) {
    subneedviplv_->clear();
  }
  clear_has_subneedviplv();
}
inline const ::std::string& MsgOpenKungfuSlotCondition::subneedviplv() const {
  return *subneedviplv_;
}
inline void MsgOpenKungfuSlotCondition::set_subneedviplv(const ::std::string& value) {
  set_has_subneedviplv();
  if (subneedviplv_ == &::google::protobuf::internal::kEmptyString) {
    subneedviplv_ = new ::std::string;
  }
  subneedviplv_->assign(value);
}
inline void MsgOpenKungfuSlotCondition::set_subneedviplv(const char* value) {
  set_has_subneedviplv();
  if (subneedviplv_ == &::google::protobuf::internal::kEmptyString) {
    subneedviplv_ = new ::std::string;
  }
  subneedviplv_->assign(value);
}
inline void MsgOpenKungfuSlotCondition::set_subneedviplv(const char* value, size_t size) {
  set_has_subneedviplv();
  if (subneedviplv_ == &::google::protobuf::internal::kEmptyString) {
    subneedviplv_ = new ::std::string;
  }
  subneedviplv_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgOpenKungfuSlotCondition::mutable_subneedviplv() {
  set_has_subneedviplv();
  if (subneedviplv_ == &::google::protobuf::internal::kEmptyString) {
    subneedviplv_ = new ::std::string;
  }
  return subneedviplv_;
}
inline ::std::string* MsgOpenKungfuSlotCondition::release_subneedviplv() {
  clear_has_subneedviplv();
  if (subneedviplv_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = subneedviplv_;
    subneedviplv_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MsgOpenKungfuSlotCondition::set_allocated_subneedviplv(::std::string* subneedviplv) {
  if (subneedviplv_ != &::google::protobuf::internal::kEmptyString) {
    delete subneedviplv_;
  }
  if (subneedviplv) {
    set_has_subneedviplv();
    subneedviplv_ = subneedviplv;
  } else {
    clear_has_subneedviplv();
    subneedviplv_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string subneedlv = 3;
inline bool MsgOpenKungfuSlotCondition::has_subneedlv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgOpenKungfuSlotCondition::set_has_subneedlv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgOpenKungfuSlotCondition::clear_has_subneedlv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgOpenKungfuSlotCondition::clear_subneedlv() {
  if (subneedlv_ != &::google::protobuf::internal::kEmptyString) {
    subneedlv_->clear();
  }
  clear_has_subneedlv();
}
inline const ::std::string& MsgOpenKungfuSlotCondition::subneedlv() const {
  return *subneedlv_;
}
inline void MsgOpenKungfuSlotCondition::set_subneedlv(const ::std::string& value) {
  set_has_subneedlv();
  if (subneedlv_ == &::google::protobuf::internal::kEmptyString) {
    subneedlv_ = new ::std::string;
  }
  subneedlv_->assign(value);
}
inline void MsgOpenKungfuSlotCondition::set_subneedlv(const char* value) {
  set_has_subneedlv();
  if (subneedlv_ == &::google::protobuf::internal::kEmptyString) {
    subneedlv_ = new ::std::string;
  }
  subneedlv_->assign(value);
}
inline void MsgOpenKungfuSlotCondition::set_subneedlv(const char* value, size_t size) {
  set_has_subneedlv();
  if (subneedlv_ == &::google::protobuf::internal::kEmptyString) {
    subneedlv_ = new ::std::string;
  }
  subneedlv_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgOpenKungfuSlotCondition::mutable_subneedlv() {
  set_has_subneedlv();
  if (subneedlv_ == &::google::protobuf::internal::kEmptyString) {
    subneedlv_ = new ::std::string;
  }
  return subneedlv_;
}
inline ::std::string* MsgOpenKungfuSlotCondition::release_subneedlv() {
  clear_has_subneedlv();
  if (subneedlv_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = subneedlv_;
    subneedlv_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MsgOpenKungfuSlotCondition::set_allocated_subneedlv(::std::string* subneedlv) {
  if (subneedlv_ != &::google::protobuf::internal::kEmptyString) {
    delete subneedlv_;
  }
  if (subneedlv) {
    set_has_subneedlv();
    subneedlv_ = subneedlv;
  } else {
    clear_has_subneedlv();
    subneedlv_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sanguo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_open_5fkungfu_5fslot_5fcondition_2eproto__INCLUDED
