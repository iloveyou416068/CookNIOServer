// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: change_password.proto

#ifndef PROTOBUF_change_5fpassword_2eproto__INCLUDED
#define PROTOBUF_change_5fpassword_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "msg_id.pb.h"
#include "msg_status_code.pb.h"
// @@protoc_insertion_point(includes)

namespace sanguo {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_change_5fpassword_2eproto();
void protobuf_AssignDesc_change_5fpassword_2eproto();
void protobuf_ShutdownFile_change_5fpassword_2eproto();

class ChangePasswordRequest;
class ChangePasswordResponse;

// ===================================================================

class ChangePasswordRequest : public ::google::protobuf::MessageLite {
 public:
  ChangePasswordRequest();
  virtual ~ChangePasswordRequest();

  ChangePasswordRequest(const ChangePasswordRequest& from);

  inline ChangePasswordRequest& operator=(const ChangePasswordRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ChangePasswordRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ChangePasswordRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ChangePasswordRequest* other);

  // implements Message ----------------------------------------------

  ChangePasswordRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ChangePasswordRequest& from);
  void MergeFrom(const ChangePasswordRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .sanguo.MsgID msgID = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline ::sanguo::MsgID msgid() const;
  inline void set_msgid(::sanguo::MsgID value);

  // required string userName = 2;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUserNameFieldNumber = 2;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // required string oldPassword = 3;
  inline bool has_oldpassword() const;
  inline void clear_oldpassword();
  static const int kOldPasswordFieldNumber = 3;
  inline const ::std::string& oldpassword() const;
  inline void set_oldpassword(const ::std::string& value);
  inline void set_oldpassword(const char* value);
  inline void set_oldpassword(const char* value, size_t size);
  inline ::std::string* mutable_oldpassword();
  inline ::std::string* release_oldpassword();
  inline void set_allocated_oldpassword(::std::string* oldpassword);

  // required string newPassword = 4;
  inline bool has_newpassword() const;
  inline void clear_newpassword();
  static const int kNewPasswordFieldNumber = 4;
  inline const ::std::string& newpassword() const;
  inline void set_newpassword(const ::std::string& value);
  inline void set_newpassword(const char* value);
  inline void set_newpassword(const char* value, size_t size);
  inline ::std::string* mutable_newpassword();
  inline ::std::string* release_newpassword();
  inline void set_allocated_newpassword(::std::string* newpassword);

  // @@protoc_insertion_point(class_scope:sanguo.ChangePasswordRequest)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_oldpassword();
  inline void clear_has_oldpassword();
  inline void set_has_newpassword();
  inline void clear_has_newpassword();

  ::std::string* username_;
  ::std::string* oldpassword_;
  ::std::string* newpassword_;
  int msgid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_change_5fpassword_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_change_5fpassword_2eproto();
  #endif
  friend void protobuf_AssignDesc_change_5fpassword_2eproto();
  friend void protobuf_ShutdownFile_change_5fpassword_2eproto();

  void InitAsDefaultInstance();
  static ChangePasswordRequest* default_instance_;
};
// -------------------------------------------------------------------

class ChangePasswordResponse : public ::google::protobuf::MessageLite {
 public:
  ChangePasswordResponse();
  virtual ~ChangePasswordResponse();

  ChangePasswordResponse(const ChangePasswordResponse& from);

  inline ChangePasswordResponse& operator=(const ChangePasswordResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ChangePasswordResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ChangePasswordResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ChangePasswordResponse* other);

  // implements Message ----------------------------------------------

  ChangePasswordResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ChangePasswordResponse& from);
  void MergeFrom(const ChangePasswordResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .sanguo.MsgID msgID = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline ::sanguo::MsgID msgid() const;
  inline void set_msgid(::sanguo::MsgID value);

  // required .sanguo.StatusCode status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::sanguo::StatusCode status() const;
  inline void set_status(::sanguo::StatusCode value);

  // optional string newPassword = 3;
  inline bool has_newpassword() const;
  inline void clear_newpassword();
  static const int kNewPasswordFieldNumber = 3;
  inline const ::std::string& newpassword() const;
  inline void set_newpassword(const ::std::string& value);
  inline void set_newpassword(const char* value);
  inline void set_newpassword(const char* value, size_t size);
  inline ::std::string* mutable_newpassword();
  inline ::std::string* release_newpassword();
  inline void set_allocated_newpassword(::std::string* newpassword);

  // @@protoc_insertion_point(class_scope:sanguo.ChangePasswordResponse)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_newpassword();
  inline void clear_has_newpassword();

  int msgid_;
  int status_;
  ::std::string* newpassword_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_change_5fpassword_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_change_5fpassword_2eproto();
  #endif
  friend void protobuf_AssignDesc_change_5fpassword_2eproto();
  friend void protobuf_ShutdownFile_change_5fpassword_2eproto();

  void InitAsDefaultInstance();
  static ChangePasswordResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// ChangePasswordRequest

// required .sanguo.MsgID msgID = 1;
inline bool ChangePasswordRequest::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChangePasswordRequest::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChangePasswordRequest::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChangePasswordRequest::clear_msgid() {
  msgid_ = 1;
  clear_has_msgid();
}
inline ::sanguo::MsgID ChangePasswordRequest::msgid() const {
  return static_cast< ::sanguo::MsgID >(msgid_);
}
inline void ChangePasswordRequest::set_msgid(::sanguo::MsgID value) {
  assert(::sanguo::MsgID_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// required string userName = 2;
inline bool ChangePasswordRequest::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChangePasswordRequest::set_has_username() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChangePasswordRequest::clear_has_username() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChangePasswordRequest::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& ChangePasswordRequest::username() const {
  return *username_;
}
inline void ChangePasswordRequest::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void ChangePasswordRequest::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void ChangePasswordRequest::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChangePasswordRequest::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* ChangePasswordRequest::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ChangePasswordRequest::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string oldPassword = 3;
inline bool ChangePasswordRequest::has_oldpassword() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChangePasswordRequest::set_has_oldpassword() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChangePasswordRequest::clear_has_oldpassword() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChangePasswordRequest::clear_oldpassword() {
  if (oldpassword_ != &::google::protobuf::internal::kEmptyString) {
    oldpassword_->clear();
  }
  clear_has_oldpassword();
}
inline const ::std::string& ChangePasswordRequest::oldpassword() const {
  return *oldpassword_;
}
inline void ChangePasswordRequest::set_oldpassword(const ::std::string& value) {
  set_has_oldpassword();
  if (oldpassword_ == &::google::protobuf::internal::kEmptyString) {
    oldpassword_ = new ::std::string;
  }
  oldpassword_->assign(value);
}
inline void ChangePasswordRequest::set_oldpassword(const char* value) {
  set_has_oldpassword();
  if (oldpassword_ == &::google::protobuf::internal::kEmptyString) {
    oldpassword_ = new ::std::string;
  }
  oldpassword_->assign(value);
}
inline void ChangePasswordRequest::set_oldpassword(const char* value, size_t size) {
  set_has_oldpassword();
  if (oldpassword_ == &::google::protobuf::internal::kEmptyString) {
    oldpassword_ = new ::std::string;
  }
  oldpassword_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChangePasswordRequest::mutable_oldpassword() {
  set_has_oldpassword();
  if (oldpassword_ == &::google::protobuf::internal::kEmptyString) {
    oldpassword_ = new ::std::string;
  }
  return oldpassword_;
}
inline ::std::string* ChangePasswordRequest::release_oldpassword() {
  clear_has_oldpassword();
  if (oldpassword_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = oldpassword_;
    oldpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ChangePasswordRequest::set_allocated_oldpassword(::std::string* oldpassword) {
  if (oldpassword_ != &::google::protobuf::internal::kEmptyString) {
    delete oldpassword_;
  }
  if (oldpassword) {
    set_has_oldpassword();
    oldpassword_ = oldpassword;
  } else {
    clear_has_oldpassword();
    oldpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string newPassword = 4;
inline bool ChangePasswordRequest::has_newpassword() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChangePasswordRequest::set_has_newpassword() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChangePasswordRequest::clear_has_newpassword() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChangePasswordRequest::clear_newpassword() {
  if (newpassword_ != &::google::protobuf::internal::kEmptyString) {
    newpassword_->clear();
  }
  clear_has_newpassword();
}
inline const ::std::string& ChangePasswordRequest::newpassword() const {
  return *newpassword_;
}
inline void ChangePasswordRequest::set_newpassword(const ::std::string& value) {
  set_has_newpassword();
  if (newpassword_ == &::google::protobuf::internal::kEmptyString) {
    newpassword_ = new ::std::string;
  }
  newpassword_->assign(value);
}
inline void ChangePasswordRequest::set_newpassword(const char* value) {
  set_has_newpassword();
  if (newpassword_ == &::google::protobuf::internal::kEmptyString) {
    newpassword_ = new ::std::string;
  }
  newpassword_->assign(value);
}
inline void ChangePasswordRequest::set_newpassword(const char* value, size_t size) {
  set_has_newpassword();
  if (newpassword_ == &::google::protobuf::internal::kEmptyString) {
    newpassword_ = new ::std::string;
  }
  newpassword_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChangePasswordRequest::mutable_newpassword() {
  set_has_newpassword();
  if (newpassword_ == &::google::protobuf::internal::kEmptyString) {
    newpassword_ = new ::std::string;
  }
  return newpassword_;
}
inline ::std::string* ChangePasswordRequest::release_newpassword() {
  clear_has_newpassword();
  if (newpassword_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = newpassword_;
    newpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ChangePasswordRequest::set_allocated_newpassword(::std::string* newpassword) {
  if (newpassword_ != &::google::protobuf::internal::kEmptyString) {
    delete newpassword_;
  }
  if (newpassword) {
    set_has_newpassword();
    newpassword_ = newpassword;
  } else {
    clear_has_newpassword();
    newpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ChangePasswordResponse

// required .sanguo.MsgID msgID = 1;
inline bool ChangePasswordResponse::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChangePasswordResponse::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChangePasswordResponse::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChangePasswordResponse::clear_msgid() {
  msgid_ = 1;
  clear_has_msgid();
}
inline ::sanguo::MsgID ChangePasswordResponse::msgid() const {
  return static_cast< ::sanguo::MsgID >(msgid_);
}
inline void ChangePasswordResponse::set_msgid(::sanguo::MsgID value) {
  assert(::sanguo::MsgID_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// required .sanguo.StatusCode status = 2;
inline bool ChangePasswordResponse::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChangePasswordResponse::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChangePasswordResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChangePasswordResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::sanguo::StatusCode ChangePasswordResponse::status() const {
  return static_cast< ::sanguo::StatusCode >(status_);
}
inline void ChangePasswordResponse::set_status(::sanguo::StatusCode value) {
  assert(::sanguo::StatusCode_IsValid(value));
  set_has_status();
  status_ = value;
}

// optional string newPassword = 3;
inline bool ChangePasswordResponse::has_newpassword() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChangePasswordResponse::set_has_newpassword() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChangePasswordResponse::clear_has_newpassword() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChangePasswordResponse::clear_newpassword() {
  if (newpassword_ != &::google::protobuf::internal::kEmptyString) {
    newpassword_->clear();
  }
  clear_has_newpassword();
}
inline const ::std::string& ChangePasswordResponse::newpassword() const {
  return *newpassword_;
}
inline void ChangePasswordResponse::set_newpassword(const ::std::string& value) {
  set_has_newpassword();
  if (newpassword_ == &::google::protobuf::internal::kEmptyString) {
    newpassword_ = new ::std::string;
  }
  newpassword_->assign(value);
}
inline void ChangePasswordResponse::set_newpassword(const char* value) {
  set_has_newpassword();
  if (newpassword_ == &::google::protobuf::internal::kEmptyString) {
    newpassword_ = new ::std::string;
  }
  newpassword_->assign(value);
}
inline void ChangePasswordResponse::set_newpassword(const char* value, size_t size) {
  set_has_newpassword();
  if (newpassword_ == &::google::protobuf::internal::kEmptyString) {
    newpassword_ = new ::std::string;
  }
  newpassword_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChangePasswordResponse::mutable_newpassword() {
  set_has_newpassword();
  if (newpassword_ == &::google::protobuf::internal::kEmptyString) {
    newpassword_ = new ::std::string;
  }
  return newpassword_;
}
inline ::std::string* ChangePasswordResponse::release_newpassword() {
  clear_has_newpassword();
  if (newpassword_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = newpassword_;
    newpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ChangePasswordResponse::set_allocated_newpassword(::std::string* newpassword) {
  if (newpassword_ != &::google::protobuf::internal::kEmptyString) {
    delete newpassword_;
  }
  if (newpassword) {
    set_has_newpassword();
    newpassword_ = newpassword;
  } else {
    clear_has_newpassword();
    newpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sanguo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_change_5fpassword_2eproto__INCLUDED
