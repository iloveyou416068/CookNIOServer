// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: init_sign_data.proto

#ifndef PROTOBUF_init_5fsign_5fdata_2eproto__INCLUDED
#define PROTOBUF_init_5fsign_5fdata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "msg_id.pb.h"
#include "msg_status_code.pb.h"
#include "sign_reward.pb.h"
// @@protoc_insertion_point(includes)

namespace sanguo {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_init_5fsign_5fdata_2eproto();
void protobuf_AssignDesc_init_5fsign_5fdata_2eproto();
void protobuf_ShutdownFile_init_5fsign_5fdata_2eproto();

class InitSignDataRequest;
class InitSignDataResponse;

// ===================================================================

class InitSignDataRequest : public ::google::protobuf::MessageLite {
 public:
  InitSignDataRequest();
  virtual ~InitSignDataRequest();

  InitSignDataRequest(const InitSignDataRequest& from);

  inline InitSignDataRequest& operator=(const InitSignDataRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const InitSignDataRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const InitSignDataRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(InitSignDataRequest* other);

  // implements Message ----------------------------------------------

  InitSignDataRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const InitSignDataRequest& from);
  void MergeFrom(const InitSignDataRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .sanguo.MsgID msgID = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline ::sanguo::MsgID msgid() const;
  inline void set_msgid(::sanguo::MsgID value);

  // required uint32 month = 2;
  inline bool has_month() const;
  inline void clear_month();
  static const int kMonthFieldNumber = 2;
  inline ::google::protobuf::uint32 month() const;
  inline void set_month(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:sanguo.InitSignDataRequest)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_month();
  inline void clear_has_month();

  int msgid_;
  ::google::protobuf::uint32 month_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_init_5fsign_5fdata_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_init_5fsign_5fdata_2eproto();
  #endif
  friend void protobuf_AssignDesc_init_5fsign_5fdata_2eproto();
  friend void protobuf_ShutdownFile_init_5fsign_5fdata_2eproto();

  void InitAsDefaultInstance();
  static InitSignDataRequest* default_instance_;
};
// -------------------------------------------------------------------

class InitSignDataResponse : public ::google::protobuf::MessageLite {
 public:
  InitSignDataResponse();
  virtual ~InitSignDataResponse();

  InitSignDataResponse(const InitSignDataResponse& from);

  inline InitSignDataResponse& operator=(const InitSignDataResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const InitSignDataResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const InitSignDataResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(InitSignDataResponse* other);

  // implements Message ----------------------------------------------

  InitSignDataResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const InitSignDataResponse& from);
  void MergeFrom(const InitSignDataResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .sanguo.MsgID msgID = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline ::sanguo::MsgID msgid() const;
  inline void set_msgid(::sanguo::MsgID value);

  // required .sanguo.StatusCode status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::sanguo::StatusCode status() const;
  inline void set_status(::sanguo::StatusCode value);

  // repeated .sanguo.MsgSignReward signReward = 3;
  inline int signreward_size() const;
  inline void clear_signreward();
  static const int kSignRewardFieldNumber = 3;
  inline const ::sanguo::MsgSignReward& signreward(int index) const;
  inline ::sanguo::MsgSignReward* mutable_signreward(int index);
  inline ::sanguo::MsgSignReward* add_signreward();
  inline const ::google::protobuf::RepeatedPtrField< ::sanguo::MsgSignReward >&
      signreward() const;
  inline ::google::protobuf::RepeatedPtrField< ::sanguo::MsgSignReward >*
      mutable_signreward();

  // optional uint32 count = 4;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 4;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // optional string signRecord = 5;
  inline bool has_signrecord() const;
  inline void clear_signrecord();
  static const int kSignRecordFieldNumber = 5;
  inline const ::std::string& signrecord() const;
  inline void set_signrecord(const ::std::string& value);
  inline void set_signrecord(const char* value);
  inline void set_signrecord(const char* value, size_t size);
  inline ::std::string* mutable_signrecord();
  inline ::std::string* release_signrecord();
  inline void set_allocated_signrecord(::std::string* signrecord);

  // optional string openRewardRecord = 6;
  inline bool has_openrewardrecord() const;
  inline void clear_openrewardrecord();
  static const int kOpenRewardRecordFieldNumber = 6;
  inline const ::std::string& openrewardrecord() const;
  inline void set_openrewardrecord(const ::std::string& value);
  inline void set_openrewardrecord(const char* value);
  inline void set_openrewardrecord(const char* value, size_t size);
  inline ::std::string* mutable_openrewardrecord();
  inline ::std::string* release_openrewardrecord();
  inline void set_allocated_openrewardrecord(::std::string* openrewardrecord);

  // @@protoc_insertion_point(class_scope:sanguo.InitSignDataResponse)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_signrecord();
  inline void clear_has_signrecord();
  inline void set_has_openrewardrecord();
  inline void clear_has_openrewardrecord();

  int msgid_;
  int status_;
  ::google::protobuf::RepeatedPtrField< ::sanguo::MsgSignReward > signreward_;
  ::std::string* signrecord_;
  ::std::string* openrewardrecord_;
  ::google::protobuf::uint32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_init_5fsign_5fdata_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_init_5fsign_5fdata_2eproto();
  #endif
  friend void protobuf_AssignDesc_init_5fsign_5fdata_2eproto();
  friend void protobuf_ShutdownFile_init_5fsign_5fdata_2eproto();

  void InitAsDefaultInstance();
  static InitSignDataResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// InitSignDataRequest

// required .sanguo.MsgID msgID = 1;
inline bool InitSignDataRequest::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InitSignDataRequest::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InitSignDataRequest::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InitSignDataRequest::clear_msgid() {
  msgid_ = 1;
  clear_has_msgid();
}
inline ::sanguo::MsgID InitSignDataRequest::msgid() const {
  return static_cast< ::sanguo::MsgID >(msgid_);
}
inline void InitSignDataRequest::set_msgid(::sanguo::MsgID value) {
  assert(::sanguo::MsgID_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// required uint32 month = 2;
inline bool InitSignDataRequest::has_month() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InitSignDataRequest::set_has_month() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InitSignDataRequest::clear_has_month() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InitSignDataRequest::clear_month() {
  month_ = 0u;
  clear_has_month();
}
inline ::google::protobuf::uint32 InitSignDataRequest::month() const {
  return month_;
}
inline void InitSignDataRequest::set_month(::google::protobuf::uint32 value) {
  set_has_month();
  month_ = value;
}

// -------------------------------------------------------------------

// InitSignDataResponse

// required .sanguo.MsgID msgID = 1;
inline bool InitSignDataResponse::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InitSignDataResponse::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InitSignDataResponse::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InitSignDataResponse::clear_msgid() {
  msgid_ = 1;
  clear_has_msgid();
}
inline ::sanguo::MsgID InitSignDataResponse::msgid() const {
  return static_cast< ::sanguo::MsgID >(msgid_);
}
inline void InitSignDataResponse::set_msgid(::sanguo::MsgID value) {
  assert(::sanguo::MsgID_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// required .sanguo.StatusCode status = 2;
inline bool InitSignDataResponse::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InitSignDataResponse::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InitSignDataResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InitSignDataResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::sanguo::StatusCode InitSignDataResponse::status() const {
  return static_cast< ::sanguo::StatusCode >(status_);
}
inline void InitSignDataResponse::set_status(::sanguo::StatusCode value) {
  assert(::sanguo::StatusCode_IsValid(value));
  set_has_status();
  status_ = value;
}

// repeated .sanguo.MsgSignReward signReward = 3;
inline int InitSignDataResponse::signreward_size() const {
  return signreward_.size();
}
inline void InitSignDataResponse::clear_signreward() {
  signreward_.Clear();
}
inline const ::sanguo::MsgSignReward& InitSignDataResponse::signreward(int index) const {
  return signreward_.Get(index);
}
inline ::sanguo::MsgSignReward* InitSignDataResponse::mutable_signreward(int index) {
  return signreward_.Mutable(index);
}
inline ::sanguo::MsgSignReward* InitSignDataResponse::add_signreward() {
  return signreward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sanguo::MsgSignReward >&
InitSignDataResponse::signreward() const {
  return signreward_;
}
inline ::google::protobuf::RepeatedPtrField< ::sanguo::MsgSignReward >*
InitSignDataResponse::mutable_signreward() {
  return &signreward_;
}

// optional uint32 count = 4;
inline bool InitSignDataResponse::has_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InitSignDataResponse::set_has_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InitSignDataResponse::clear_has_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InitSignDataResponse::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 InitSignDataResponse::count() const {
  return count_;
}
inline void InitSignDataResponse::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
}

// optional string signRecord = 5;
inline bool InitSignDataResponse::has_signrecord() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void InitSignDataResponse::set_has_signrecord() {
  _has_bits_[0] |= 0x00000010u;
}
inline void InitSignDataResponse::clear_has_signrecord() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void InitSignDataResponse::clear_signrecord() {
  if (signrecord_ != &::google::protobuf::internal::kEmptyString) {
    signrecord_->clear();
  }
  clear_has_signrecord();
}
inline const ::std::string& InitSignDataResponse::signrecord() const {
  return *signrecord_;
}
inline void InitSignDataResponse::set_signrecord(const ::std::string& value) {
  set_has_signrecord();
  if (signrecord_ == &::google::protobuf::internal::kEmptyString) {
    signrecord_ = new ::std::string;
  }
  signrecord_->assign(value);
}
inline void InitSignDataResponse::set_signrecord(const char* value) {
  set_has_signrecord();
  if (signrecord_ == &::google::protobuf::internal::kEmptyString) {
    signrecord_ = new ::std::string;
  }
  signrecord_->assign(value);
}
inline void InitSignDataResponse::set_signrecord(const char* value, size_t size) {
  set_has_signrecord();
  if (signrecord_ == &::google::protobuf::internal::kEmptyString) {
    signrecord_ = new ::std::string;
  }
  signrecord_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InitSignDataResponse::mutable_signrecord() {
  set_has_signrecord();
  if (signrecord_ == &::google::protobuf::internal::kEmptyString) {
    signrecord_ = new ::std::string;
  }
  return signrecord_;
}
inline ::std::string* InitSignDataResponse::release_signrecord() {
  clear_has_signrecord();
  if (signrecord_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = signrecord_;
    signrecord_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void InitSignDataResponse::set_allocated_signrecord(::std::string* signrecord) {
  if (signrecord_ != &::google::protobuf::internal::kEmptyString) {
    delete signrecord_;
  }
  if (signrecord) {
    set_has_signrecord();
    signrecord_ = signrecord;
  } else {
    clear_has_signrecord();
    signrecord_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string openRewardRecord = 6;
inline bool InitSignDataResponse::has_openrewardrecord() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void InitSignDataResponse::set_has_openrewardrecord() {
  _has_bits_[0] |= 0x00000020u;
}
inline void InitSignDataResponse::clear_has_openrewardrecord() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void InitSignDataResponse::clear_openrewardrecord() {
  if (openrewardrecord_ != &::google::protobuf::internal::kEmptyString) {
    openrewardrecord_->clear();
  }
  clear_has_openrewardrecord();
}
inline const ::std::string& InitSignDataResponse::openrewardrecord() const {
  return *openrewardrecord_;
}
inline void InitSignDataResponse::set_openrewardrecord(const ::std::string& value) {
  set_has_openrewardrecord();
  if (openrewardrecord_ == &::google::protobuf::internal::kEmptyString) {
    openrewardrecord_ = new ::std::string;
  }
  openrewardrecord_->assign(value);
}
inline void InitSignDataResponse::set_openrewardrecord(const char* value) {
  set_has_openrewardrecord();
  if (openrewardrecord_ == &::google::protobuf::internal::kEmptyString) {
    openrewardrecord_ = new ::std::string;
  }
  openrewardrecord_->assign(value);
}
inline void InitSignDataResponse::set_openrewardrecord(const char* value, size_t size) {
  set_has_openrewardrecord();
  if (openrewardrecord_ == &::google::protobuf::internal::kEmptyString) {
    openrewardrecord_ = new ::std::string;
  }
  openrewardrecord_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InitSignDataResponse::mutable_openrewardrecord() {
  set_has_openrewardrecord();
  if (openrewardrecord_ == &::google::protobuf::internal::kEmptyString) {
    openrewardrecord_ = new ::std::string;
  }
  return openrewardrecord_;
}
inline ::std::string* InitSignDataResponse::release_openrewardrecord() {
  clear_has_openrewardrecord();
  if (openrewardrecord_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = openrewardrecord_;
    openrewardrecord_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void InitSignDataResponse::set_allocated_openrewardrecord(::std::string* openrewardrecord) {
  if (openrewardrecord_ != &::google::protobuf::internal::kEmptyString) {
    delete openrewardrecord_;
  }
  if (openrewardrecord) {
    set_has_openrewardrecord();
    openrewardrecord_ = openrewardrecord;
  } else {
    clear_has_openrewardrecord();
    openrewardrecord_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sanguo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_init_5fsign_5fdata_2eproto__INCLUDED
