// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sign_reward.proto

#ifndef PROTOBUF_sign_5freward_2eproto__INCLUDED
#define PROTOBUF_sign_5freward_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "constants.pb.h"
// @@protoc_insertion_point(includes)

namespace sanguo {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_sign_5freward_2eproto();
void protobuf_AssignDesc_sign_5freward_2eproto();
void protobuf_ShutdownFile_sign_5freward_2eproto();

class MsgSignReward;

// ===================================================================

class MsgSignReward : public ::google::protobuf::MessageLite {
 public:
  MsgSignReward();
  virtual ~MsgSignReward();

  MsgSignReward(const MsgSignReward& from);

  inline MsgSignReward& operator=(const MsgSignReward& from) {
    CopyFrom(from);
    return *this;
  }

  static const MsgSignReward& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const MsgSignReward* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(MsgSignReward* other);

  // implements Message ----------------------------------------------

  MsgSignReward* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const MsgSignReward& from);
  void MergeFrom(const MsgSignReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 giftID = 1;
  inline bool has_giftid() const;
  inline void clear_giftid();
  static const int kGiftIDFieldNumber = 1;
  inline ::google::protobuf::uint64 giftid() const;
  inline void set_giftid(::google::protobuf::uint64 value);

  // required string rewardInfo = 2;
  inline bool has_rewardinfo() const;
  inline void clear_rewardinfo();
  static const int kRewardInfoFieldNumber = 2;
  inline const ::std::string& rewardinfo() const;
  inline void set_rewardinfo(const ::std::string& value);
  inline void set_rewardinfo(const char* value);
  inline void set_rewardinfo(const char* value, size_t size);
  inline ::std::string* mutable_rewardinfo();
  inline ::std::string* release_rewardinfo();
  inline void set_allocated_rewardinfo(::std::string* rewardinfo);

  // required uint32 days = 3;
  inline bool has_days() const;
  inline void clear_days();
  static const int kDaysFieldNumber = 3;
  inline ::google::protobuf::uint32 days() const;
  inline void set_days(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:sanguo.MsgSignReward)
 private:
  inline void set_has_giftid();
  inline void clear_has_giftid();
  inline void set_has_rewardinfo();
  inline void clear_has_rewardinfo();
  inline void set_has_days();
  inline void clear_has_days();

  ::google::protobuf::uint64 giftid_;
  ::std::string* rewardinfo_;
  ::google::protobuf::uint32 days_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_sign_5freward_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_sign_5freward_2eproto();
  #endif
  friend void protobuf_AssignDesc_sign_5freward_2eproto();
  friend void protobuf_ShutdownFile_sign_5freward_2eproto();

  void InitAsDefaultInstance();
  static MsgSignReward* default_instance_;
};
// ===================================================================


// ===================================================================

// MsgSignReward

// required uint64 giftID = 1;
inline bool MsgSignReward::has_giftid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgSignReward::set_has_giftid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgSignReward::clear_has_giftid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgSignReward::clear_giftid() {
  giftid_ = GOOGLE_ULONGLONG(0);
  clear_has_giftid();
}
inline ::google::protobuf::uint64 MsgSignReward::giftid() const {
  return giftid_;
}
inline void MsgSignReward::set_giftid(::google::protobuf::uint64 value) {
  set_has_giftid();
  giftid_ = value;
}

// required string rewardInfo = 2;
inline bool MsgSignReward::has_rewardinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgSignReward::set_has_rewardinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgSignReward::clear_has_rewardinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgSignReward::clear_rewardinfo() {
  if (rewardinfo_ != &::google::protobuf::internal::kEmptyString) {
    rewardinfo_->clear();
  }
  clear_has_rewardinfo();
}
inline const ::std::string& MsgSignReward::rewardinfo() const {
  return *rewardinfo_;
}
inline void MsgSignReward::set_rewardinfo(const ::std::string& value) {
  set_has_rewardinfo();
  if (rewardinfo_ == &::google::protobuf::internal::kEmptyString) {
    rewardinfo_ = new ::std::string;
  }
  rewardinfo_->assign(value);
}
inline void MsgSignReward::set_rewardinfo(const char* value) {
  set_has_rewardinfo();
  if (rewardinfo_ == &::google::protobuf::internal::kEmptyString) {
    rewardinfo_ = new ::std::string;
  }
  rewardinfo_->assign(value);
}
inline void MsgSignReward::set_rewardinfo(const char* value, size_t size) {
  set_has_rewardinfo();
  if (rewardinfo_ == &::google::protobuf::internal::kEmptyString) {
    rewardinfo_ = new ::std::string;
  }
  rewardinfo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgSignReward::mutable_rewardinfo() {
  set_has_rewardinfo();
  if (rewardinfo_ == &::google::protobuf::internal::kEmptyString) {
    rewardinfo_ = new ::std::string;
  }
  return rewardinfo_;
}
inline ::std::string* MsgSignReward::release_rewardinfo() {
  clear_has_rewardinfo();
  if (rewardinfo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rewardinfo_;
    rewardinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MsgSignReward::set_allocated_rewardinfo(::std::string* rewardinfo) {
  if (rewardinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete rewardinfo_;
  }
  if (rewardinfo) {
    set_has_rewardinfo();
    rewardinfo_ = rewardinfo;
  } else {
    clear_has_rewardinfo();
    rewardinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 days = 3;
inline bool MsgSignReward::has_days() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgSignReward::set_has_days() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgSignReward::clear_has_days() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgSignReward::clear_days() {
  days_ = 0u;
  clear_has_days();
}
inline ::google::protobuf::uint32 MsgSignReward::days() const {
  return days_;
}
inline void MsgSignReward::set_days(::google::protobuf::uint32 value) {
  set_has_days();
  days_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sanguo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_sign_5freward_2eproto__INCLUDED
