// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: init_guaxiang_data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "init_guaxiang_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace sanguo {

void protobuf_ShutdownFile_init_5fguaxiang_5fdata_2eproto() {
  delete InitGuaxiangDataRequest::default_instance_;
  delete InitGuaxiangDataResponse::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_init_5fguaxiang_5fdata_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_init_5fguaxiang_5fdata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::sanguo::protobuf_AddDesc_msg_5fid_2eproto();
  ::sanguo::protobuf_AddDesc_msg_5fstatus_5fcode_2eproto();
  ::sanguo::protobuf_AddDesc_role_5fguaxiang_5fgoods_2eproto();
  InitGuaxiangDataRequest::default_instance_ = new InitGuaxiangDataRequest();
  InitGuaxiangDataResponse::default_instance_ = new InitGuaxiangDataResponse();
  InitGuaxiangDataRequest::default_instance_->InitAsDefaultInstance();
  InitGuaxiangDataResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_init_5fguaxiang_5fdata_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_init_5fguaxiang_5fdata_2eproto_once_);
void protobuf_AddDesc_init_5fguaxiang_5fdata_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_init_5fguaxiang_5fdata_2eproto_once_,
                 &protobuf_AddDesc_init_5fguaxiang_5fdata_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_init_5fguaxiang_5fdata_2eproto {
  StaticDescriptorInitializer_init_5fguaxiang_5fdata_2eproto() {
    protobuf_AddDesc_init_5fguaxiang_5fdata_2eproto();
  }
} static_descriptor_initializer_init_5fguaxiang_5fdata_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int InitGuaxiangDataRequest::kMsgIDFieldNumber;
#endif  // !_MSC_VER

InitGuaxiangDataRequest::InitGuaxiangDataRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void InitGuaxiangDataRequest::InitAsDefaultInstance() {
}

InitGuaxiangDataRequest::InitGuaxiangDataRequest(const InitGuaxiangDataRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void InitGuaxiangDataRequest::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InitGuaxiangDataRequest::~InitGuaxiangDataRequest() {
  SharedDtor();
}

void InitGuaxiangDataRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void InitGuaxiangDataRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const InitGuaxiangDataRequest& InitGuaxiangDataRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_init_5fguaxiang_5fdata_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_init_5fguaxiang_5fdata_2eproto();
#endif
  return *default_instance_;
}

InitGuaxiangDataRequest* InitGuaxiangDataRequest::default_instance_ = NULL;

InitGuaxiangDataRequest* InitGuaxiangDataRequest::New() const {
  return new InitGuaxiangDataRequest;
}

void InitGuaxiangDataRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool InitGuaxiangDataRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sanguo.MsgID msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::sanguo::MsgID >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InitGuaxiangDataRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .sanguo.MsgID msgID = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

}

int InitGuaxiangDataRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .sanguo.MsgID msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitGuaxiangDataRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InitGuaxiangDataRequest*>(&from));
}

void InitGuaxiangDataRequest::MergeFrom(const InitGuaxiangDataRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
}

void InitGuaxiangDataRequest::CopyFrom(const InitGuaxiangDataRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitGuaxiangDataRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void InitGuaxiangDataRequest::Swap(InitGuaxiangDataRequest* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string InitGuaxiangDataRequest::GetTypeName() const {
  return "sanguo.InitGuaxiangDataRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int InitGuaxiangDataResponse::kMsgIDFieldNumber;
const int InitGuaxiangDataResponse::kStatusFieldNumber;
const int InitGuaxiangDataResponse::kGuaxiangBagFieldNumber;
const int InitGuaxiangDataResponse::kGuaxiangAttrIDFieldNumber;
const int InitGuaxiangDataResponse::kGuaxiangOnRoleFieldNumber;
const int InitGuaxiangDataResponse::kBagGuaxiangCountFieldNumber;
const int InitGuaxiangDataResponse::kBagGuaxiangOrderFieldNumber;
const int InitGuaxiangDataResponse::kDivinerAttrIDFieldNumber;
const int InitGuaxiangDataResponse::kVipSummonNumFieldNumber;
#endif  // !_MSC_VER

InitGuaxiangDataResponse::InitGuaxiangDataResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void InitGuaxiangDataResponse::InitAsDefaultInstance() {
}

InitGuaxiangDataResponse::InitGuaxiangDataResponse(const InitGuaxiangDataResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void InitGuaxiangDataResponse::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 1;
  status_ = 0;
  bagguaxiangcount_ = 0u;
  bagguaxiangorder_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vipsummonnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InitGuaxiangDataResponse::~InitGuaxiangDataResponse() {
  SharedDtor();
}

void InitGuaxiangDataResponse::SharedDtor() {
  if (bagguaxiangorder_ != &::google::protobuf::internal::kEmptyString) {
    delete bagguaxiangorder_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void InitGuaxiangDataResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const InitGuaxiangDataResponse& InitGuaxiangDataResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_init_5fguaxiang_5fdata_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_init_5fguaxiang_5fdata_2eproto();
#endif
  return *default_instance_;
}

InitGuaxiangDataResponse* InitGuaxiangDataResponse::default_instance_ = NULL;

InitGuaxiangDataResponse* InitGuaxiangDataResponse::New() const {
  return new InitGuaxiangDataResponse;
}

void InitGuaxiangDataResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 1;
    status_ = 0;
    bagguaxiangcount_ = 0u;
    if (has_bagguaxiangorder()) {
      if (bagguaxiangorder_ != &::google::protobuf::internal::kEmptyString) {
        bagguaxiangorder_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    vipsummonnum_ = 0u;
  }
  guaxiangbag_.Clear();
  guaxiangattrid_.Clear();
  guaxiangonrole_.Clear();
  divinerattrid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool InitGuaxiangDataResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sanguo.MsgID msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::sanguo::MsgID >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .sanguo.StatusCode status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::StatusCode_IsValid(value)) {
            set_status(static_cast< ::sanguo::StatusCode >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_guaxiangBag;
        break;
      }

      // repeated .sanguo.MsgGuaxiangGoods guaxiangBag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guaxiangBag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_guaxiangbag()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_guaxiangBag;
        if (input->ExpectTag(32)) goto parse_guaxiangAttrID;
        break;
      }

      // repeated uint32 guaxiangAttrID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guaxiangAttrID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_guaxiangattrid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_guaxiangattrid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_guaxiangAttrID;
        if (input->ExpectTag(42)) goto parse_guaxiangOnRole;
        break;
      }

      // repeated .sanguo.MsgGuaxiangGoods guaxiangOnRole = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guaxiangOnRole:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_guaxiangonrole()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_guaxiangOnRole;
        if (input->ExpectTag(48)) goto parse_bagGuaxiangCount;
        break;
      }

      // optional uint32 bagGuaxiangCount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bagGuaxiangCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bagguaxiangcount_)));
          set_has_bagguaxiangcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_bagGuaxiangOrder;
        break;
      }

      // optional string bagGuaxiangOrder = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bagGuaxiangOrder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bagguaxiangorder()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_divinerAttrID;
        break;
      }

      // repeated uint32 divinerAttrID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_divinerAttrID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_divinerattrid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_divinerattrid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_divinerAttrID;
        if (input->ExpectTag(72)) goto parse_vipSummonNum;
        break;
      }

      // optional uint32 vipSummonNum = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipSummonNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vipsummonnum_)));
          set_has_vipsummonnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InitGuaxiangDataResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .sanguo.MsgID msgID = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // required .sanguo.StatusCode status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // repeated .sanguo.MsgGuaxiangGoods guaxiangBag = 3;
  for (int i = 0; i < this->guaxiangbag_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->guaxiangbag(i), output);
  }

  // repeated uint32 guaxiangAttrID = 4;
  for (int i = 0; i < this->guaxiangattrid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->guaxiangattrid(i), output);
  }

  // repeated .sanguo.MsgGuaxiangGoods guaxiangOnRole = 5;
  for (int i = 0; i < this->guaxiangonrole_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->guaxiangonrole(i), output);
  }

  // optional uint32 bagGuaxiangCount = 6;
  if (has_bagguaxiangcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->bagguaxiangcount(), output);
  }

  // optional string bagGuaxiangOrder = 7;
  if (has_bagguaxiangorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->bagguaxiangorder(), output);
  }

  // repeated uint32 divinerAttrID = 8;
  for (int i = 0; i < this->divinerattrid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->divinerattrid(i), output);
  }

  // optional uint32 vipSummonNum = 9;
  if (has_vipsummonnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->vipsummonnum(), output);
  }

}

int InitGuaxiangDataResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .sanguo.MsgID msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // required .sanguo.StatusCode status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional uint32 bagGuaxiangCount = 6;
    if (has_bagguaxiangcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bagguaxiangcount());
    }

    // optional string bagGuaxiangOrder = 7;
    if (has_bagguaxiangorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bagguaxiangorder());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 vipSummonNum = 9;
    if (has_vipsummonnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vipsummonnum());
    }

  }
  // repeated .sanguo.MsgGuaxiangGoods guaxiangBag = 3;
  total_size += 1 * this->guaxiangbag_size();
  for (int i = 0; i < this->guaxiangbag_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guaxiangbag(i));
  }

  // repeated uint32 guaxiangAttrID = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->guaxiangattrid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->guaxiangattrid(i));
    }
    total_size += 1 * this->guaxiangattrid_size() + data_size;
  }

  // repeated .sanguo.MsgGuaxiangGoods guaxiangOnRole = 5;
  total_size += 1 * this->guaxiangonrole_size();
  for (int i = 0; i < this->guaxiangonrole_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guaxiangonrole(i));
  }

  // repeated uint32 divinerAttrID = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->divinerattrid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->divinerattrid(i));
    }
    total_size += 1 * this->divinerattrid_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitGuaxiangDataResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InitGuaxiangDataResponse*>(&from));
}

void InitGuaxiangDataResponse::MergeFrom(const InitGuaxiangDataResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  guaxiangbag_.MergeFrom(from.guaxiangbag_);
  guaxiangattrid_.MergeFrom(from.guaxiangattrid_);
  guaxiangonrole_.MergeFrom(from.guaxiangonrole_);
  divinerattrid_.MergeFrom(from.divinerattrid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_bagguaxiangcount()) {
      set_bagguaxiangcount(from.bagguaxiangcount());
    }
    if (from.has_bagguaxiangorder()) {
      set_bagguaxiangorder(from.bagguaxiangorder());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_vipsummonnum()) {
      set_vipsummonnum(from.vipsummonnum());
    }
  }
}

void InitGuaxiangDataResponse::CopyFrom(const InitGuaxiangDataResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitGuaxiangDataResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < guaxiangbag_size(); i++) {
    if (!this->guaxiangbag(i).IsInitialized()) return false;
  }
  for (int i = 0; i < guaxiangonrole_size(); i++) {
    if (!this->guaxiangonrole(i).IsInitialized()) return false;
  }
  return true;
}

void InitGuaxiangDataResponse::Swap(InitGuaxiangDataResponse* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(status_, other->status_);
    guaxiangbag_.Swap(&other->guaxiangbag_);
    guaxiangattrid_.Swap(&other->guaxiangattrid_);
    guaxiangonrole_.Swap(&other->guaxiangonrole_);
    std::swap(bagguaxiangcount_, other->bagguaxiangcount_);
    std::swap(bagguaxiangorder_, other->bagguaxiangorder_);
    divinerattrid_.Swap(&other->divinerattrid_);
    std::swap(vipsummonnum_, other->vipsummonnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string InitGuaxiangDataResponse::GetTypeName() const {
  return "sanguo.InitGuaxiangDataResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sanguo

// @@protoc_insertion_point(global_scope)
