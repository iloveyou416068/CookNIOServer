// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: push_msg.proto

#ifndef PROTOBUF_push_5fmsg_2eproto__INCLUDED
#define PROTOBUF_push_5fmsg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "msg_id.pb.h"
#include "msg_status_code.pb.h"
#include "constants.pb.h"
// @@protoc_insertion_point(includes)

namespace sanguo {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_push_5fmsg_2eproto();
void protobuf_AssignDesc_push_5fmsg_2eproto();
void protobuf_ShutdownFile_push_5fmsg_2eproto();

class KickOutPush;
class ForbidRoleChatPush;

// ===================================================================

class KickOutPush : public ::google::protobuf::MessageLite {
 public:
  KickOutPush();
  virtual ~KickOutPush();

  KickOutPush(const KickOutPush& from);

  inline KickOutPush& operator=(const KickOutPush& from) {
    CopyFrom(from);
    return *this;
  }

  static const KickOutPush& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const KickOutPush* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(KickOutPush* other);

  // implements Message ----------------------------------------------

  KickOutPush* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const KickOutPush& from);
  void MergeFrom(const KickOutPush& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .sanguo.MsgID msgID = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline ::sanguo::MsgID msgid() const;
  inline void set_msgid(::sanguo::MsgID value);

  // required .sanguo.StatusCode status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::sanguo::StatusCode status() const;
  inline void set_status(::sanguo::StatusCode value);

  // required .sanguo.KickOutReason reason = 3;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 3;
  inline ::sanguo::KickOutReason reason() const;
  inline void set_reason(::sanguo::KickOutReason value);

  // @@protoc_insertion_point(class_scope:sanguo.KickOutPush)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_reason();
  inline void clear_has_reason();

  int msgid_;
  int status_;
  int reason_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_push_5fmsg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_push_5fmsg_2eproto();
  #endif
  friend void protobuf_AssignDesc_push_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_push_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static KickOutPush* default_instance_;
};
// -------------------------------------------------------------------

class ForbidRoleChatPush : public ::google::protobuf::MessageLite {
 public:
  ForbidRoleChatPush();
  virtual ~ForbidRoleChatPush();

  ForbidRoleChatPush(const ForbidRoleChatPush& from);

  inline ForbidRoleChatPush& operator=(const ForbidRoleChatPush& from) {
    CopyFrom(from);
    return *this;
  }

  static const ForbidRoleChatPush& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ForbidRoleChatPush* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ForbidRoleChatPush* other);

  // implements Message ----------------------------------------------

  ForbidRoleChatPush* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ForbidRoleChatPush& from);
  void MergeFrom(const ForbidRoleChatPush& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .sanguo.MsgID msgID = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline ::sanguo::MsgID msgid() const;
  inline void set_msgid(::sanguo::MsgID value);

  // required .sanguo.StatusCode status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::sanguo::StatusCode status() const;
  inline void set_status(::sanguo::StatusCode value);

  // optional uint32 channelId = 3;
  inline bool has_channelid() const;
  inline void clear_channelid();
  static const int kChannelIdFieldNumber = 3;
  inline ::google::protobuf::uint32 channelid() const;
  inline void set_channelid(::google::protobuf::uint32 value);

  // optional uint64 endTime = 4;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndTimeFieldNumber = 4;
  inline ::google::protobuf::uint64 endtime() const;
  inline void set_endtime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:sanguo.ForbidRoleChatPush)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_channelid();
  inline void clear_has_channelid();
  inline void set_has_endtime();
  inline void clear_has_endtime();

  int msgid_;
  int status_;
  ::google::protobuf::uint64 endtime_;
  ::google::protobuf::uint32 channelid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_push_5fmsg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_push_5fmsg_2eproto();
  #endif
  friend void protobuf_AssignDesc_push_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_push_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static ForbidRoleChatPush* default_instance_;
};
// ===================================================================


// ===================================================================

// KickOutPush

// required .sanguo.MsgID msgID = 1;
inline bool KickOutPush::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KickOutPush::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KickOutPush::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KickOutPush::clear_msgid() {
  msgid_ = 1;
  clear_has_msgid();
}
inline ::sanguo::MsgID KickOutPush::msgid() const {
  return static_cast< ::sanguo::MsgID >(msgid_);
}
inline void KickOutPush::set_msgid(::sanguo::MsgID value) {
  assert(::sanguo::MsgID_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// required .sanguo.StatusCode status = 2;
inline bool KickOutPush::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KickOutPush::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KickOutPush::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KickOutPush::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::sanguo::StatusCode KickOutPush::status() const {
  return static_cast< ::sanguo::StatusCode >(status_);
}
inline void KickOutPush::set_status(::sanguo::StatusCode value) {
  assert(::sanguo::StatusCode_IsValid(value));
  set_has_status();
  status_ = value;
}

// required .sanguo.KickOutReason reason = 3;
inline bool KickOutPush::has_reason() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void KickOutPush::set_has_reason() {
  _has_bits_[0] |= 0x00000004u;
}
inline void KickOutPush::clear_has_reason() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void KickOutPush::clear_reason() {
  reason_ = 1;
  clear_has_reason();
}
inline ::sanguo::KickOutReason KickOutPush::reason() const {
  return static_cast< ::sanguo::KickOutReason >(reason_);
}
inline void KickOutPush::set_reason(::sanguo::KickOutReason value) {
  assert(::sanguo::KickOutReason_IsValid(value));
  set_has_reason();
  reason_ = value;
}

// -------------------------------------------------------------------

// ForbidRoleChatPush

// required .sanguo.MsgID msgID = 1;
inline bool ForbidRoleChatPush::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ForbidRoleChatPush::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ForbidRoleChatPush::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ForbidRoleChatPush::clear_msgid() {
  msgid_ = 1;
  clear_has_msgid();
}
inline ::sanguo::MsgID ForbidRoleChatPush::msgid() const {
  return static_cast< ::sanguo::MsgID >(msgid_);
}
inline void ForbidRoleChatPush::set_msgid(::sanguo::MsgID value) {
  assert(::sanguo::MsgID_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// required .sanguo.StatusCode status = 2;
inline bool ForbidRoleChatPush::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ForbidRoleChatPush::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ForbidRoleChatPush::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ForbidRoleChatPush::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::sanguo::StatusCode ForbidRoleChatPush::status() const {
  return static_cast< ::sanguo::StatusCode >(status_);
}
inline void ForbidRoleChatPush::set_status(::sanguo::StatusCode value) {
  assert(::sanguo::StatusCode_IsValid(value));
  set_has_status();
  status_ = value;
}

// optional uint32 channelId = 3;
inline bool ForbidRoleChatPush::has_channelid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ForbidRoleChatPush::set_has_channelid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ForbidRoleChatPush::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ForbidRoleChatPush::clear_channelid() {
  channelid_ = 0u;
  clear_has_channelid();
}
inline ::google::protobuf::uint32 ForbidRoleChatPush::channelid() const {
  return channelid_;
}
inline void ForbidRoleChatPush::set_channelid(::google::protobuf::uint32 value) {
  set_has_channelid();
  channelid_ = value;
}

// optional uint64 endTime = 4;
inline bool ForbidRoleChatPush::has_endtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ForbidRoleChatPush::set_has_endtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ForbidRoleChatPush::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ForbidRoleChatPush::clear_endtime() {
  endtime_ = GOOGLE_ULONGLONG(0);
  clear_has_endtime();
}
inline ::google::protobuf::uint64 ForbidRoleChatPush::endtime() const {
  return endtime_;
}
inline void ForbidRoleChatPush::set_endtime(::google::protobuf::uint64 value) {
  set_has_endtime();
  endtime_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sanguo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_push_5fmsg_2eproto__INCLUDED
