// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sweep_dungeon_award.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sweep_dungeon_award.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace sanguo {

void protobuf_ShutdownFile_sweep_5fdungeon_5faward_2eproto() {
  delete MsgSweepDungeonAward::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_sweep_5fdungeon_5faward_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_sweep_5fdungeon_5faward_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::sanguo::protobuf_AddDesc_role_5fdungeon_5freward_2eproto();
  ::sanguo::protobuf_AddDesc_role_5fgamble_5fcard_5freward_2eproto();
  MsgSweepDungeonAward::default_instance_ = new MsgSweepDungeonAward();
  MsgSweepDungeonAward::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_sweep_5fdungeon_5faward_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_sweep_5fdungeon_5faward_2eproto_once_);
void protobuf_AddDesc_sweep_5fdungeon_5faward_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_sweep_5fdungeon_5faward_2eproto_once_,
                 &protobuf_AddDesc_sweep_5fdungeon_5faward_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_sweep_5fdungeon_5faward_2eproto {
  StaticDescriptorInitializer_sweep_5fdungeon_5faward_2eproto() {
    protobuf_AddDesc_sweep_5fdungeon_5faward_2eproto();
  }
} static_descriptor_initializer_sweep_5fdungeon_5faward_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int MsgSweepDungeonAward::kCardRewardFieldNumber;
const int MsgSweepDungeonAward::kDungeonRewardFieldNumber;
#endif  // !_MSC_VER

MsgSweepDungeonAward::MsgSweepDungeonAward()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void MsgSweepDungeonAward::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  dungeonreward_ = const_cast< ::sanguo::MsgDungeonReward*>(
      ::sanguo::MsgDungeonReward::internal_default_instance());
#else
  dungeonreward_ = const_cast< ::sanguo::MsgDungeonReward*>(&::sanguo::MsgDungeonReward::default_instance());
#endif
}

MsgSweepDungeonAward::MsgSweepDungeonAward(const MsgSweepDungeonAward& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void MsgSweepDungeonAward::SharedCtor() {
  _cached_size_ = 0;
  dungeonreward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSweepDungeonAward::~MsgSweepDungeonAward() {
  SharedDtor();
}

void MsgSweepDungeonAward::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete dungeonreward_;
  }
}

void MsgSweepDungeonAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgSweepDungeonAward& MsgSweepDungeonAward::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_sweep_5fdungeon_5faward_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_sweep_5fdungeon_5faward_2eproto();
#endif
  return *default_instance_;
}

MsgSweepDungeonAward* MsgSweepDungeonAward::default_instance_ = NULL;

MsgSweepDungeonAward* MsgSweepDungeonAward::New() const {
  return new MsgSweepDungeonAward;
}

void MsgSweepDungeonAward::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_dungeonreward()) {
      if (dungeonreward_ != NULL) dungeonreward_->::sanguo::MsgDungeonReward::Clear();
    }
  }
  cardreward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool MsgSweepDungeonAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sanguo.MsgGambleCardReward cardReward = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cardReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cardreward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_cardReward;
        if (input->ExpectTag(18)) goto parse_dungeonReward;
        break;
      }

      // optional .sanguo.MsgDungeonReward dungeonReward = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dungeonReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dungeonreward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgSweepDungeonAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .sanguo.MsgGambleCardReward cardReward = 1;
  for (int i = 0; i < this->cardreward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->cardreward(i), output);
  }

  // optional .sanguo.MsgDungeonReward dungeonReward = 2;
  if (has_dungeonreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->dungeonreward(), output);
  }

}

int MsgSweepDungeonAward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .sanguo.MsgDungeonReward dungeonReward = 2;
    if (has_dungeonreward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dungeonreward());
    }

  }
  // repeated .sanguo.MsgGambleCardReward cardReward = 1;
  total_size += 1 * this->cardreward_size();
  for (int i = 0; i < this->cardreward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cardreward(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSweepDungeonAward::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgSweepDungeonAward*>(&from));
}

void MsgSweepDungeonAward::MergeFrom(const MsgSweepDungeonAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  cardreward_.MergeFrom(from.cardreward_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_dungeonreward()) {
      mutable_dungeonreward()->::sanguo::MsgDungeonReward::MergeFrom(from.dungeonreward());
    }
  }
}

void MsgSweepDungeonAward::CopyFrom(const MsgSweepDungeonAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSweepDungeonAward::IsInitialized() const {

  for (int i = 0; i < cardreward_size(); i++) {
    if (!this->cardreward(i).IsInitialized()) return false;
  }
  return true;
}

void MsgSweepDungeonAward::Swap(MsgSweepDungeonAward* other) {
  if (other != this) {
    cardreward_.Swap(&other->cardreward_);
    std::swap(dungeonreward_, other->dungeonreward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MsgSweepDungeonAward::GetTypeName() const {
  return "sanguo.MsgSweepDungeonAward";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sanguo

// @@protoc_insertion_point(global_scope)
