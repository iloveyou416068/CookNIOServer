// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: start_vip_sweep_dungeon.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "start_vip_sweep_dungeon.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace sanguo {

void protobuf_ShutdownFile_start_5fvip_5fsweep_5fdungeon_2eproto() {
  delete StartVipSweepDungeonRequest::default_instance_;
  delete StartVipSweepDungeonResponse::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_start_5fvip_5fsweep_5fdungeon_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_start_5fvip_5fsweep_5fdungeon_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::sanguo::protobuf_AddDesc_msg_5fid_2eproto();
  ::sanguo::protobuf_AddDesc_msg_5fstatus_5fcode_2eproto();
  ::sanguo::protobuf_AddDesc_sweep_5fdungeon_5faward_2eproto();
  StartVipSweepDungeonRequest::default_instance_ = new StartVipSweepDungeonRequest();
  StartVipSweepDungeonResponse::default_instance_ = new StartVipSweepDungeonResponse();
  StartVipSweepDungeonRequest::default_instance_->InitAsDefaultInstance();
  StartVipSweepDungeonResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_start_5fvip_5fsweep_5fdungeon_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_start_5fvip_5fsweep_5fdungeon_2eproto_once_);
void protobuf_AddDesc_start_5fvip_5fsweep_5fdungeon_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_start_5fvip_5fsweep_5fdungeon_2eproto_once_,
                 &protobuf_AddDesc_start_5fvip_5fsweep_5fdungeon_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_start_5fvip_5fsweep_5fdungeon_2eproto {
  StaticDescriptorInitializer_start_5fvip_5fsweep_5fdungeon_2eproto() {
    protobuf_AddDesc_start_5fvip_5fsweep_5fdungeon_2eproto();
  }
} static_descriptor_initializer_start_5fvip_5fsweep_5fdungeon_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int StartVipSweepDungeonRequest::kMsgIDFieldNumber;
const int StartVipSweepDungeonRequest::kDungeonIdFieldNumber;
const int StartVipSweepDungeonRequest::kSweepTypeFieldNumber;
const int StartVipSweepDungeonRequest::kDungeonTypeFieldNumber;
const int StartVipSweepDungeonRequest::kDestFloorFieldNumber;
#endif  // !_MSC_VER

StartVipSweepDungeonRequest::StartVipSweepDungeonRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void StartVipSweepDungeonRequest::InitAsDefaultInstance() {
}

StartVipSweepDungeonRequest::StartVipSweepDungeonRequest(const StartVipSweepDungeonRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void StartVipSweepDungeonRequest::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 1;
  dungeonid_ = 0u;
  sweeptype_ = 0;
  dungeontype_ = 0;
  destfloor_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StartVipSweepDungeonRequest::~StartVipSweepDungeonRequest() {
  SharedDtor();
}

void StartVipSweepDungeonRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void StartVipSweepDungeonRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StartVipSweepDungeonRequest& StartVipSweepDungeonRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_start_5fvip_5fsweep_5fdungeon_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_start_5fvip_5fsweep_5fdungeon_2eproto();
#endif
  return *default_instance_;
}

StartVipSweepDungeonRequest* StartVipSweepDungeonRequest::default_instance_ = NULL;

StartVipSweepDungeonRequest* StartVipSweepDungeonRequest::New() const {
  return new StartVipSweepDungeonRequest;
}

void StartVipSweepDungeonRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 1;
    dungeonid_ = 0u;
    sweeptype_ = 0;
    dungeontype_ = 0;
    destfloor_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool StartVipSweepDungeonRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sanguo.MsgID msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::sanguo::MsgID >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dungeonId;
        break;
      }

      // required uint32 dungeonId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dungeonId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dungeonid_)));
          set_has_dungeonid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sweepType;
        break;
      }

      // required int32 sweepType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sweepType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sweeptype_)));
          set_has_sweeptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dungeonType;
        break;
      }

      // required sint32 dungeonType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dungeonType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &dungeontype_)));
          set_has_dungeontype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_destFloor;
        break;
      }

      // required uint32 destFloor = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_destFloor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &destfloor_)));
          set_has_destfloor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StartVipSweepDungeonRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .sanguo.MsgID msgID = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // required uint32 dungeonId = 2;
  if (has_dungeonid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dungeonid(), output);
  }

  // required int32 sweepType = 3;
  if (has_sweeptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sweeptype(), output);
  }

  // required sint32 dungeonType = 4;
  if (has_dungeontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->dungeontype(), output);
  }

  // required uint32 destFloor = 5;
  if (has_destfloor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->destfloor(), output);
  }

}

int StartVipSweepDungeonRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .sanguo.MsgID msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // required uint32 dungeonId = 2;
    if (has_dungeonid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dungeonid());
    }

    // required int32 sweepType = 3;
    if (has_sweeptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sweeptype());
    }

    // required sint32 dungeonType = 4;
    if (has_dungeontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->dungeontype());
    }

    // required uint32 destFloor = 5;
    if (has_destfloor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->destfloor());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartVipSweepDungeonRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StartVipSweepDungeonRequest*>(&from));
}

void StartVipSweepDungeonRequest::MergeFrom(const StartVipSweepDungeonRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_dungeonid()) {
      set_dungeonid(from.dungeonid());
    }
    if (from.has_sweeptype()) {
      set_sweeptype(from.sweeptype());
    }
    if (from.has_dungeontype()) {
      set_dungeontype(from.dungeontype());
    }
    if (from.has_destfloor()) {
      set_destfloor(from.destfloor());
    }
  }
}

void StartVipSweepDungeonRequest::CopyFrom(const StartVipSweepDungeonRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartVipSweepDungeonRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void StartVipSweepDungeonRequest::Swap(StartVipSweepDungeonRequest* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(dungeonid_, other->dungeonid_);
    std::swap(sweeptype_, other->sweeptype_);
    std::swap(dungeontype_, other->dungeontype_);
    std::swap(destfloor_, other->destfloor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string StartVipSweepDungeonRequest::GetTypeName() const {
  return "sanguo.StartVipSweepDungeonRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int StartVipSweepDungeonResponse::kMsgIDFieldNumber;
const int StartVipSweepDungeonResponse::kStatusFieldNumber;
const int StartVipSweepDungeonResponse::kRoleRemainPowerFieldNumber;
const int StartVipSweepDungeonResponse::kRewardsFieldNumber;
const int StartVipSweepDungeonResponse::kDestFloorFieldNumber;
#endif  // !_MSC_VER

StartVipSweepDungeonResponse::StartVipSweepDungeonResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void StartVipSweepDungeonResponse::InitAsDefaultInstance() {
}

StartVipSweepDungeonResponse::StartVipSweepDungeonResponse(const StartVipSweepDungeonResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void StartVipSweepDungeonResponse::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 1;
  status_ = 0;
  roleremainpower_ = 0u;
  destfloor_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StartVipSweepDungeonResponse::~StartVipSweepDungeonResponse() {
  SharedDtor();
}

void StartVipSweepDungeonResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void StartVipSweepDungeonResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StartVipSweepDungeonResponse& StartVipSweepDungeonResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_start_5fvip_5fsweep_5fdungeon_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_start_5fvip_5fsweep_5fdungeon_2eproto();
#endif
  return *default_instance_;
}

StartVipSweepDungeonResponse* StartVipSweepDungeonResponse::default_instance_ = NULL;

StartVipSweepDungeonResponse* StartVipSweepDungeonResponse::New() const {
  return new StartVipSweepDungeonResponse;
}

void StartVipSweepDungeonResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 1;
    status_ = 0;
    roleremainpower_ = 0u;
    destfloor_ = 0u;
  }
  rewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool StartVipSweepDungeonResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sanguo.MsgID msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::sanguo::MsgID >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .sanguo.StatusCode status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::StatusCode_IsValid(value)) {
            set_status(static_cast< ::sanguo::StatusCode >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_roleRemainPower;
        break;
      }

      // optional uint32 roleRemainPower = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleRemainPower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roleremainpower_)));
          set_has_roleremainpower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_rewards;
        break;
      }

      // repeated .sanguo.MsgSweepDungeonAward rewards = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_rewards;
        if (input->ExpectTag(40)) goto parse_destFloor;
        break;
      }

      // required uint32 destFloor = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_destFloor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &destfloor_)));
          set_has_destfloor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StartVipSweepDungeonResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .sanguo.MsgID msgID = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // required .sanguo.StatusCode status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // optional uint32 roleRemainPower = 3;
  if (has_roleremainpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->roleremainpower(), output);
  }

  // repeated .sanguo.MsgSweepDungeonAward rewards = 4;
  for (int i = 0; i < this->rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->rewards(i), output);
  }

  // required uint32 destFloor = 5;
  if (has_destfloor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->destfloor(), output);
  }

}

int StartVipSweepDungeonResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .sanguo.MsgID msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // required .sanguo.StatusCode status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional uint32 roleRemainPower = 3;
    if (has_roleremainpower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roleremainpower());
    }

    // required uint32 destFloor = 5;
    if (has_destfloor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->destfloor());
    }

  }
  // repeated .sanguo.MsgSweepDungeonAward rewards = 4;
  total_size += 1 * this->rewards_size();
  for (int i = 0; i < this->rewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewards(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartVipSweepDungeonResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StartVipSweepDungeonResponse*>(&from));
}

void StartVipSweepDungeonResponse::MergeFrom(const StartVipSweepDungeonResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewards_.MergeFrom(from.rewards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_roleremainpower()) {
      set_roleremainpower(from.roleremainpower());
    }
    if (from.has_destfloor()) {
      set_destfloor(from.destfloor());
    }
  }
}

void StartVipSweepDungeonResponse::CopyFrom(const StartVipSweepDungeonResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartVipSweepDungeonResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000013) != 0x00000013) return false;

  for (int i = 0; i < rewards_size(); i++) {
    if (!this->rewards(i).IsInitialized()) return false;
  }
  return true;
}

void StartVipSweepDungeonResponse::Swap(StartVipSweepDungeonResponse* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(status_, other->status_);
    std::swap(roleremainpower_, other->roleremainpower_);
    rewards_.Swap(&other->rewards_);
    std::swap(destfloor_, other->destfloor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string StartVipSweepDungeonResponse::GetTypeName() const {
  return "sanguo.StartVipSweepDungeonResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sanguo

// @@protoc_insertion_point(global_scope)
