// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: enhance_guaxiang.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "enhance_guaxiang.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace sanguo {

void protobuf_ShutdownFile_enhance_5fguaxiang_2eproto() {
  delete EnhanceGuaxiangRequest::default_instance_;
  delete EnhanceGuaxiangResponse::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_enhance_5fguaxiang_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_enhance_5fguaxiang_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::sanguo::protobuf_AddDesc_msg_5fid_2eproto();
  ::sanguo::protobuf_AddDesc_msg_5fstatus_5fcode_2eproto();
  ::sanguo::protobuf_AddDesc_role_5fguaxiang_5fgoods_2eproto();
  EnhanceGuaxiangRequest::default_instance_ = new EnhanceGuaxiangRequest();
  EnhanceGuaxiangResponse::default_instance_ = new EnhanceGuaxiangResponse();
  EnhanceGuaxiangRequest::default_instance_->InitAsDefaultInstance();
  EnhanceGuaxiangResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_enhance_5fguaxiang_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_enhance_5fguaxiang_2eproto_once_);
void protobuf_AddDesc_enhance_5fguaxiang_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_enhance_5fguaxiang_2eproto_once_,
                 &protobuf_AddDesc_enhance_5fguaxiang_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_enhance_5fguaxiang_2eproto {
  StaticDescriptorInitializer_enhance_5fguaxiang_2eproto() {
    protobuf_AddDesc_enhance_5fguaxiang_2eproto();
  }
} static_descriptor_initializer_enhance_5fguaxiang_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int EnhanceGuaxiangRequest::kMsgIDFieldNumber;
const int EnhanceGuaxiangRequest::kAutoIncrIDFieldNumber;
const int EnhanceGuaxiangRequest::kSwallowedGuaxiangIDFieldNumber;
const int EnhanceGuaxiangRequest::kPlaceFieldNumber;
const int EnhanceGuaxiangRequest::kSwallowedPlaceFieldNumber;
const int EnhanceGuaxiangRequest::kEndPlaceFieldNumber;
#endif  // !_MSC_VER

EnhanceGuaxiangRequest::EnhanceGuaxiangRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void EnhanceGuaxiangRequest::InitAsDefaultInstance() {
}

EnhanceGuaxiangRequest::EnhanceGuaxiangRequest(const EnhanceGuaxiangRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void EnhanceGuaxiangRequest::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 1;
  autoincrid_ = GOOGLE_ULONGLONG(0);
  swallowedguaxiangid_ = GOOGLE_ULONGLONG(0);
  place_ = 0;
  swallowedplace_ = 0;
  endplace_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnhanceGuaxiangRequest::~EnhanceGuaxiangRequest() {
  SharedDtor();
}

void EnhanceGuaxiangRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EnhanceGuaxiangRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EnhanceGuaxiangRequest& EnhanceGuaxiangRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_enhance_5fguaxiang_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_enhance_5fguaxiang_2eproto();
#endif
  return *default_instance_;
}

EnhanceGuaxiangRequest* EnhanceGuaxiangRequest::default_instance_ = NULL;

EnhanceGuaxiangRequest* EnhanceGuaxiangRequest::New() const {
  return new EnhanceGuaxiangRequest;
}

void EnhanceGuaxiangRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 1;
    autoincrid_ = GOOGLE_ULONGLONG(0);
    swallowedguaxiangid_ = GOOGLE_ULONGLONG(0);
    place_ = 0;
    swallowedplace_ = 0;
    endplace_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool EnhanceGuaxiangRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sanguo.MsgID msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::sanguo::MsgID >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_autoIncrID;
        break;
      }

      // required uint64 autoIncrID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_autoIncrID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &autoincrid_)));
          set_has_autoincrid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_swallowedGuaxiangID;
        break;
      }

      // required uint64 swallowedGuaxiangID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_swallowedGuaxiangID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &swallowedguaxiangid_)));
          set_has_swallowedguaxiangid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_place;
        break;
      }

      // required sint32 place = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_place:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &place_)));
          set_has_place();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_swallowedPlace;
        break;
      }

      // required sint32 swallowedPlace = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_swallowedPlace:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &swallowedplace_)));
          set_has_swallowedplace();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_endPlace;
        break;
      }

      // required sint32 endPlace = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endPlace:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &endplace_)));
          set_has_endplace();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EnhanceGuaxiangRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .sanguo.MsgID msgID = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // required uint64 autoIncrID = 2;
  if (has_autoincrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->autoincrid(), output);
  }

  // required uint64 swallowedGuaxiangID = 3;
  if (has_swallowedguaxiangid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->swallowedguaxiangid(), output);
  }

  // required sint32 place = 4;
  if (has_place()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->place(), output);
  }

  // required sint32 swallowedPlace = 5;
  if (has_swallowedplace()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->swallowedplace(), output);
  }

  // required sint32 endPlace = 6;
  if (has_endplace()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->endplace(), output);
  }

}

int EnhanceGuaxiangRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .sanguo.MsgID msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // required uint64 autoIncrID = 2;
    if (has_autoincrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->autoincrid());
    }

    // required uint64 swallowedGuaxiangID = 3;
    if (has_swallowedguaxiangid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->swallowedguaxiangid());
    }

    // required sint32 place = 4;
    if (has_place()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->place());
    }

    // required sint32 swallowedPlace = 5;
    if (has_swallowedplace()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->swallowedplace());
    }

    // required sint32 endPlace = 6;
    if (has_endplace()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->endplace());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnhanceGuaxiangRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EnhanceGuaxiangRequest*>(&from));
}

void EnhanceGuaxiangRequest::MergeFrom(const EnhanceGuaxiangRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_autoincrid()) {
      set_autoincrid(from.autoincrid());
    }
    if (from.has_swallowedguaxiangid()) {
      set_swallowedguaxiangid(from.swallowedguaxiangid());
    }
    if (from.has_place()) {
      set_place(from.place());
    }
    if (from.has_swallowedplace()) {
      set_swallowedplace(from.swallowedplace());
    }
    if (from.has_endplace()) {
      set_endplace(from.endplace());
    }
  }
}

void EnhanceGuaxiangRequest::CopyFrom(const EnhanceGuaxiangRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnhanceGuaxiangRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void EnhanceGuaxiangRequest::Swap(EnhanceGuaxiangRequest* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(autoincrid_, other->autoincrid_);
    std::swap(swallowedguaxiangid_, other->swallowedguaxiangid_);
    std::swap(place_, other->place_);
    std::swap(swallowedplace_, other->swallowedplace_);
    std::swap(endplace_, other->endplace_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EnhanceGuaxiangRequest::GetTypeName() const {
  return "sanguo.EnhanceGuaxiangRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int EnhanceGuaxiangResponse::kMsgIDFieldNumber;
const int EnhanceGuaxiangResponse::kStatusFieldNumber;
const int EnhanceGuaxiangResponse::kGuaxiangGoodsFieldNumber;
#endif  // !_MSC_VER

EnhanceGuaxiangResponse::EnhanceGuaxiangResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void EnhanceGuaxiangResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  guaxianggoods_ = const_cast< ::sanguo::MsgGuaxiangGoods*>(
      ::sanguo::MsgGuaxiangGoods::internal_default_instance());
#else
  guaxianggoods_ = const_cast< ::sanguo::MsgGuaxiangGoods*>(&::sanguo::MsgGuaxiangGoods::default_instance());
#endif
}

EnhanceGuaxiangResponse::EnhanceGuaxiangResponse(const EnhanceGuaxiangResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void EnhanceGuaxiangResponse::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 1;
  status_ = 0;
  guaxianggoods_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnhanceGuaxiangResponse::~EnhanceGuaxiangResponse() {
  SharedDtor();
}

void EnhanceGuaxiangResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete guaxianggoods_;
  }
}

void EnhanceGuaxiangResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EnhanceGuaxiangResponse& EnhanceGuaxiangResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_enhance_5fguaxiang_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_enhance_5fguaxiang_2eproto();
#endif
  return *default_instance_;
}

EnhanceGuaxiangResponse* EnhanceGuaxiangResponse::default_instance_ = NULL;

EnhanceGuaxiangResponse* EnhanceGuaxiangResponse::New() const {
  return new EnhanceGuaxiangResponse;
}

void EnhanceGuaxiangResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 1;
    status_ = 0;
    if (has_guaxianggoods()) {
      if (guaxianggoods_ != NULL) guaxianggoods_->::sanguo::MsgGuaxiangGoods::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool EnhanceGuaxiangResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sanguo.MsgID msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::sanguo::MsgID >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .sanguo.StatusCode status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::StatusCode_IsValid(value)) {
            set_status(static_cast< ::sanguo::StatusCode >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_guaxiangGoods;
        break;
      }

      // optional .sanguo.MsgGuaxiangGoods guaxiangGoods = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guaxiangGoods:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guaxianggoods()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EnhanceGuaxiangResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .sanguo.MsgID msgID = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // required .sanguo.StatusCode status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // optional .sanguo.MsgGuaxiangGoods guaxiangGoods = 3;
  if (has_guaxianggoods()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->guaxianggoods(), output);
  }

}

int EnhanceGuaxiangResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .sanguo.MsgID msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // required .sanguo.StatusCode status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional .sanguo.MsgGuaxiangGoods guaxiangGoods = 3;
    if (has_guaxianggoods()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guaxianggoods());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnhanceGuaxiangResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EnhanceGuaxiangResponse*>(&from));
}

void EnhanceGuaxiangResponse::MergeFrom(const EnhanceGuaxiangResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_guaxianggoods()) {
      mutable_guaxianggoods()->::sanguo::MsgGuaxiangGoods::MergeFrom(from.guaxianggoods());
    }
  }
}

void EnhanceGuaxiangResponse::CopyFrom(const EnhanceGuaxiangResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnhanceGuaxiangResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_guaxianggoods()) {
    if (!this->guaxianggoods().IsInitialized()) return false;
  }
  return true;
}

void EnhanceGuaxiangResponse::Swap(EnhanceGuaxiangResponse* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(status_, other->status_);
    std::swap(guaxianggoods_, other->guaxianggoods_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EnhanceGuaxiangResponse::GetTypeName() const {
  return "sanguo.EnhanceGuaxiangResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sanguo

// @@protoc_insertion_point(global_scope)
