// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sweep_info_of_login.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sweep_info_of_login.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace sanguo {

void protobuf_ShutdownFile_sweep_5finfo_5fof_5flogin_2eproto() {
  delete SweepInfoOfLoginRequest::default_instance_;
  delete SweepInfoOfLoginResponse::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_sweep_5finfo_5fof_5flogin_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_sweep_5finfo_5fof_5flogin_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::sanguo::protobuf_AddDesc_msg_5fid_2eproto();
  ::sanguo::protobuf_AddDesc_msg_5fstatus_5fcode_2eproto();
  ::sanguo::protobuf_AddDesc_role_5fcooldown_2eproto();
  ::sanguo::protobuf_AddDesc_sweep_5fdungeon_5faward_2eproto();
  SweepInfoOfLoginRequest::default_instance_ = new SweepInfoOfLoginRequest();
  SweepInfoOfLoginResponse::default_instance_ = new SweepInfoOfLoginResponse();
  SweepInfoOfLoginRequest::default_instance_->InitAsDefaultInstance();
  SweepInfoOfLoginResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_sweep_5finfo_5fof_5flogin_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_sweep_5finfo_5fof_5flogin_2eproto_once_);
void protobuf_AddDesc_sweep_5finfo_5fof_5flogin_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_sweep_5finfo_5fof_5flogin_2eproto_once_,
                 &protobuf_AddDesc_sweep_5finfo_5fof_5flogin_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_sweep_5finfo_5fof_5flogin_2eproto {
  StaticDescriptorInitializer_sweep_5finfo_5fof_5flogin_2eproto() {
    protobuf_AddDesc_sweep_5finfo_5fof_5flogin_2eproto();
  }
} static_descriptor_initializer_sweep_5finfo_5fof_5flogin_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int SweepInfoOfLoginRequest::kMsgIDFieldNumber;
#endif  // !_MSC_VER

SweepInfoOfLoginRequest::SweepInfoOfLoginRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SweepInfoOfLoginRequest::InitAsDefaultInstance() {
}

SweepInfoOfLoginRequest::SweepInfoOfLoginRequest(const SweepInfoOfLoginRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SweepInfoOfLoginRequest::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SweepInfoOfLoginRequest::~SweepInfoOfLoginRequest() {
  SharedDtor();
}

void SweepInfoOfLoginRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SweepInfoOfLoginRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SweepInfoOfLoginRequest& SweepInfoOfLoginRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_sweep_5finfo_5fof_5flogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_sweep_5finfo_5fof_5flogin_2eproto();
#endif
  return *default_instance_;
}

SweepInfoOfLoginRequest* SweepInfoOfLoginRequest::default_instance_ = NULL;

SweepInfoOfLoginRequest* SweepInfoOfLoginRequest::New() const {
  return new SweepInfoOfLoginRequest;
}

void SweepInfoOfLoginRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SweepInfoOfLoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sanguo.MsgID msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::sanguo::MsgID >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SweepInfoOfLoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .sanguo.MsgID msgID = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

}

int SweepInfoOfLoginRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .sanguo.MsgID msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SweepInfoOfLoginRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SweepInfoOfLoginRequest*>(&from));
}

void SweepInfoOfLoginRequest::MergeFrom(const SweepInfoOfLoginRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
}

void SweepInfoOfLoginRequest::CopyFrom(const SweepInfoOfLoginRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SweepInfoOfLoginRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SweepInfoOfLoginRequest::Swap(SweepInfoOfLoginRequest* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SweepInfoOfLoginRequest::GetTypeName() const {
  return "sanguo.SweepInfoOfLoginRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int SweepInfoOfLoginResponse::kMsgIDFieldNumber;
const int SweepInfoOfLoginResponse::kStatusFieldNumber;
const int SweepInfoOfLoginResponse::kDungeonIdFieldNumber;
const int SweepInfoOfLoginResponse::kDungeonTypeFieldNumber;
const int SweepInfoOfLoginResponse::kSweepDungeonTypeFieldNumber;
const int SweepInfoOfLoginResponse::kCopperFieldNumber;
const int SweepInfoOfLoginResponse::kExpFieldNumber;
const int SweepInfoOfLoginResponse::kJungongFieldNumber;
const int SweepInfoOfLoginResponse::kPowerFieldNumber;
const int SweepInfoOfLoginResponse::kCdFieldNumber;
const int SweepInfoOfLoginResponse::kOnlineGetGoodsIdFieldNumber;
const int SweepInfoOfLoginResponse::kStartFloorFieldNumber;
const int SweepInfoOfLoginResponse::kCurrentFloorFieldNumber;
const int SweepInfoOfLoginResponse::kDestFloorFieldNumber;
#endif  // !_MSC_VER

SweepInfoOfLoginResponse::SweepInfoOfLoginResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SweepInfoOfLoginResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  cd_ = const_cast< ::sanguo::MsgRoleCooldown*>(
      ::sanguo::MsgRoleCooldown::internal_default_instance());
#else
  cd_ = const_cast< ::sanguo::MsgRoleCooldown*>(&::sanguo::MsgRoleCooldown::default_instance());
#endif
}

SweepInfoOfLoginResponse::SweepInfoOfLoginResponse(const SweepInfoOfLoginResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SweepInfoOfLoginResponse::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 1;
  status_ = 0;
  dungeonid_ = 0u;
  dungeontype_ = 0u;
  sweepdungeontype_ = 0u;
  copper_ = GOOGLE_ULONGLONG(0);
  exp_ = GOOGLE_ULONGLONG(0);
  jungong_ = GOOGLE_ULONGLONG(0);
  power_ = 0u;
  cd_ = NULL;
  onlinegetgoodsid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  startfloor_ = 0u;
  currentfloor_ = 0u;
  destfloor_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SweepInfoOfLoginResponse::~SweepInfoOfLoginResponse() {
  SharedDtor();
}

void SweepInfoOfLoginResponse::SharedDtor() {
  if (onlinegetgoodsid_ != &::google::protobuf::internal::kEmptyString) {
    delete onlinegetgoodsid_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete cd_;
  }
}

void SweepInfoOfLoginResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SweepInfoOfLoginResponse& SweepInfoOfLoginResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_sweep_5finfo_5fof_5flogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_sweep_5finfo_5fof_5flogin_2eproto();
#endif
  return *default_instance_;
}

SweepInfoOfLoginResponse* SweepInfoOfLoginResponse::default_instance_ = NULL;

SweepInfoOfLoginResponse* SweepInfoOfLoginResponse::New() const {
  return new SweepInfoOfLoginResponse;
}

void SweepInfoOfLoginResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 1;
    status_ = 0;
    dungeonid_ = 0u;
    dungeontype_ = 0u;
    sweepdungeontype_ = 0u;
    copper_ = GOOGLE_ULONGLONG(0);
    exp_ = GOOGLE_ULONGLONG(0);
    jungong_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    power_ = 0u;
    if (has_cd()) {
      if (cd_ != NULL) cd_->::sanguo::MsgRoleCooldown::Clear();
    }
    if (has_onlinegetgoodsid()) {
      if (onlinegetgoodsid_ != &::google::protobuf::internal::kEmptyString) {
        onlinegetgoodsid_->clear();
      }
    }
    startfloor_ = 0u;
    currentfloor_ = 0u;
    destfloor_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SweepInfoOfLoginResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sanguo.MsgID msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::sanguo::MsgID >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .sanguo.StatusCode status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::StatusCode_IsValid(value)) {
            set_status(static_cast< ::sanguo::StatusCode >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dungeonId;
        break;
      }

      // optional uint32 dungeonId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dungeonId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dungeonid_)));
          set_has_dungeonid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dungeonType;
        break;
      }

      // optional uint32 dungeonType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dungeonType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dungeontype_)));
          set_has_dungeontype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sweepDungeonType;
        break;
      }

      // optional uint32 sweepDungeonType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sweepDungeonType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sweepdungeontype_)));
          set_has_sweepdungeontype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_copper;
        break;
      }

      // optional uint64 copper = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_copper:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &copper_)));
          set_has_copper();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_exp;
        break;
      }

      // optional uint64 exp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_jungong;
        break;
      }

      // optional uint64 jungong = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jungong:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &jungong_)));
          set_has_jungong();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_power;
        break;
      }

      // optional uint32 power = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_cd;
        break;
      }

      // optional .sanguo.MsgRoleCooldown cd = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_onlineGetGoodsId;
        break;
      }

      // optional string onlineGetGoodsId = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_onlineGetGoodsId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_onlinegetgoodsid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_startFloor;
        break;
      }

      // optional uint32 startFloor = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startFloor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &startfloor_)));
          set_has_startfloor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_currentFloor;
        break;
      }

      // optional uint32 currentFloor = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currentFloor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &currentfloor_)));
          set_has_currentfloor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_destFloor;
        break;
      }

      // optional uint32 destFloor = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_destFloor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &destfloor_)));
          set_has_destfloor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SweepInfoOfLoginResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .sanguo.MsgID msgID = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // required .sanguo.StatusCode status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // optional uint32 dungeonId = 3;
  if (has_dungeonid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dungeonid(), output);
  }

  // optional uint32 dungeonType = 4;
  if (has_dungeontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dungeontype(), output);
  }

  // optional uint32 sweepDungeonType = 5;
  if (has_sweepdungeontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sweepdungeontype(), output);
  }

  // optional uint64 copper = 6;
  if (has_copper()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->copper(), output);
  }

  // optional uint64 exp = 7;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->exp(), output);
  }

  // optional uint64 jungong = 8;
  if (has_jungong()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->jungong(), output);
  }

  // optional uint32 power = 9;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->power(), output);
  }

  // optional .sanguo.MsgRoleCooldown cd = 10;
  if (has_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->cd(), output);
  }

  // optional string onlineGetGoodsId = 11;
  if (has_onlinegetgoodsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->onlinegetgoodsid(), output);
  }

  // optional uint32 startFloor = 12;
  if (has_startfloor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->startfloor(), output);
  }

  // optional uint32 currentFloor = 13;
  if (has_currentfloor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->currentfloor(), output);
  }

  // optional uint32 destFloor = 14;
  if (has_destfloor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->destfloor(), output);
  }

}

int SweepInfoOfLoginResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .sanguo.MsgID msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // required .sanguo.StatusCode status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional uint32 dungeonId = 3;
    if (has_dungeonid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dungeonid());
    }

    // optional uint32 dungeonType = 4;
    if (has_dungeontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dungeontype());
    }

    // optional uint32 sweepDungeonType = 5;
    if (has_sweepdungeontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sweepdungeontype());
    }

    // optional uint64 copper = 6;
    if (has_copper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->copper());
    }

    // optional uint64 exp = 7;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->exp());
    }

    // optional uint64 jungong = 8;
    if (has_jungong()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->jungong());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 power = 9;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->power());
    }

    // optional .sanguo.MsgRoleCooldown cd = 10;
    if (has_cd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cd());
    }

    // optional string onlineGetGoodsId = 11;
    if (has_onlinegetgoodsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->onlinegetgoodsid());
    }

    // optional uint32 startFloor = 12;
    if (has_startfloor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->startfloor());
    }

    // optional uint32 currentFloor = 13;
    if (has_currentfloor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->currentfloor());
    }

    // optional uint32 destFloor = 14;
    if (has_destfloor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->destfloor());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SweepInfoOfLoginResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SweepInfoOfLoginResponse*>(&from));
}

void SweepInfoOfLoginResponse::MergeFrom(const SweepInfoOfLoginResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_dungeonid()) {
      set_dungeonid(from.dungeonid());
    }
    if (from.has_dungeontype()) {
      set_dungeontype(from.dungeontype());
    }
    if (from.has_sweepdungeontype()) {
      set_sweepdungeontype(from.sweepdungeontype());
    }
    if (from.has_copper()) {
      set_copper(from.copper());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_jungong()) {
      set_jungong(from.jungong());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_cd()) {
      mutable_cd()->::sanguo::MsgRoleCooldown::MergeFrom(from.cd());
    }
    if (from.has_onlinegetgoodsid()) {
      set_onlinegetgoodsid(from.onlinegetgoodsid());
    }
    if (from.has_startfloor()) {
      set_startfloor(from.startfloor());
    }
    if (from.has_currentfloor()) {
      set_currentfloor(from.currentfloor());
    }
    if (from.has_destfloor()) {
      set_destfloor(from.destfloor());
    }
  }
}

void SweepInfoOfLoginResponse::CopyFrom(const SweepInfoOfLoginResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SweepInfoOfLoginResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_cd()) {
    if (!this->cd().IsInitialized()) return false;
  }
  return true;
}

void SweepInfoOfLoginResponse::Swap(SweepInfoOfLoginResponse* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(status_, other->status_);
    std::swap(dungeonid_, other->dungeonid_);
    std::swap(dungeontype_, other->dungeontype_);
    std::swap(sweepdungeontype_, other->sweepdungeontype_);
    std::swap(copper_, other->copper_);
    std::swap(exp_, other->exp_);
    std::swap(jungong_, other->jungong_);
    std::swap(power_, other->power_);
    std::swap(cd_, other->cd_);
    std::swap(onlinegetgoodsid_, other->onlinegetgoodsid_);
    std::swap(startfloor_, other->startfloor_);
    std::swap(currentfloor_, other->currentfloor_);
    std::swap(destfloor_, other->destfloor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SweepInfoOfLoginResponse::GetTypeName() const {
  return "sanguo.SweepInfoOfLoginResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sanguo

// @@protoc_insertion_point(global_scope)
