// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: replace_kungfu_slot.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "replace_kungfu_slot.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace sanguo {

void protobuf_ShutdownFile_replace_5fkungfu_5fslot_2eproto() {
  delete ReplaceKungfuSlotRequest::default_instance_;
  delete ReplaceKungfuSlotResponse::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_replace_5fkungfu_5fslot_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_replace_5fkungfu_5fslot_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::sanguo::protobuf_AddDesc_msg_5fid_2eproto();
  ::sanguo::protobuf_AddDesc_msg_5fstatus_5fcode_2eproto();
  ::sanguo::protobuf_AddDesc_role_5fcooldown_2eproto();
  ::sanguo::protobuf_AddDesc_role_5fbag_5fgoods_2eproto();
  ReplaceKungfuSlotRequest::default_instance_ = new ReplaceKungfuSlotRequest();
  ReplaceKungfuSlotResponse::default_instance_ = new ReplaceKungfuSlotResponse();
  ReplaceKungfuSlotRequest::default_instance_->InitAsDefaultInstance();
  ReplaceKungfuSlotResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_replace_5fkungfu_5fslot_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_replace_5fkungfu_5fslot_2eproto_once_);
void protobuf_AddDesc_replace_5fkungfu_5fslot_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_replace_5fkungfu_5fslot_2eproto_once_,
                 &protobuf_AddDesc_replace_5fkungfu_5fslot_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_replace_5fkungfu_5fslot_2eproto {
  StaticDescriptorInitializer_replace_5fkungfu_5fslot_2eproto() {
    protobuf_AddDesc_replace_5fkungfu_5fslot_2eproto();
  }
} static_descriptor_initializer_replace_5fkungfu_5fslot_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int ReplaceKungfuSlotRequest::kMsgIDFieldNumber;
const int ReplaceKungfuSlotRequest::kKungfuSlotFieldNumber;
const int ReplaceKungfuSlotRequest::kSlotOneFieldNumber;
const int ReplaceKungfuSlotRequest::kSlotTwoFieldNumber;
#endif  // !_MSC_VER

ReplaceKungfuSlotRequest::ReplaceKungfuSlotRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ReplaceKungfuSlotRequest::InitAsDefaultInstance() {
}

ReplaceKungfuSlotRequest::ReplaceKungfuSlotRequest(const ReplaceKungfuSlotRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ReplaceKungfuSlotRequest::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 1;
  kungfuslot_ = 0u;
  slotone_ = 0u;
  slottwo_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplaceKungfuSlotRequest::~ReplaceKungfuSlotRequest() {
  SharedDtor();
}

void ReplaceKungfuSlotRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ReplaceKungfuSlotRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ReplaceKungfuSlotRequest& ReplaceKungfuSlotRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_replace_5fkungfu_5fslot_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_replace_5fkungfu_5fslot_2eproto();
#endif
  return *default_instance_;
}

ReplaceKungfuSlotRequest* ReplaceKungfuSlotRequest::default_instance_ = NULL;

ReplaceKungfuSlotRequest* ReplaceKungfuSlotRequest::New() const {
  return new ReplaceKungfuSlotRequest;
}

void ReplaceKungfuSlotRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 1;
    kungfuslot_ = 0u;
    slotone_ = 0u;
    slottwo_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ReplaceKungfuSlotRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sanguo.MsgID msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::sanguo::MsgID >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_kungfuSlot;
        break;
      }

      // required uint32 kungfuSlot = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kungfuSlot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kungfuslot_)));
          set_has_kungfuslot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_slotOne;
        break;
      }

      // required uint32 slotOne = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slotOne:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slotone_)));
          set_has_slotone();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_slotTwo;
        break;
      }

      // required uint32 slotTwo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slotTwo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slottwo_)));
          set_has_slottwo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReplaceKungfuSlotRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .sanguo.MsgID msgID = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // required uint32 kungfuSlot = 2;
  if (has_kungfuslot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->kungfuslot(), output);
  }

  // required uint32 slotOne = 3;
  if (has_slotone()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->slotone(), output);
  }

  // required uint32 slotTwo = 4;
  if (has_slottwo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->slottwo(), output);
  }

}

int ReplaceKungfuSlotRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .sanguo.MsgID msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // required uint32 kungfuSlot = 2;
    if (has_kungfuslot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kungfuslot());
    }

    // required uint32 slotOne = 3;
    if (has_slotone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slotone());
    }

    // required uint32 slotTwo = 4;
    if (has_slottwo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slottwo());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplaceKungfuSlotRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ReplaceKungfuSlotRequest*>(&from));
}

void ReplaceKungfuSlotRequest::MergeFrom(const ReplaceKungfuSlotRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_kungfuslot()) {
      set_kungfuslot(from.kungfuslot());
    }
    if (from.has_slotone()) {
      set_slotone(from.slotone());
    }
    if (from.has_slottwo()) {
      set_slottwo(from.slottwo());
    }
  }
}

void ReplaceKungfuSlotRequest::CopyFrom(const ReplaceKungfuSlotRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplaceKungfuSlotRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ReplaceKungfuSlotRequest::Swap(ReplaceKungfuSlotRequest* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(kungfuslot_, other->kungfuslot_);
    std::swap(slotone_, other->slotone_);
    std::swap(slottwo_, other->slottwo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ReplaceKungfuSlotRequest::GetTypeName() const {
  return "sanguo.ReplaceKungfuSlotRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int ReplaceKungfuSlotResponse::kMsgIDFieldNumber;
const int ReplaceKungfuSlotResponse::kStatusFieldNumber;
#endif  // !_MSC_VER

ReplaceKungfuSlotResponse::ReplaceKungfuSlotResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ReplaceKungfuSlotResponse::InitAsDefaultInstance() {
}

ReplaceKungfuSlotResponse::ReplaceKungfuSlotResponse(const ReplaceKungfuSlotResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ReplaceKungfuSlotResponse::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 1;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplaceKungfuSlotResponse::~ReplaceKungfuSlotResponse() {
  SharedDtor();
}

void ReplaceKungfuSlotResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ReplaceKungfuSlotResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ReplaceKungfuSlotResponse& ReplaceKungfuSlotResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_replace_5fkungfu_5fslot_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_replace_5fkungfu_5fslot_2eproto();
#endif
  return *default_instance_;
}

ReplaceKungfuSlotResponse* ReplaceKungfuSlotResponse::default_instance_ = NULL;

ReplaceKungfuSlotResponse* ReplaceKungfuSlotResponse::New() const {
  return new ReplaceKungfuSlotResponse;
}

void ReplaceKungfuSlotResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 1;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ReplaceKungfuSlotResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sanguo.MsgID msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::sanguo::MsgID >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .sanguo.StatusCode status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::StatusCode_IsValid(value)) {
            set_status(static_cast< ::sanguo::StatusCode >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReplaceKungfuSlotResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .sanguo.MsgID msgID = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // required .sanguo.StatusCode status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

}

int ReplaceKungfuSlotResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .sanguo.MsgID msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // required .sanguo.StatusCode status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplaceKungfuSlotResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ReplaceKungfuSlotResponse*>(&from));
}

void ReplaceKungfuSlotResponse::MergeFrom(const ReplaceKungfuSlotResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
}

void ReplaceKungfuSlotResponse::CopyFrom(const ReplaceKungfuSlotResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplaceKungfuSlotResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ReplaceKungfuSlotResponse::Swap(ReplaceKungfuSlotResponse* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ReplaceKungfuSlotResponse::GetTypeName() const {
  return "sanguo.ReplaceKungfuSlotResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sanguo

// @@protoc_insertion_point(global_scope)
