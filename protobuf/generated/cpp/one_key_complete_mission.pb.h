// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: one_key_complete_mission.proto

#ifndef PROTOBUF_one_5fkey_5fcomplete_5fmission_2eproto__INCLUDED
#define PROTOBUF_one_5fkey_5fcomplete_5fmission_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "msg_id.pb.h"
#include "msg_status_code.pb.h"
#include "role_mission.pb.h"
#include "gift_info.pb.h"
// @@protoc_insertion_point(includes)

namespace sanguo {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_one_5fkey_5fcomplete_5fmission_2eproto();
void protobuf_AssignDesc_one_5fkey_5fcomplete_5fmission_2eproto();
void protobuf_ShutdownFile_one_5fkey_5fcomplete_5fmission_2eproto();

class OneKeyCompleteMissionRequest;
class OneKeyCompleteMissionResponse;

// ===================================================================

class OneKeyCompleteMissionRequest : public ::google::protobuf::MessageLite {
 public:
  OneKeyCompleteMissionRequest();
  virtual ~OneKeyCompleteMissionRequest();

  OneKeyCompleteMissionRequest(const OneKeyCompleteMissionRequest& from);

  inline OneKeyCompleteMissionRequest& operator=(const OneKeyCompleteMissionRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const OneKeyCompleteMissionRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const OneKeyCompleteMissionRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(OneKeyCompleteMissionRequest* other);

  // implements Message ----------------------------------------------

  OneKeyCompleteMissionRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const OneKeyCompleteMissionRequest& from);
  void MergeFrom(const OneKeyCompleteMissionRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .sanguo.MsgID msgID = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline ::sanguo::MsgID msgid() const;
  inline void set_msgid(::sanguo::MsgID value);

  // required uint64 autoIncrID = 2;
  inline bool has_autoincrid() const;
  inline void clear_autoincrid();
  static const int kAutoIncrIDFieldNumber = 2;
  inline ::google::protobuf::uint64 autoincrid() const;
  inline void set_autoincrid(::google::protobuf::uint64 value);

  // required uint32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:sanguo.OneKeyCompleteMissionRequest)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_autoincrid();
  inline void clear_has_autoincrid();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::uint64 autoincrid_;
  int msgid_;
  ::google::protobuf::uint32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_one_5fkey_5fcomplete_5fmission_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_one_5fkey_5fcomplete_5fmission_2eproto();
  #endif
  friend void protobuf_AssignDesc_one_5fkey_5fcomplete_5fmission_2eproto();
  friend void protobuf_ShutdownFile_one_5fkey_5fcomplete_5fmission_2eproto();

  void InitAsDefaultInstance();
  static OneKeyCompleteMissionRequest* default_instance_;
};
// -------------------------------------------------------------------

class OneKeyCompleteMissionResponse : public ::google::protobuf::MessageLite {
 public:
  OneKeyCompleteMissionResponse();
  virtual ~OneKeyCompleteMissionResponse();

  OneKeyCompleteMissionResponse(const OneKeyCompleteMissionResponse& from);

  inline OneKeyCompleteMissionResponse& operator=(const OneKeyCompleteMissionResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const OneKeyCompleteMissionResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const OneKeyCompleteMissionResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(OneKeyCompleteMissionResponse* other);

  // implements Message ----------------------------------------------

  OneKeyCompleteMissionResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const OneKeyCompleteMissionResponse& from);
  void MergeFrom(const OneKeyCompleteMissionResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .sanguo.MsgID msgID = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline ::sanguo::MsgID msgid() const;
  inline void set_msgid(::sanguo::MsgID value);

  // required .sanguo.StatusCode status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::sanguo::StatusCode status() const;
  inline void set_status(::sanguo::StatusCode value);

  // optional uint32 roleGold = 3;
  inline bool has_rolegold() const;
  inline void clear_rolegold();
  static const int kRoleGoldFieldNumber = 3;
  inline ::google::protobuf::uint32 rolegold() const;
  inline void set_rolegold(::google::protobuf::uint32 value);

  // optional uint32 roleJade = 4;
  inline bool has_rolejade() const;
  inline void clear_rolejade();
  static const int kRoleJadeFieldNumber = 4;
  inline ::google::protobuf::uint32 rolejade() const;
  inline void set_rolejade(::google::protobuf::uint32 value);

  // optional .sanguo.MsgRoleMission roleMission = 5;
  inline bool has_rolemission() const;
  inline void clear_rolemission();
  static const int kRoleMissionFieldNumber = 5;
  inline const ::sanguo::MsgRoleMission& rolemission() const;
  inline ::sanguo::MsgRoleMission* mutable_rolemission();
  inline ::sanguo::MsgRoleMission* release_rolemission();
  inline void set_allocated_rolemission(::sanguo::MsgRoleMission* rolemission);

  // @@protoc_insertion_point(class_scope:sanguo.OneKeyCompleteMissionResponse)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_rolegold();
  inline void clear_has_rolegold();
  inline void set_has_rolejade();
  inline void clear_has_rolejade();
  inline void set_has_rolemission();
  inline void clear_has_rolemission();

  int msgid_;
  int status_;
  ::google::protobuf::uint32 rolegold_;
  ::google::protobuf::uint32 rolejade_;
  ::sanguo::MsgRoleMission* rolemission_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_one_5fkey_5fcomplete_5fmission_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_one_5fkey_5fcomplete_5fmission_2eproto();
  #endif
  friend void protobuf_AssignDesc_one_5fkey_5fcomplete_5fmission_2eproto();
  friend void protobuf_ShutdownFile_one_5fkey_5fcomplete_5fmission_2eproto();

  void InitAsDefaultInstance();
  static OneKeyCompleteMissionResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// OneKeyCompleteMissionRequest

// required .sanguo.MsgID msgID = 1;
inline bool OneKeyCompleteMissionRequest::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OneKeyCompleteMissionRequest::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OneKeyCompleteMissionRequest::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OneKeyCompleteMissionRequest::clear_msgid() {
  msgid_ = 1;
  clear_has_msgid();
}
inline ::sanguo::MsgID OneKeyCompleteMissionRequest::msgid() const {
  return static_cast< ::sanguo::MsgID >(msgid_);
}
inline void OneKeyCompleteMissionRequest::set_msgid(::sanguo::MsgID value) {
  assert(::sanguo::MsgID_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// required uint64 autoIncrID = 2;
inline bool OneKeyCompleteMissionRequest::has_autoincrid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OneKeyCompleteMissionRequest::set_has_autoincrid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OneKeyCompleteMissionRequest::clear_has_autoincrid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OneKeyCompleteMissionRequest::clear_autoincrid() {
  autoincrid_ = GOOGLE_ULONGLONG(0);
  clear_has_autoincrid();
}
inline ::google::protobuf::uint64 OneKeyCompleteMissionRequest::autoincrid() const {
  return autoincrid_;
}
inline void OneKeyCompleteMissionRequest::set_autoincrid(::google::protobuf::uint64 value) {
  set_has_autoincrid();
  autoincrid_ = value;
}

// required uint32 type = 3;
inline bool OneKeyCompleteMissionRequest::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OneKeyCompleteMissionRequest::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OneKeyCompleteMissionRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OneKeyCompleteMissionRequest::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 OneKeyCompleteMissionRequest::type() const {
  return type_;
}
inline void OneKeyCompleteMissionRequest::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// OneKeyCompleteMissionResponse

// required .sanguo.MsgID msgID = 1;
inline bool OneKeyCompleteMissionResponse::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OneKeyCompleteMissionResponse::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OneKeyCompleteMissionResponse::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OneKeyCompleteMissionResponse::clear_msgid() {
  msgid_ = 1;
  clear_has_msgid();
}
inline ::sanguo::MsgID OneKeyCompleteMissionResponse::msgid() const {
  return static_cast< ::sanguo::MsgID >(msgid_);
}
inline void OneKeyCompleteMissionResponse::set_msgid(::sanguo::MsgID value) {
  assert(::sanguo::MsgID_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// required .sanguo.StatusCode status = 2;
inline bool OneKeyCompleteMissionResponse::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OneKeyCompleteMissionResponse::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OneKeyCompleteMissionResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OneKeyCompleteMissionResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::sanguo::StatusCode OneKeyCompleteMissionResponse::status() const {
  return static_cast< ::sanguo::StatusCode >(status_);
}
inline void OneKeyCompleteMissionResponse::set_status(::sanguo::StatusCode value) {
  assert(::sanguo::StatusCode_IsValid(value));
  set_has_status();
  status_ = value;
}

// optional uint32 roleGold = 3;
inline bool OneKeyCompleteMissionResponse::has_rolegold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OneKeyCompleteMissionResponse::set_has_rolegold() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OneKeyCompleteMissionResponse::clear_has_rolegold() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OneKeyCompleteMissionResponse::clear_rolegold() {
  rolegold_ = 0u;
  clear_has_rolegold();
}
inline ::google::protobuf::uint32 OneKeyCompleteMissionResponse::rolegold() const {
  return rolegold_;
}
inline void OneKeyCompleteMissionResponse::set_rolegold(::google::protobuf::uint32 value) {
  set_has_rolegold();
  rolegold_ = value;
}

// optional uint32 roleJade = 4;
inline bool OneKeyCompleteMissionResponse::has_rolejade() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OneKeyCompleteMissionResponse::set_has_rolejade() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OneKeyCompleteMissionResponse::clear_has_rolejade() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OneKeyCompleteMissionResponse::clear_rolejade() {
  rolejade_ = 0u;
  clear_has_rolejade();
}
inline ::google::protobuf::uint32 OneKeyCompleteMissionResponse::rolejade() const {
  return rolejade_;
}
inline void OneKeyCompleteMissionResponse::set_rolejade(::google::protobuf::uint32 value) {
  set_has_rolejade();
  rolejade_ = value;
}

// optional .sanguo.MsgRoleMission roleMission = 5;
inline bool OneKeyCompleteMissionResponse::has_rolemission() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OneKeyCompleteMissionResponse::set_has_rolemission() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OneKeyCompleteMissionResponse::clear_has_rolemission() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OneKeyCompleteMissionResponse::clear_rolemission() {
  if (rolemission_ != NULL) rolemission_->::sanguo::MsgRoleMission::Clear();
  clear_has_rolemission();
}
inline const ::sanguo::MsgRoleMission& OneKeyCompleteMissionResponse::rolemission() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return rolemission_ != NULL ? *rolemission_ : *default_instance().rolemission_;
#else
  return rolemission_ != NULL ? *rolemission_ : *default_instance_->rolemission_;
#endif
}
inline ::sanguo::MsgRoleMission* OneKeyCompleteMissionResponse::mutable_rolemission() {
  set_has_rolemission();
  if (rolemission_ == NULL) rolemission_ = new ::sanguo::MsgRoleMission;
  return rolemission_;
}
inline ::sanguo::MsgRoleMission* OneKeyCompleteMissionResponse::release_rolemission() {
  clear_has_rolemission();
  ::sanguo::MsgRoleMission* temp = rolemission_;
  rolemission_ = NULL;
  return temp;
}
inline void OneKeyCompleteMissionResponse::set_allocated_rolemission(::sanguo::MsgRoleMission* rolemission) {
  delete rolemission_;
  rolemission_ = rolemission;
  if (rolemission) {
    set_has_rolemission();
  } else {
    clear_has_rolemission();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sanguo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_one_5fkey_5fcomplete_5fmission_2eproto__INCLUDED
