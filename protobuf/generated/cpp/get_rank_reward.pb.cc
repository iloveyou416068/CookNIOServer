// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: get_rank_reward.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "get_rank_reward.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace sanguo {

void protobuf_ShutdownFile_get_5frank_5freward_2eproto() {
  delete GetRankRewardRequest::default_instance_;
  delete GetRankRewardResponse::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_get_5frank_5freward_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_get_5frank_5freward_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::sanguo::protobuf_AddDesc_msg_5fid_2eproto();
  ::sanguo::protobuf_AddDesc_msg_5fstatus_5fcode_2eproto();
  GetRankRewardRequest::default_instance_ = new GetRankRewardRequest();
  GetRankRewardResponse::default_instance_ = new GetRankRewardResponse();
  GetRankRewardRequest::default_instance_->InitAsDefaultInstance();
  GetRankRewardResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_get_5frank_5freward_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_get_5frank_5freward_2eproto_once_);
void protobuf_AddDesc_get_5frank_5freward_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_get_5frank_5freward_2eproto_once_,
                 &protobuf_AddDesc_get_5frank_5freward_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_get_5frank_5freward_2eproto {
  StaticDescriptorInitializer_get_5frank_5freward_2eproto() {
    protobuf_AddDesc_get_5frank_5freward_2eproto();
  }
} static_descriptor_initializer_get_5frank_5freward_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int GetRankRewardRequest::kMsgIDFieldNumber;
const int GetRankRewardRequest::kFlagFieldNumber;
#endif  // !_MSC_VER

GetRankRewardRequest::GetRankRewardRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GetRankRewardRequest::InitAsDefaultInstance() {
}

GetRankRewardRequest::GetRankRewardRequest(const GetRankRewardRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GetRankRewardRequest::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 1;
  flag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetRankRewardRequest::~GetRankRewardRequest() {
  SharedDtor();
}

void GetRankRewardRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetRankRewardRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetRankRewardRequest& GetRankRewardRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_get_5frank_5freward_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_get_5frank_5freward_2eproto();
#endif
  return *default_instance_;
}

GetRankRewardRequest* GetRankRewardRequest::default_instance_ = NULL;

GetRankRewardRequest* GetRankRewardRequest::New() const {
  return new GetRankRewardRequest;
}

void GetRankRewardRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 1;
    flag_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GetRankRewardRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sanguo.MsgID msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::sanguo::MsgID >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_flag;
        break;
      }

      // required bool flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetRankRewardRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .sanguo.MsgID msgID = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // required bool flag = 2;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->flag(), output);
  }

}

int GetRankRewardRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .sanguo.MsgID msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // required bool flag = 2;
    if (has_flag()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRankRewardRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetRankRewardRequest*>(&from));
}

void GetRankRewardRequest::MergeFrom(const GetRankRewardRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
}

void GetRankRewardRequest::CopyFrom(const GetRankRewardRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRankRewardRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GetRankRewardRequest::Swap(GetRankRewardRequest* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetRankRewardRequest::GetTypeName() const {
  return "sanguo.GetRankRewardRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int GetRankRewardResponse::kMsgIDFieldNumber;
const int GetRankRewardResponse::kStatusFieldNumber;
const int GetRankRewardResponse::kRankFieldNumber;
const int GetRankRewardResponse::kCurrentHonourRewardFieldNumber;
const int GetRankRewardResponse::kNextMinuteHonourRewardFieldNumber;
const int GetRankRewardResponse::kLostHonourRewardFieldNumber;
const int GetRankRewardResponse::kTotalHonourRewardFieldNumber;
const int GetRankRewardResponse::kCurrentCopperRewardFieldNumber;
const int GetRankRewardResponse::kLostCopperRewardFieldNumber;
const int GetRankRewardResponse::kTotalCopperRewardFieldNumber;
const int GetRankRewardResponse::kNextMinuteCopperRewardFieldNumber;
const int GetRankRewardResponse::kRewardFlagFieldNumber;
const int GetRankRewardResponse::kCaptureTimesFieldNumber;
const int GetRankRewardResponse::kConsecutiveVictoriesFieldNumber;
const int GetRankRewardResponse::kHonourRewardFieldNumber;
const int GetRankRewardResponse::kCopperRewardFieldNumber;
#endif  // !_MSC_VER

GetRankRewardResponse::GetRankRewardResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GetRankRewardResponse::InitAsDefaultInstance() {
}

GetRankRewardResponse::GetRankRewardResponse(const GetRankRewardResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GetRankRewardResponse::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 1;
  status_ = 0;
  rank_ = GOOGLE_ULONGLONG(0);
  currenthonourreward_ = GOOGLE_ULONGLONG(0);
  nextminutehonourreward_ = 0u;
  losthonourreward_ = GOOGLE_ULONGLONG(0);
  totalhonourreward_ = GOOGLE_ULONGLONG(0);
  currentcopperreward_ = GOOGLE_ULONGLONG(0);
  lostcopperreward_ = GOOGLE_ULONGLONG(0);
  totalcopperreward_ = GOOGLE_ULONGLONG(0);
  nextminutecopperreward_ = 0u;
  rewardflag_ = false;
  capturetimes_ = GOOGLE_ULONGLONG(0);
  consecutivevictories_ = 0u;
  honourreward_ = GOOGLE_ULONGLONG(0);
  copperreward_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetRankRewardResponse::~GetRankRewardResponse() {
  SharedDtor();
}

void GetRankRewardResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetRankRewardResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetRankRewardResponse& GetRankRewardResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_get_5frank_5freward_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_get_5frank_5freward_2eproto();
#endif
  return *default_instance_;
}

GetRankRewardResponse* GetRankRewardResponse::default_instance_ = NULL;

GetRankRewardResponse* GetRankRewardResponse::New() const {
  return new GetRankRewardResponse;
}

void GetRankRewardResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 1;
    status_ = 0;
    rank_ = GOOGLE_ULONGLONG(0);
    currenthonourreward_ = GOOGLE_ULONGLONG(0);
    nextminutehonourreward_ = 0u;
    losthonourreward_ = GOOGLE_ULONGLONG(0);
    totalhonourreward_ = GOOGLE_ULONGLONG(0);
    currentcopperreward_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    lostcopperreward_ = GOOGLE_ULONGLONG(0);
    totalcopperreward_ = GOOGLE_ULONGLONG(0);
    nextminutecopperreward_ = 0u;
    rewardflag_ = false;
    capturetimes_ = GOOGLE_ULONGLONG(0);
    consecutivevictories_ = 0u;
    honourreward_ = GOOGLE_ULONGLONG(0);
    copperreward_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GetRankRewardResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sanguo.MsgID msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::sanguo::MsgID >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .sanguo.StatusCode status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::StatusCode_IsValid(value)) {
            set_status(static_cast< ::sanguo::StatusCode >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rank;
        break;
      }

      // optional uint64 rank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_currentHonourReward;
        break;
      }

      // optional uint64 currentHonourReward = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currentHonourReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &currenthonourreward_)));
          set_has_currenthonourreward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_nextMinuteHonourReward;
        break;
      }

      // optional uint32 nextMinuteHonourReward = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nextMinuteHonourReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nextminutehonourreward_)));
          set_has_nextminutehonourreward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_lostHonourReward;
        break;
      }

      // optional uint64 lostHonourReward = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lostHonourReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &losthonourreward_)));
          set_has_losthonourreward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_totalHonourReward;
        break;
      }

      // optional uint64 totalHonourReward = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalHonourReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &totalhonourreward_)));
          set_has_totalhonourreward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_currentCopperReward;
        break;
      }

      // optional uint64 currentCopperReward = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currentCopperReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &currentcopperreward_)));
          set_has_currentcopperreward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_lostCopperReward;
        break;
      }

      // optional uint64 lostCopperReward = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lostCopperReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lostcopperreward_)));
          set_has_lostcopperreward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_totalCopperReward;
        break;
      }

      // optional uint64 totalCopperReward = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalCopperReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &totalcopperreward_)));
          set_has_totalcopperreward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_nextMinuteCopperReward;
        break;
      }

      // optional uint32 nextMinuteCopperReward = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nextMinuteCopperReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nextminutecopperreward_)));
          set_has_nextminutecopperreward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_rewardFlag;
        break;
      }

      // optional bool rewardFlag = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewardFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rewardflag_)));
          set_has_rewardflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_captureTimes;
        break;
      }

      // optional uint64 captureTimes = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_captureTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &capturetimes_)));
          set_has_capturetimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_consecutiveVictories;
        break;
      }

      // optional uint32 consecutiveVictories = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consecutiveVictories:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consecutivevictories_)));
          set_has_consecutivevictories();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_honourReward;
        break;
      }

      // optional uint64 honourReward = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_honourReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &honourreward_)));
          set_has_honourreward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_copperReward;
        break;
      }

      // optional uint64 copperReward = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_copperReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &copperreward_)));
          set_has_copperreward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetRankRewardResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .sanguo.MsgID msgID = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // required .sanguo.StatusCode status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // optional uint64 rank = 3;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->rank(), output);
  }

  // optional uint64 currentHonourReward = 4;
  if (has_currenthonourreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->currenthonourreward(), output);
  }

  // optional uint32 nextMinuteHonourReward = 5;
  if (has_nextminutehonourreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->nextminutehonourreward(), output);
  }

  // optional uint64 lostHonourReward = 6;
  if (has_losthonourreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->losthonourreward(), output);
  }

  // optional uint64 totalHonourReward = 7;
  if (has_totalhonourreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->totalhonourreward(), output);
  }

  // optional uint64 currentCopperReward = 8;
  if (has_currentcopperreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->currentcopperreward(), output);
  }

  // optional uint64 lostCopperReward = 9;
  if (has_lostcopperreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->lostcopperreward(), output);
  }

  // optional uint64 totalCopperReward = 10;
  if (has_totalcopperreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->totalcopperreward(), output);
  }

  // optional uint32 nextMinuteCopperReward = 11;
  if (has_nextminutecopperreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->nextminutecopperreward(), output);
  }

  // optional bool rewardFlag = 12;
  if (has_rewardflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->rewardflag(), output);
  }

  // optional uint64 captureTimes = 13;
  if (has_capturetimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->capturetimes(), output);
  }

  // optional uint32 consecutiveVictories = 14;
  if (has_consecutivevictories()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->consecutivevictories(), output);
  }

  // optional uint64 honourReward = 15;
  if (has_honourreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->honourreward(), output);
  }

  // optional uint64 copperReward = 16;
  if (has_copperreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->copperreward(), output);
  }

}

int GetRankRewardResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .sanguo.MsgID msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // required .sanguo.StatusCode status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional uint64 rank = 3;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rank());
    }

    // optional uint64 currentHonourReward = 4;
    if (has_currenthonourreward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->currenthonourreward());
    }

    // optional uint32 nextMinuteHonourReward = 5;
    if (has_nextminutehonourreward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nextminutehonourreward());
    }

    // optional uint64 lostHonourReward = 6;
    if (has_losthonourreward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->losthonourreward());
    }

    // optional uint64 totalHonourReward = 7;
    if (has_totalhonourreward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->totalhonourreward());
    }

    // optional uint64 currentCopperReward = 8;
    if (has_currentcopperreward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->currentcopperreward());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 lostCopperReward = 9;
    if (has_lostcopperreward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lostcopperreward());
    }

    // optional uint64 totalCopperReward = 10;
    if (has_totalcopperreward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->totalcopperreward());
    }

    // optional uint32 nextMinuteCopperReward = 11;
    if (has_nextminutecopperreward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nextminutecopperreward());
    }

    // optional bool rewardFlag = 12;
    if (has_rewardflag()) {
      total_size += 1 + 1;
    }

    // optional uint64 captureTimes = 13;
    if (has_capturetimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->capturetimes());
    }

    // optional uint32 consecutiveVictories = 14;
    if (has_consecutivevictories()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consecutivevictories());
    }

    // optional uint64 honourReward = 15;
    if (has_honourreward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->honourreward());
    }

    // optional uint64 copperReward = 16;
    if (has_copperreward()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->copperreward());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRankRewardResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetRankRewardResponse*>(&from));
}

void GetRankRewardResponse::MergeFrom(const GetRankRewardResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_currenthonourreward()) {
      set_currenthonourreward(from.currenthonourreward());
    }
    if (from.has_nextminutehonourreward()) {
      set_nextminutehonourreward(from.nextminutehonourreward());
    }
    if (from.has_losthonourreward()) {
      set_losthonourreward(from.losthonourreward());
    }
    if (from.has_totalhonourreward()) {
      set_totalhonourreward(from.totalhonourreward());
    }
    if (from.has_currentcopperreward()) {
      set_currentcopperreward(from.currentcopperreward());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_lostcopperreward()) {
      set_lostcopperreward(from.lostcopperreward());
    }
    if (from.has_totalcopperreward()) {
      set_totalcopperreward(from.totalcopperreward());
    }
    if (from.has_nextminutecopperreward()) {
      set_nextminutecopperreward(from.nextminutecopperreward());
    }
    if (from.has_rewardflag()) {
      set_rewardflag(from.rewardflag());
    }
    if (from.has_capturetimes()) {
      set_capturetimes(from.capturetimes());
    }
    if (from.has_consecutivevictories()) {
      set_consecutivevictories(from.consecutivevictories());
    }
    if (from.has_honourreward()) {
      set_honourreward(from.honourreward());
    }
    if (from.has_copperreward()) {
      set_copperreward(from.copperreward());
    }
  }
}

void GetRankRewardResponse::CopyFrom(const GetRankRewardResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRankRewardResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GetRankRewardResponse::Swap(GetRankRewardResponse* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(status_, other->status_);
    std::swap(rank_, other->rank_);
    std::swap(currenthonourreward_, other->currenthonourreward_);
    std::swap(nextminutehonourreward_, other->nextminutehonourreward_);
    std::swap(losthonourreward_, other->losthonourreward_);
    std::swap(totalhonourreward_, other->totalhonourreward_);
    std::swap(currentcopperreward_, other->currentcopperreward_);
    std::swap(lostcopperreward_, other->lostcopperreward_);
    std::swap(totalcopperreward_, other->totalcopperreward_);
    std::swap(nextminutecopperreward_, other->nextminutecopperreward_);
    std::swap(rewardflag_, other->rewardflag_);
    std::swap(capturetimes_, other->capturetimes_);
    std::swap(consecutivevictories_, other->consecutivevictories_);
    std::swap(honourreward_, other->honourreward_);
    std::swap(copperreward_, other->copperreward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetRankRewardResponse::GetTypeName() const {
  return "sanguo.GetRankRewardResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sanguo

// @@protoc_insertion_point(global_scope)
