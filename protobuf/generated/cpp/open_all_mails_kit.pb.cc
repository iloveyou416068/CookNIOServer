// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: open_all_mails_kit.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "open_all_mails_kit.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace sanguo {

void protobuf_ShutdownFile_open_5fall_5fmails_5fkit_2eproto() {
  delete OpenAllMailsKitRequest::default_instance_;
  delete OpenAllMailsKitResponse::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_open_5fall_5fmails_5fkit_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_open_5fall_5fmails_5fkit_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::sanguo::protobuf_AddDesc_msg_5fid_2eproto();
  ::sanguo::protobuf_AddDesc_msg_5fstatus_5fcode_2eproto();
  ::sanguo::protobuf_AddDesc_gift_5finfo_2eproto();
  OpenAllMailsKitRequest::default_instance_ = new OpenAllMailsKitRequest();
  OpenAllMailsKitResponse::default_instance_ = new OpenAllMailsKitResponse();
  OpenAllMailsKitRequest::default_instance_->InitAsDefaultInstance();
  OpenAllMailsKitResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_open_5fall_5fmails_5fkit_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_open_5fall_5fmails_5fkit_2eproto_once_);
void protobuf_AddDesc_open_5fall_5fmails_5fkit_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_open_5fall_5fmails_5fkit_2eproto_once_,
                 &protobuf_AddDesc_open_5fall_5fmails_5fkit_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_open_5fall_5fmails_5fkit_2eproto {
  StaticDescriptorInitializer_open_5fall_5fmails_5fkit_2eproto() {
    protobuf_AddDesc_open_5fall_5fmails_5fkit_2eproto();
  }
} static_descriptor_initializer_open_5fall_5fmails_5fkit_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int OpenAllMailsKitRequest::kMsgIDFieldNumber;
#endif  // !_MSC_VER

OpenAllMailsKitRequest::OpenAllMailsKitRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void OpenAllMailsKitRequest::InitAsDefaultInstance() {
}

OpenAllMailsKitRequest::OpenAllMailsKitRequest(const OpenAllMailsKitRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void OpenAllMailsKitRequest::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenAllMailsKitRequest::~OpenAllMailsKitRequest() {
  SharedDtor();
}

void OpenAllMailsKitRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void OpenAllMailsKitRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OpenAllMailsKitRequest& OpenAllMailsKitRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_open_5fall_5fmails_5fkit_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_open_5fall_5fmails_5fkit_2eproto();
#endif
  return *default_instance_;
}

OpenAllMailsKitRequest* OpenAllMailsKitRequest::default_instance_ = NULL;

OpenAllMailsKitRequest* OpenAllMailsKitRequest::New() const {
  return new OpenAllMailsKitRequest;
}

void OpenAllMailsKitRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool OpenAllMailsKitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sanguo.MsgID msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::sanguo::MsgID >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OpenAllMailsKitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .sanguo.MsgID msgID = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

}

int OpenAllMailsKitRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .sanguo.MsgID msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenAllMailsKitRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OpenAllMailsKitRequest*>(&from));
}

void OpenAllMailsKitRequest::MergeFrom(const OpenAllMailsKitRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
}

void OpenAllMailsKitRequest::CopyFrom(const OpenAllMailsKitRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenAllMailsKitRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void OpenAllMailsKitRequest::Swap(OpenAllMailsKitRequest* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string OpenAllMailsKitRequest::GetTypeName() const {
  return "sanguo.OpenAllMailsKitRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int OpenAllMailsKitResponse::kMsgIDFieldNumber;
const int OpenAllMailsKitResponse::kStatusFieldNumber;
const int OpenAllMailsKitResponse::kKitFieldNumber;
#endif  // !_MSC_VER

OpenAllMailsKitResponse::OpenAllMailsKitResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void OpenAllMailsKitResponse::InitAsDefaultInstance() {
}

OpenAllMailsKitResponse::OpenAllMailsKitResponse(const OpenAllMailsKitResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void OpenAllMailsKitResponse::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 1;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenAllMailsKitResponse::~OpenAllMailsKitResponse() {
  SharedDtor();
}

void OpenAllMailsKitResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void OpenAllMailsKitResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OpenAllMailsKitResponse& OpenAllMailsKitResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_open_5fall_5fmails_5fkit_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_open_5fall_5fmails_5fkit_2eproto();
#endif
  return *default_instance_;
}

OpenAllMailsKitResponse* OpenAllMailsKitResponse::default_instance_ = NULL;

OpenAllMailsKitResponse* OpenAllMailsKitResponse::New() const {
  return new OpenAllMailsKitResponse;
}

void OpenAllMailsKitResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 1;
    status_ = 0;
  }
  kit_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool OpenAllMailsKitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sanguo.MsgID msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::sanguo::MsgID >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .sanguo.StatusCode status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::StatusCode_IsValid(value)) {
            set_status(static_cast< ::sanguo::StatusCode >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_kit;
        break;
      }

      // repeated .sanguo.MsgGiftInfo kit = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_kit()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_kit;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OpenAllMailsKitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .sanguo.MsgID msgID = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // required .sanguo.StatusCode status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // repeated .sanguo.MsgGiftInfo kit = 3;
  for (int i = 0; i < this->kit_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->kit(i), output);
  }

}

int OpenAllMailsKitResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .sanguo.MsgID msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // required .sanguo.StatusCode status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  // repeated .sanguo.MsgGiftInfo kit = 3;
  total_size += 1 * this->kit_size();
  for (int i = 0; i < this->kit_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->kit(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenAllMailsKitResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OpenAllMailsKitResponse*>(&from));
}

void OpenAllMailsKitResponse::MergeFrom(const OpenAllMailsKitResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  kit_.MergeFrom(from.kit_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
}

void OpenAllMailsKitResponse::CopyFrom(const OpenAllMailsKitResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenAllMailsKitResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < kit_size(); i++) {
    if (!this->kit(i).IsInitialized()) return false;
  }
  return true;
}

void OpenAllMailsKitResponse::Swap(OpenAllMailsKitResponse* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(status_, other->status_);
    kit_.Swap(&other->kit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string OpenAllMailsKitResponse::GetTypeName() const {
  return "sanguo.OpenAllMailsKitResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sanguo

// @@protoc_insertion_point(global_scope)
