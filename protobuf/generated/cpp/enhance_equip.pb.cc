// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: enhance_equip.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "enhance_equip.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace sanguo {

void protobuf_ShutdownFile_enhance_5fequip_2eproto() {
  delete EnhanceEquipRequest::default_instance_;
  delete EnhanceEquipResponse::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_enhance_5fequip_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_enhance_5fequip_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::sanguo::protobuf_AddDesc_msg_5fid_2eproto();
  ::sanguo::protobuf_AddDesc_msg_5fstatus_5fcode_2eproto();
  ::sanguo::protobuf_AddDesc_role_5fbag_5fgoods_2eproto();
  ::sanguo::protobuf_AddDesc_role_5fcooldown_2eproto();
  EnhanceEquipRequest::default_instance_ = new EnhanceEquipRequest();
  EnhanceEquipResponse::default_instance_ = new EnhanceEquipResponse();
  EnhanceEquipRequest::default_instance_->InitAsDefaultInstance();
  EnhanceEquipResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_enhance_5fequip_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_enhance_5fequip_2eproto_once_);
void protobuf_AddDesc_enhance_5fequip_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_enhance_5fequip_2eproto_once_,
                 &protobuf_AddDesc_enhance_5fequip_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_enhance_5fequip_2eproto {
  StaticDescriptorInitializer_enhance_5fequip_2eproto() {
    protobuf_AddDesc_enhance_5fequip_2eproto();
  }
} static_descriptor_initializer_enhance_5fequip_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int EnhanceEquipRequest::kMsgIDFieldNumber;
const int EnhanceEquipRequest::kAutoIncrIDFieldNumber;
const int EnhanceEquipRequest::kSwallowedEquipIDFieldNumber;
const int EnhanceEquipRequest::kPlaceFieldNumber;
#endif  // !_MSC_VER

EnhanceEquipRequest::EnhanceEquipRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void EnhanceEquipRequest::InitAsDefaultInstance() {
}

EnhanceEquipRequest::EnhanceEquipRequest(const EnhanceEquipRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void EnhanceEquipRequest::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 1;
  autoincrid_ = GOOGLE_ULONGLONG(0);
  place_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnhanceEquipRequest::~EnhanceEquipRequest() {
  SharedDtor();
}

void EnhanceEquipRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EnhanceEquipRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EnhanceEquipRequest& EnhanceEquipRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_enhance_5fequip_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_enhance_5fequip_2eproto();
#endif
  return *default_instance_;
}

EnhanceEquipRequest* EnhanceEquipRequest::default_instance_ = NULL;

EnhanceEquipRequest* EnhanceEquipRequest::New() const {
  return new EnhanceEquipRequest;
}

void EnhanceEquipRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 1;
    autoincrid_ = GOOGLE_ULONGLONG(0);
    place_ = 0;
  }
  swallowedequipid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool EnhanceEquipRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sanguo.MsgID msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::sanguo::MsgID >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_autoIncrID;
        break;
      }

      // required uint64 autoIncrID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_autoIncrID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &autoincrid_)));
          set_has_autoincrid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_swallowedEquipID;
        break;
      }

      // repeated uint64 swallowedEquipID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_swallowedEquipID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_swallowedequipid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_swallowedequipid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_swallowedEquipID;
        if (input->ExpectTag(32)) goto parse_place;
        break;
      }

      // required sint32 place = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_place:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &place_)));
          set_has_place();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EnhanceEquipRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .sanguo.MsgID msgID = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // required uint64 autoIncrID = 2;
  if (has_autoincrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->autoincrid(), output);
  }

  // repeated uint64 swallowedEquipID = 3;
  for (int i = 0; i < this->swallowedequipid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->swallowedequipid(i), output);
  }

  // required sint32 place = 4;
  if (has_place()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->place(), output);
  }

}

int EnhanceEquipRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .sanguo.MsgID msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // required uint64 autoIncrID = 2;
    if (has_autoincrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->autoincrid());
    }

    // required sint32 place = 4;
    if (has_place()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->place());
    }

  }
  // repeated uint64 swallowedEquipID = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->swallowedequipid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->swallowedequipid(i));
    }
    total_size += 1 * this->swallowedequipid_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnhanceEquipRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EnhanceEquipRequest*>(&from));
}

void EnhanceEquipRequest::MergeFrom(const EnhanceEquipRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  swallowedequipid_.MergeFrom(from.swallowedequipid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_autoincrid()) {
      set_autoincrid(from.autoincrid());
    }
    if (from.has_place()) {
      set_place(from.place());
    }
  }
}

void EnhanceEquipRequest::CopyFrom(const EnhanceEquipRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnhanceEquipRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  return true;
}

void EnhanceEquipRequest::Swap(EnhanceEquipRequest* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(autoincrid_, other->autoincrid_);
    swallowedequipid_.Swap(&other->swallowedequipid_);
    std::swap(place_, other->place_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EnhanceEquipRequest::GetTypeName() const {
  return "sanguo.EnhanceEquipRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int EnhanceEquipResponse::kMsgIDFieldNumber;
const int EnhanceEquipResponse::kStatusFieldNumber;
const int EnhanceEquipResponse::kRatioFieldNumber;
const int EnhanceEquipResponse::kRoleBagGoodsFieldNumber;
const int EnhanceEquipResponse::kRoleCooldownFieldNumber;
#endif  // !_MSC_VER

EnhanceEquipResponse::EnhanceEquipResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void EnhanceEquipResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  rolecooldown_ = const_cast< ::sanguo::MsgRoleCooldown*>(
      ::sanguo::MsgRoleCooldown::internal_default_instance());
#else
  rolecooldown_ = const_cast< ::sanguo::MsgRoleCooldown*>(&::sanguo::MsgRoleCooldown::default_instance());
#endif
}

EnhanceEquipResponse::EnhanceEquipResponse(const EnhanceEquipResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void EnhanceEquipResponse::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 1;
  status_ = 0;
  ratio_ = 0;
  rolecooldown_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnhanceEquipResponse::~EnhanceEquipResponse() {
  SharedDtor();
}

void EnhanceEquipResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete rolecooldown_;
  }
}

void EnhanceEquipResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EnhanceEquipResponse& EnhanceEquipResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_enhance_5fequip_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_enhance_5fequip_2eproto();
#endif
  return *default_instance_;
}

EnhanceEquipResponse* EnhanceEquipResponse::default_instance_ = NULL;

EnhanceEquipResponse* EnhanceEquipResponse::New() const {
  return new EnhanceEquipResponse;
}

void EnhanceEquipResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 1;
    status_ = 0;
    ratio_ = 0;
    if (has_rolecooldown()) {
      if (rolecooldown_ != NULL) rolecooldown_->::sanguo::MsgRoleCooldown::Clear();
    }
  }
  rolebaggoods_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool EnhanceEquipResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sanguo.MsgID msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::sanguo::MsgID >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .sanguo.StatusCode status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::StatusCode_IsValid(value)) {
            set_status(static_cast< ::sanguo::StatusCode >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_ratio;
        break;
      }

      // required double ratio = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ratio_)));
          set_has_ratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_roleBagGoods;
        break;
      }

      // repeated .sanguo.MsgRoleBagGoods roleBagGoods = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleBagGoods:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rolebaggoods()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_roleBagGoods;
        if (input->ExpectTag(42)) goto parse_roleCooldown;
        break;
      }

      // optional .sanguo.MsgRoleCooldown roleCooldown = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleCooldown:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rolecooldown()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EnhanceEquipResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .sanguo.MsgID msgID = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // required .sanguo.StatusCode status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // required double ratio = 3;
  if (has_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->ratio(), output);
  }

  // repeated .sanguo.MsgRoleBagGoods roleBagGoods = 4;
  for (int i = 0; i < this->rolebaggoods_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->rolebaggoods(i), output);
  }

  // optional .sanguo.MsgRoleCooldown roleCooldown = 5;
  if (has_rolecooldown()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->rolecooldown(), output);
  }

}

int EnhanceEquipResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .sanguo.MsgID msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // required .sanguo.StatusCode status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // required double ratio = 3;
    if (has_ratio()) {
      total_size += 1 + 8;
    }

    // optional .sanguo.MsgRoleCooldown roleCooldown = 5;
    if (has_rolecooldown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rolecooldown());
    }

  }
  // repeated .sanguo.MsgRoleBagGoods roleBagGoods = 4;
  total_size += 1 * this->rolebaggoods_size();
  for (int i = 0; i < this->rolebaggoods_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rolebaggoods(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnhanceEquipResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EnhanceEquipResponse*>(&from));
}

void EnhanceEquipResponse::MergeFrom(const EnhanceEquipResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  rolebaggoods_.MergeFrom(from.rolebaggoods_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_ratio()) {
      set_ratio(from.ratio());
    }
    if (from.has_rolecooldown()) {
      mutable_rolecooldown()->::sanguo::MsgRoleCooldown::MergeFrom(from.rolecooldown());
    }
  }
}

void EnhanceEquipResponse::CopyFrom(const EnhanceEquipResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnhanceEquipResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  for (int i = 0; i < rolebaggoods_size(); i++) {
    if (!this->rolebaggoods(i).IsInitialized()) return false;
  }
  if (has_rolecooldown()) {
    if (!this->rolecooldown().IsInitialized()) return false;
  }
  return true;
}

void EnhanceEquipResponse::Swap(EnhanceEquipResponse* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(status_, other->status_);
    std::swap(ratio_, other->ratio_);
    rolebaggoods_.Swap(&other->rolebaggoods_);
    std::swap(rolecooldown_, other->rolecooldown_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EnhanceEquipResponse::GetTypeName() const {
  return "sanguo.EnhanceEquipResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sanguo

// @@protoc_insertion_point(global_scope)
