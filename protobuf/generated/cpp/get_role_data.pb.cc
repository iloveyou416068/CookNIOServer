// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: get_role_data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "get_role_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace sanguo {

void protobuf_ShutdownFile_get_5frole_5fdata_2eproto() {
  delete GetRoleDataRequest::default_instance_;
  delete GetRoleDataResponse::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_get_5frole_5fdata_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_get_5frole_5fdata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::sanguo::protobuf_AddDesc_msg_5fid_2eproto();
  ::sanguo::protobuf_AddDesc_msg_5fstatus_5fcode_2eproto();
  ::sanguo::protobuf_AddDesc_role_2eproto();
  ::sanguo::protobuf_AddDesc_role_5fproperties_2eproto();
  ::sanguo::protobuf_AddDesc_role_5fbag_5fgoods_2eproto();
  ::sanguo::protobuf_AddDesc_role_5fkungfu_5fproperties_2eproto();
  ::sanguo::protobuf_AddDesc_role_5fbuff_5finfos_2eproto();
  ::sanguo::protobuf_AddDesc_pet_2eproto();
  GetRoleDataRequest::default_instance_ = new GetRoleDataRequest();
  GetRoleDataResponse::default_instance_ = new GetRoleDataResponse();
  GetRoleDataRequest::default_instance_->InitAsDefaultInstance();
  GetRoleDataResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_get_5frole_5fdata_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_get_5frole_5fdata_2eproto_once_);
void protobuf_AddDesc_get_5frole_5fdata_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_get_5frole_5fdata_2eproto_once_,
                 &protobuf_AddDesc_get_5frole_5fdata_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_get_5frole_5fdata_2eproto {
  StaticDescriptorInitializer_get_5frole_5fdata_2eproto() {
    protobuf_AddDesc_get_5frole_5fdata_2eproto();
  }
} static_descriptor_initializer_get_5frole_5fdata_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int GetRoleDataRequest::kMsgIDFieldNumber;
const int GetRoleDataRequest::kRoleIDFieldNumber;
const int GetRoleDataRequest::kTypeFieldNumber;
#endif  // !_MSC_VER

GetRoleDataRequest::GetRoleDataRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GetRoleDataRequest::InitAsDefaultInstance() {
}

GetRoleDataRequest::GetRoleDataRequest(const GetRoleDataRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GetRoleDataRequest::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 1;
  roleid_ = GOOGLE_ULONGLONG(0);
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetRoleDataRequest::~GetRoleDataRequest() {
  SharedDtor();
}

void GetRoleDataRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetRoleDataRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetRoleDataRequest& GetRoleDataRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_get_5frole_5fdata_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_get_5frole_5fdata_2eproto();
#endif
  return *default_instance_;
}

GetRoleDataRequest* GetRoleDataRequest::default_instance_ = NULL;

GetRoleDataRequest* GetRoleDataRequest::New() const {
  return new GetRoleDataRequest;
}

void GetRoleDataRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 1;
    roleid_ = GOOGLE_ULONGLONG(0);
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GetRoleDataRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sanguo.MsgID msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::sanguo::MsgID >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roleID;
        break;
      }

      // required uint64 roleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required uint32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetRoleDataRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .sanguo.MsgID msgID = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // required uint64 roleID = 2;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->roleid(), output);
  }

  // required uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

}

int GetRoleDataRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .sanguo.MsgID msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // required uint64 roleID = 2;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

    // required uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRoleDataRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetRoleDataRequest*>(&from));
}

void GetRoleDataRequest::MergeFrom(const GetRoleDataRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
}

void GetRoleDataRequest::CopyFrom(const GetRoleDataRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRoleDataRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GetRoleDataRequest::Swap(GetRoleDataRequest* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(roleid_, other->roleid_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetRoleDataRequest::GetTypeName() const {
  return "sanguo.GetRoleDataRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int GetRoleDataResponse::kMsgIDFieldNumber;
const int GetRoleDataResponse::kStatusFieldNumber;
const int GetRoleDataResponse::kTypeFieldNumber;
const int GetRoleDataResponse::kRoleDataFieldNumber;
const int GetRoleDataResponse::kRolePropertiesFieldNumber;
const int GetRoleDataResponse::kRoleKungfuPropertiesFieldNumber;
const int GetRoleDataResponse::kRoleEquipGoodsFieldNumber;
const int GetRoleDataResponse::kRoleBuffInfosFieldNumber;
const int GetRoleDataResponse::kPetFieldNumber;
#endif  // !_MSC_VER

GetRoleDataResponse::GetRoleDataResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GetRoleDataResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  roledata_ = const_cast< ::sanguo::MsgRoleData*>(
      ::sanguo::MsgRoleData::internal_default_instance());
#else
  roledata_ = const_cast< ::sanguo::MsgRoleData*>(&::sanguo::MsgRoleData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  roleproperties_ = const_cast< ::sanguo::MsgRoleProperties*>(
      ::sanguo::MsgRoleProperties::internal_default_instance());
#else
  roleproperties_ = const_cast< ::sanguo::MsgRoleProperties*>(&::sanguo::MsgRoleProperties::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  rolekungfuproperties_ = const_cast< ::sanguo::MsgKungfuProperties*>(
      ::sanguo::MsgKungfuProperties::internal_default_instance());
#else
  rolekungfuproperties_ = const_cast< ::sanguo::MsgKungfuProperties*>(&::sanguo::MsgKungfuProperties::default_instance());
#endif
}

GetRoleDataResponse::GetRoleDataResponse(const GetRoleDataResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GetRoleDataResponse::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 1;
  status_ = 0;
  type_ = 0u;
  roledata_ = NULL;
  roleproperties_ = NULL;
  rolekungfuproperties_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetRoleDataResponse::~GetRoleDataResponse() {
  SharedDtor();
}

void GetRoleDataResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete roledata_;
    delete roleproperties_;
    delete rolekungfuproperties_;
  }
}

void GetRoleDataResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetRoleDataResponse& GetRoleDataResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_get_5frole_5fdata_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_get_5frole_5fdata_2eproto();
#endif
  return *default_instance_;
}

GetRoleDataResponse* GetRoleDataResponse::default_instance_ = NULL;

GetRoleDataResponse* GetRoleDataResponse::New() const {
  return new GetRoleDataResponse;
}

void GetRoleDataResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 1;
    status_ = 0;
    type_ = 0u;
    if (has_roledata()) {
      if (roledata_ != NULL) roledata_->::sanguo::MsgRoleData::Clear();
    }
    if (has_roleproperties()) {
      if (roleproperties_ != NULL) roleproperties_->::sanguo::MsgRoleProperties::Clear();
    }
    if (has_rolekungfuproperties()) {
      if (rolekungfuproperties_ != NULL) rolekungfuproperties_->::sanguo::MsgKungfuProperties::Clear();
    }
  }
  roleequipgoods_.Clear();
  rolebuffinfos_.Clear();
  pet_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GetRoleDataResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sanguo.MsgID msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::sanguo::MsgID >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .sanguo.StatusCode status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::StatusCode_IsValid(value)) {
            set_status(static_cast< ::sanguo::StatusCode >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required uint32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_roleData;
        break;
      }

      // required .sanguo.MsgRoleData roleData = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roledata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_roleProperties;
        break;
      }

      // required .sanguo.MsgRoleProperties roleProperties = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleProperties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roleproperties()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_roleKungfuProperties;
        break;
      }

      // required .sanguo.MsgKungfuProperties roleKungfuProperties = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleKungfuProperties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rolekungfuproperties()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_roleEquipGoods;
        break;
      }

      // repeated .sanguo.MsgRoleBagGoods roleEquipGoods = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleEquipGoods:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roleequipgoods()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_roleEquipGoods;
        if (input->ExpectTag(66)) goto parse_roleBuffInfos;
        break;
      }

      // repeated .sanguo.MsgRoleBuffInfos roleBuffInfos = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleBuffInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rolebuffinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_roleBuffInfos;
        if (input->ExpectTag(74)) goto parse_pet;
        break;
      }

      // repeated .sanguo.MsgPet pet = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_pet;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetRoleDataResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .sanguo.MsgID msgID = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // required .sanguo.StatusCode status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // required uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  // required .sanguo.MsgRoleData roleData = 4;
  if (has_roledata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->roledata(), output);
  }

  // required .sanguo.MsgRoleProperties roleProperties = 5;
  if (has_roleproperties()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->roleproperties(), output);
  }

  // required .sanguo.MsgKungfuProperties roleKungfuProperties = 6;
  if (has_rolekungfuproperties()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->rolekungfuproperties(), output);
  }

  // repeated .sanguo.MsgRoleBagGoods roleEquipGoods = 7;
  for (int i = 0; i < this->roleequipgoods_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->roleequipgoods(i), output);
  }

  // repeated .sanguo.MsgRoleBuffInfos roleBuffInfos = 8;
  for (int i = 0; i < this->rolebuffinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->rolebuffinfos(i), output);
  }

  // repeated .sanguo.MsgPet pet = 9;
  for (int i = 0; i < this->pet_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->pet(i), output);
  }

}

int GetRoleDataResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .sanguo.MsgID msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // required .sanguo.StatusCode status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // required uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required .sanguo.MsgRoleData roleData = 4;
    if (has_roledata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roledata());
    }

    // required .sanguo.MsgRoleProperties roleProperties = 5;
    if (has_roleproperties()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roleproperties());
    }

    // required .sanguo.MsgKungfuProperties roleKungfuProperties = 6;
    if (has_rolekungfuproperties()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rolekungfuproperties());
    }

  }
  // repeated .sanguo.MsgRoleBagGoods roleEquipGoods = 7;
  total_size += 1 * this->roleequipgoods_size();
  for (int i = 0; i < this->roleequipgoods_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roleequipgoods(i));
  }

  // repeated .sanguo.MsgRoleBuffInfos roleBuffInfos = 8;
  total_size += 1 * this->rolebuffinfos_size();
  for (int i = 0; i < this->rolebuffinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rolebuffinfos(i));
  }

  // repeated .sanguo.MsgPet pet = 9;
  total_size += 1 * this->pet_size();
  for (int i = 0; i < this->pet_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pet(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRoleDataResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetRoleDataResponse*>(&from));
}

void GetRoleDataResponse::MergeFrom(const GetRoleDataResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  roleequipgoods_.MergeFrom(from.roleequipgoods_);
  rolebuffinfos_.MergeFrom(from.rolebuffinfos_);
  pet_.MergeFrom(from.pet_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_roledata()) {
      mutable_roledata()->::sanguo::MsgRoleData::MergeFrom(from.roledata());
    }
    if (from.has_roleproperties()) {
      mutable_roleproperties()->::sanguo::MsgRoleProperties::MergeFrom(from.roleproperties());
    }
    if (from.has_rolekungfuproperties()) {
      mutable_rolekungfuproperties()->::sanguo::MsgKungfuProperties::MergeFrom(from.rolekungfuproperties());
    }
  }
}

void GetRoleDataResponse::CopyFrom(const GetRoleDataResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRoleDataResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  if (has_roledata()) {
    if (!this->roledata().IsInitialized()) return false;
  }
  if (has_roleproperties()) {
    if (!this->roleproperties().IsInitialized()) return false;
  }
  if (has_rolekungfuproperties()) {
    if (!this->rolekungfuproperties().IsInitialized()) return false;
  }
  for (int i = 0; i < roleequipgoods_size(); i++) {
    if (!this->roleequipgoods(i).IsInitialized()) return false;
  }
  for (int i = 0; i < rolebuffinfos_size(); i++) {
    if (!this->rolebuffinfos(i).IsInitialized()) return false;
  }
  for (int i = 0; i < pet_size(); i++) {
    if (!this->pet(i).IsInitialized()) return false;
  }
  return true;
}

void GetRoleDataResponse::Swap(GetRoleDataResponse* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(status_, other->status_);
    std::swap(type_, other->type_);
    std::swap(roledata_, other->roledata_);
    std::swap(roleproperties_, other->roleproperties_);
    std::swap(rolekungfuproperties_, other->rolekungfuproperties_);
    roleequipgoods_.Swap(&other->roleequipgoods_);
    rolebuffinfos_.Swap(&other->rolebuffinfos_);
    pet_.Swap(&other->pet_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetRoleDataResponse::GetTypeName() const {
  return "sanguo.GetRoleDataResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sanguo

// @@protoc_insertion_point(global_scope)
