// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: role_properties.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "role_properties.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace sanguo {

void protobuf_ShutdownFile_role_5fproperties_2eproto() {
  delete MsgRoleProperties::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_role_5fproperties_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_role_5fproperties_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  MsgRoleProperties::default_instance_ = new MsgRoleProperties();
  MsgRoleProperties::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_role_5fproperties_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_role_5fproperties_2eproto_once_);
void protobuf_AddDesc_role_5fproperties_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_role_5fproperties_2eproto_once_,
                 &protobuf_AddDesc_role_5fproperties_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_role_5fproperties_2eproto {
  StaticDescriptorInitializer_role_5fproperties_2eproto() {
    protobuf_AddDesc_role_5fproperties_2eproto();
  }
} static_descriptor_initializer_role_5fproperties_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int MsgRoleProperties::kHpFieldNumber;
const int MsgRoleProperties::kPhysicalAttackFieldNumber;
const int MsgRoleProperties::kPhysicalDefenseFieldNumber;
const int MsgRoleProperties::kSkillAttackFieldNumber;
const int MsgRoleProperties::kSkillDefenseFieldNumber;
const int MsgRoleProperties::kMagicAttackFieldNumber;
const int MsgRoleProperties::kMagicDefenseFieldNumber;
const int MsgRoleProperties::kCriticalFieldNumber;
const int MsgRoleProperties::kToughnessFieldNumber;
const int MsgRoleProperties::kDodgeFieldNumber;
const int MsgRoleProperties::kHitFieldNumber;
const int MsgRoleProperties::kBlockFieldNumber;
const int MsgRoleProperties::kSunderFieldNumber;
#endif  // !_MSC_VER

MsgRoleProperties::MsgRoleProperties()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void MsgRoleProperties::InitAsDefaultInstance() {
}

MsgRoleProperties::MsgRoleProperties(const MsgRoleProperties& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void MsgRoleProperties::SharedCtor() {
  _cached_size_ = 0;
  hp_ = 0u;
  physicalattack_ = 0u;
  physicaldefense_ = 0u;
  skillattack_ = 0u;
  skilldefense_ = 0u;
  magicattack_ = 0u;
  magicdefense_ = 0u;
  critical_ = 0u;
  toughness_ = 0u;
  dodge_ = 0u;
  hit_ = 0u;
  block_ = 0u;
  sunder_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgRoleProperties::~MsgRoleProperties() {
  SharedDtor();
}

void MsgRoleProperties::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgRoleProperties::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgRoleProperties& MsgRoleProperties::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_role_5fproperties_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_role_5fproperties_2eproto();
#endif
  return *default_instance_;
}

MsgRoleProperties* MsgRoleProperties::default_instance_ = NULL;

MsgRoleProperties* MsgRoleProperties::New() const {
  return new MsgRoleProperties;
}

void MsgRoleProperties::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hp_ = 0u;
    physicalattack_ = 0u;
    physicaldefense_ = 0u;
    skillattack_ = 0u;
    skilldefense_ = 0u;
    magicattack_ = 0u;
    magicdefense_ = 0u;
    critical_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    toughness_ = 0u;
    dodge_ = 0u;
    hit_ = 0u;
    block_ = 0u;
    sunder_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool MsgRoleProperties::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 hp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_physicalAttack;
        break;
      }

      // required uint32 physicalAttack = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_physicalAttack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &physicalattack_)));
          set_has_physicalattack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_physicalDefense;
        break;
      }

      // required uint32 physicalDefense = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_physicalDefense:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &physicaldefense_)));
          set_has_physicaldefense();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_skillAttack;
        break;
      }

      // required uint32 skillAttack = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillAttack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillattack_)));
          set_has_skillattack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_skillDefense;
        break;
      }

      // required uint32 skillDefense = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillDefense:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skilldefense_)));
          set_has_skilldefense();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_magicAttack;
        break;
      }

      // required uint32 magicAttack = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magicAttack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &magicattack_)));
          set_has_magicattack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_magicDefense;
        break;
      }

      // required uint32 magicDefense = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magicDefense:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &magicdefense_)));
          set_has_magicdefense();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_critical;
        break;
      }

      // required uint32 critical = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_critical:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &critical_)));
          set_has_critical();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_toughness;
        break;
      }

      // required uint32 toughness = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_toughness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &toughness_)));
          set_has_toughness();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_dodge;
        break;
      }

      // required uint32 dodge = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dodge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dodge_)));
          set_has_dodge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_hit;
        break;
      }

      // required uint32 hit = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hit_)));
          set_has_hit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_block;
        break;
      }

      // required uint32 block = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_block:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &block_)));
          set_has_block();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_sunder;
        break;
      }

      // required uint32 sunder = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sunder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sunder_)));
          set_has_sunder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgRoleProperties::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 hp = 1;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hp(), output);
  }

  // required uint32 physicalAttack = 2;
  if (has_physicalattack()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->physicalattack(), output);
  }

  // required uint32 physicalDefense = 3;
  if (has_physicaldefense()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->physicaldefense(), output);
  }

  // required uint32 skillAttack = 4;
  if (has_skillattack()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->skillattack(), output);
  }

  // required uint32 skillDefense = 5;
  if (has_skilldefense()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->skilldefense(), output);
  }

  // required uint32 magicAttack = 6;
  if (has_magicattack()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->magicattack(), output);
  }

  // required uint32 magicDefense = 7;
  if (has_magicdefense()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->magicdefense(), output);
  }

  // required uint32 critical = 8;
  if (has_critical()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->critical(), output);
  }

  // required uint32 toughness = 9;
  if (has_toughness()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->toughness(), output);
  }

  // required uint32 dodge = 10;
  if (has_dodge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->dodge(), output);
  }

  // required uint32 hit = 11;
  if (has_hit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->hit(), output);
  }

  // required uint32 block = 12;
  if (has_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->block(), output);
  }

  // required uint32 sunder = 13;
  if (has_sunder()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->sunder(), output);
  }

}

int MsgRoleProperties::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 hp = 1;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hp());
    }

    // required uint32 physicalAttack = 2;
    if (has_physicalattack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->physicalattack());
    }

    // required uint32 physicalDefense = 3;
    if (has_physicaldefense()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->physicaldefense());
    }

    // required uint32 skillAttack = 4;
    if (has_skillattack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillattack());
    }

    // required uint32 skillDefense = 5;
    if (has_skilldefense()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skilldefense());
    }

    // required uint32 magicAttack = 6;
    if (has_magicattack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->magicattack());
    }

    // required uint32 magicDefense = 7;
    if (has_magicdefense()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->magicdefense());
    }

    // required uint32 critical = 8;
    if (has_critical()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->critical());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 toughness = 9;
    if (has_toughness()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->toughness());
    }

    // required uint32 dodge = 10;
    if (has_dodge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dodge());
    }

    // required uint32 hit = 11;
    if (has_hit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hit());
    }

    // required uint32 block = 12;
    if (has_block()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->block());
    }

    // required uint32 sunder = 13;
    if (has_sunder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sunder());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgRoleProperties::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgRoleProperties*>(&from));
}

void MsgRoleProperties::MergeFrom(const MsgRoleProperties& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_physicalattack()) {
      set_physicalattack(from.physicalattack());
    }
    if (from.has_physicaldefense()) {
      set_physicaldefense(from.physicaldefense());
    }
    if (from.has_skillattack()) {
      set_skillattack(from.skillattack());
    }
    if (from.has_skilldefense()) {
      set_skilldefense(from.skilldefense());
    }
    if (from.has_magicattack()) {
      set_magicattack(from.magicattack());
    }
    if (from.has_magicdefense()) {
      set_magicdefense(from.magicdefense());
    }
    if (from.has_critical()) {
      set_critical(from.critical());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_toughness()) {
      set_toughness(from.toughness());
    }
    if (from.has_dodge()) {
      set_dodge(from.dodge());
    }
    if (from.has_hit()) {
      set_hit(from.hit());
    }
    if (from.has_block()) {
      set_block(from.block());
    }
    if (from.has_sunder()) {
      set_sunder(from.sunder());
    }
  }
}

void MsgRoleProperties::CopyFrom(const MsgRoleProperties& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRoleProperties::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001fff) != 0x00001fff) return false;

  return true;
}

void MsgRoleProperties::Swap(MsgRoleProperties* other) {
  if (other != this) {
    std::swap(hp_, other->hp_);
    std::swap(physicalattack_, other->physicalattack_);
    std::swap(physicaldefense_, other->physicaldefense_);
    std::swap(skillattack_, other->skillattack_);
    std::swap(skilldefense_, other->skilldefense_);
    std::swap(magicattack_, other->magicattack_);
    std::swap(magicdefense_, other->magicdefense_);
    std::swap(critical_, other->critical_);
    std::swap(toughness_, other->toughness_);
    std::swap(dodge_, other->dodge_);
    std::swap(hit_, other->hit_);
    std::swap(block_, other->block_);
    std::swap(sunder_, other->sunder_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MsgRoleProperties::GetTypeName() const {
  return "sanguo.MsgRoleProperties";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sanguo

// @@protoc_insertion_point(global_scope)
