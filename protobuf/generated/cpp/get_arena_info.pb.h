// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: get_arena_info.proto

#ifndef PROTOBUF_get_5farena_5finfo_2eproto__INCLUDED
#define PROTOBUF_get_5farena_5finfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "msg_id.pb.h"
#include "msg_status_code.pb.h"
#include "role.pb.h"
// @@protoc_insertion_point(includes)

namespace sanguo {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_get_5farena_5finfo_2eproto();
void protobuf_AssignDesc_get_5farena_5finfo_2eproto();
void protobuf_ShutdownFile_get_5farena_5finfo_2eproto();

class GetArenaInfoRequest;
class GetArenaInfoResponse;

// ===================================================================

class GetArenaInfoRequest : public ::google::protobuf::MessageLite {
 public:
  GetArenaInfoRequest();
  virtual ~GetArenaInfoRequest();

  GetArenaInfoRequest(const GetArenaInfoRequest& from);

  inline GetArenaInfoRequest& operator=(const GetArenaInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const GetArenaInfoRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const GetArenaInfoRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(GetArenaInfoRequest* other);

  // implements Message ----------------------------------------------

  GetArenaInfoRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GetArenaInfoRequest& from);
  void MergeFrom(const GetArenaInfoRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .sanguo.MsgID msgID = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline ::sanguo::MsgID msgid() const;
  inline void set_msgid(::sanguo::MsgID value);

  // @@protoc_insertion_point(class_scope:sanguo.GetArenaInfoRequest)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();

  int msgid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_get_5farena_5finfo_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_get_5farena_5finfo_2eproto();
  #endif
  friend void protobuf_AssignDesc_get_5farena_5finfo_2eproto();
  friend void protobuf_ShutdownFile_get_5farena_5finfo_2eproto();

  void InitAsDefaultInstance();
  static GetArenaInfoRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetArenaInfoResponse : public ::google::protobuf::MessageLite {
 public:
  GetArenaInfoResponse();
  virtual ~GetArenaInfoResponse();

  GetArenaInfoResponse(const GetArenaInfoResponse& from);

  inline GetArenaInfoResponse& operator=(const GetArenaInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const GetArenaInfoResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const GetArenaInfoResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(GetArenaInfoResponse* other);

  // implements Message ----------------------------------------------

  GetArenaInfoResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GetArenaInfoResponse& from);
  void MergeFrom(const GetArenaInfoResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .sanguo.MsgID msgID = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline ::sanguo::MsgID msgid() const;
  inline void set_msgid(::sanguo::MsgID value);

  // required .sanguo.StatusCode status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::sanguo::StatusCode status() const;
  inline void set_status(::sanguo::StatusCode value);

  // optional uint64 arenaRank = 3;
  inline bool has_arenarank() const;
  inline void clear_arenarank();
  static const int kArenaRankFieldNumber = 3;
  inline ::google::protobuf::uint64 arenarank() const;
  inline void set_arenarank(::google::protobuf::uint64 value);

  // optional uint32 freeBattleCount = 4;
  inline bool has_freebattlecount() const;
  inline void clear_freebattlecount();
  static const int kFreeBattleCountFieldNumber = 4;
  inline ::google::protobuf::uint32 freebattlecount() const;
  inline void set_freebattlecount(::google::protobuf::uint32 value);

  // optional uint32 battleCountCost = 5;
  inline bool has_battlecountcost() const;
  inline void clear_battlecountcost();
  static const int kBattleCountCostFieldNumber = 5;
  inline ::google::protobuf::uint32 battlecountcost() const;
  inline void set_battlecountcost(::google::protobuf::uint32 value);

  // optional string battleLog = 6;
  inline bool has_battlelog() const;
  inline void clear_battlelog();
  static const int kBattleLogFieldNumber = 6;
  inline const ::std::string& battlelog() const;
  inline void set_battlelog(const ::std::string& value);
  inline void set_battlelog(const char* value);
  inline void set_battlelog(const char* value, size_t size);
  inline ::std::string* mutable_battlelog();
  inline ::std::string* release_battlelog();
  inline void set_allocated_battlelog(::std::string* battlelog);

  // optional uint32 victoryCount = 7;
  inline bool has_victorycount() const;
  inline void clear_victorycount();
  static const int kVictoryCountFieldNumber = 7;
  inline ::google::protobuf::uint32 victorycount() const;
  inline void set_victorycount(::google::protobuf::uint32 value);

  // optional uint32 defeatCount = 8;
  inline bool has_defeatcount() const;
  inline void clear_defeatcount();
  static const int kDefeatCountFieldNumber = 8;
  inline ::google::protobuf::uint32 defeatcount() const;
  inline void set_defeatcount(::google::protobuf::uint32 value);

  // optional uint64 captureTimes = 9;
  inline bool has_capturetimes() const;
  inline void clear_capturetimes();
  static const int kCaptureTimesFieldNumber = 9;
  inline ::google::protobuf::uint64 capturetimes() const;
  inline void set_capturetimes(::google::protobuf::uint64 value);

  // optional uint32 buyPkCountToday = 10;
  inline bool has_buypkcounttoday() const;
  inline void clear_buypkcounttoday();
  static const int kBuyPkCountTodayFieldNumber = 10;
  inline ::google::protobuf::uint32 buypkcounttoday() const;
  inline void set_buypkcounttoday(::google::protobuf::uint32 value);

  // repeated .sanguo.MsgRoleData tops = 11;
  inline int tops_size() const;
  inline void clear_tops();
  static const int kTopsFieldNumber = 11;
  inline const ::sanguo::MsgRoleData& tops(int index) const;
  inline ::sanguo::MsgRoleData* mutable_tops(int index);
  inline ::sanguo::MsgRoleData* add_tops();
  inline const ::google::protobuf::RepeatedPtrField< ::sanguo::MsgRoleData >&
      tops() const;
  inline ::google::protobuf::RepeatedPtrField< ::sanguo::MsgRoleData >*
      mutable_tops();

  // @@protoc_insertion_point(class_scope:sanguo.GetArenaInfoResponse)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_arenarank();
  inline void clear_has_arenarank();
  inline void set_has_freebattlecount();
  inline void clear_has_freebattlecount();
  inline void set_has_battlecountcost();
  inline void clear_has_battlecountcost();
  inline void set_has_battlelog();
  inline void clear_has_battlelog();
  inline void set_has_victorycount();
  inline void clear_has_victorycount();
  inline void set_has_defeatcount();
  inline void clear_has_defeatcount();
  inline void set_has_capturetimes();
  inline void clear_has_capturetimes();
  inline void set_has_buypkcounttoday();
  inline void clear_has_buypkcounttoday();

  int msgid_;
  int status_;
  ::google::protobuf::uint64 arenarank_;
  ::google::protobuf::uint32 freebattlecount_;
  ::google::protobuf::uint32 battlecountcost_;
  ::std::string* battlelog_;
  ::google::protobuf::uint32 victorycount_;
  ::google::protobuf::uint32 defeatcount_;
  ::google::protobuf::uint64 capturetimes_;
  ::google::protobuf::RepeatedPtrField< ::sanguo::MsgRoleData > tops_;
  ::google::protobuf::uint32 buypkcounttoday_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_get_5farena_5finfo_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_get_5farena_5finfo_2eproto();
  #endif
  friend void protobuf_AssignDesc_get_5farena_5finfo_2eproto();
  friend void protobuf_ShutdownFile_get_5farena_5finfo_2eproto();

  void InitAsDefaultInstance();
  static GetArenaInfoResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// GetArenaInfoRequest

// required .sanguo.MsgID msgID = 1;
inline bool GetArenaInfoRequest::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetArenaInfoRequest::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetArenaInfoRequest::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetArenaInfoRequest::clear_msgid() {
  msgid_ = 1;
  clear_has_msgid();
}
inline ::sanguo::MsgID GetArenaInfoRequest::msgid() const {
  return static_cast< ::sanguo::MsgID >(msgid_);
}
inline void GetArenaInfoRequest::set_msgid(::sanguo::MsgID value) {
  assert(::sanguo::MsgID_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// -------------------------------------------------------------------

// GetArenaInfoResponse

// required .sanguo.MsgID msgID = 1;
inline bool GetArenaInfoResponse::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetArenaInfoResponse::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetArenaInfoResponse::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetArenaInfoResponse::clear_msgid() {
  msgid_ = 1;
  clear_has_msgid();
}
inline ::sanguo::MsgID GetArenaInfoResponse::msgid() const {
  return static_cast< ::sanguo::MsgID >(msgid_);
}
inline void GetArenaInfoResponse::set_msgid(::sanguo::MsgID value) {
  assert(::sanguo::MsgID_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// required .sanguo.StatusCode status = 2;
inline bool GetArenaInfoResponse::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetArenaInfoResponse::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetArenaInfoResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetArenaInfoResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::sanguo::StatusCode GetArenaInfoResponse::status() const {
  return static_cast< ::sanguo::StatusCode >(status_);
}
inline void GetArenaInfoResponse::set_status(::sanguo::StatusCode value) {
  assert(::sanguo::StatusCode_IsValid(value));
  set_has_status();
  status_ = value;
}

// optional uint64 arenaRank = 3;
inline bool GetArenaInfoResponse::has_arenarank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetArenaInfoResponse::set_has_arenarank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetArenaInfoResponse::clear_has_arenarank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetArenaInfoResponse::clear_arenarank() {
  arenarank_ = GOOGLE_ULONGLONG(0);
  clear_has_arenarank();
}
inline ::google::protobuf::uint64 GetArenaInfoResponse::arenarank() const {
  return arenarank_;
}
inline void GetArenaInfoResponse::set_arenarank(::google::protobuf::uint64 value) {
  set_has_arenarank();
  arenarank_ = value;
}

// optional uint32 freeBattleCount = 4;
inline bool GetArenaInfoResponse::has_freebattlecount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetArenaInfoResponse::set_has_freebattlecount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetArenaInfoResponse::clear_has_freebattlecount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetArenaInfoResponse::clear_freebattlecount() {
  freebattlecount_ = 0u;
  clear_has_freebattlecount();
}
inline ::google::protobuf::uint32 GetArenaInfoResponse::freebattlecount() const {
  return freebattlecount_;
}
inline void GetArenaInfoResponse::set_freebattlecount(::google::protobuf::uint32 value) {
  set_has_freebattlecount();
  freebattlecount_ = value;
}

// optional uint32 battleCountCost = 5;
inline bool GetArenaInfoResponse::has_battlecountcost() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GetArenaInfoResponse::set_has_battlecountcost() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GetArenaInfoResponse::clear_has_battlecountcost() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GetArenaInfoResponse::clear_battlecountcost() {
  battlecountcost_ = 0u;
  clear_has_battlecountcost();
}
inline ::google::protobuf::uint32 GetArenaInfoResponse::battlecountcost() const {
  return battlecountcost_;
}
inline void GetArenaInfoResponse::set_battlecountcost(::google::protobuf::uint32 value) {
  set_has_battlecountcost();
  battlecountcost_ = value;
}

// optional string battleLog = 6;
inline bool GetArenaInfoResponse::has_battlelog() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GetArenaInfoResponse::set_has_battlelog() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GetArenaInfoResponse::clear_has_battlelog() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GetArenaInfoResponse::clear_battlelog() {
  if (battlelog_ != &::google::protobuf::internal::kEmptyString) {
    battlelog_->clear();
  }
  clear_has_battlelog();
}
inline const ::std::string& GetArenaInfoResponse::battlelog() const {
  return *battlelog_;
}
inline void GetArenaInfoResponse::set_battlelog(const ::std::string& value) {
  set_has_battlelog();
  if (battlelog_ == &::google::protobuf::internal::kEmptyString) {
    battlelog_ = new ::std::string;
  }
  battlelog_->assign(value);
}
inline void GetArenaInfoResponse::set_battlelog(const char* value) {
  set_has_battlelog();
  if (battlelog_ == &::google::protobuf::internal::kEmptyString) {
    battlelog_ = new ::std::string;
  }
  battlelog_->assign(value);
}
inline void GetArenaInfoResponse::set_battlelog(const char* value, size_t size) {
  set_has_battlelog();
  if (battlelog_ == &::google::protobuf::internal::kEmptyString) {
    battlelog_ = new ::std::string;
  }
  battlelog_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetArenaInfoResponse::mutable_battlelog() {
  set_has_battlelog();
  if (battlelog_ == &::google::protobuf::internal::kEmptyString) {
    battlelog_ = new ::std::string;
  }
  return battlelog_;
}
inline ::std::string* GetArenaInfoResponse::release_battlelog() {
  clear_has_battlelog();
  if (battlelog_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = battlelog_;
    battlelog_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetArenaInfoResponse::set_allocated_battlelog(::std::string* battlelog) {
  if (battlelog_ != &::google::protobuf::internal::kEmptyString) {
    delete battlelog_;
  }
  if (battlelog) {
    set_has_battlelog();
    battlelog_ = battlelog;
  } else {
    clear_has_battlelog();
    battlelog_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 victoryCount = 7;
inline bool GetArenaInfoResponse::has_victorycount() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GetArenaInfoResponse::set_has_victorycount() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GetArenaInfoResponse::clear_has_victorycount() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GetArenaInfoResponse::clear_victorycount() {
  victorycount_ = 0u;
  clear_has_victorycount();
}
inline ::google::protobuf::uint32 GetArenaInfoResponse::victorycount() const {
  return victorycount_;
}
inline void GetArenaInfoResponse::set_victorycount(::google::protobuf::uint32 value) {
  set_has_victorycount();
  victorycount_ = value;
}

// optional uint32 defeatCount = 8;
inline bool GetArenaInfoResponse::has_defeatcount() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GetArenaInfoResponse::set_has_defeatcount() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GetArenaInfoResponse::clear_has_defeatcount() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GetArenaInfoResponse::clear_defeatcount() {
  defeatcount_ = 0u;
  clear_has_defeatcount();
}
inline ::google::protobuf::uint32 GetArenaInfoResponse::defeatcount() const {
  return defeatcount_;
}
inline void GetArenaInfoResponse::set_defeatcount(::google::protobuf::uint32 value) {
  set_has_defeatcount();
  defeatcount_ = value;
}

// optional uint64 captureTimes = 9;
inline bool GetArenaInfoResponse::has_capturetimes() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GetArenaInfoResponse::set_has_capturetimes() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GetArenaInfoResponse::clear_has_capturetimes() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GetArenaInfoResponse::clear_capturetimes() {
  capturetimes_ = GOOGLE_ULONGLONG(0);
  clear_has_capturetimes();
}
inline ::google::protobuf::uint64 GetArenaInfoResponse::capturetimes() const {
  return capturetimes_;
}
inline void GetArenaInfoResponse::set_capturetimes(::google::protobuf::uint64 value) {
  set_has_capturetimes();
  capturetimes_ = value;
}

// optional uint32 buyPkCountToday = 10;
inline bool GetArenaInfoResponse::has_buypkcounttoday() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GetArenaInfoResponse::set_has_buypkcounttoday() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GetArenaInfoResponse::clear_has_buypkcounttoday() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GetArenaInfoResponse::clear_buypkcounttoday() {
  buypkcounttoday_ = 0u;
  clear_has_buypkcounttoday();
}
inline ::google::protobuf::uint32 GetArenaInfoResponse::buypkcounttoday() const {
  return buypkcounttoday_;
}
inline void GetArenaInfoResponse::set_buypkcounttoday(::google::protobuf::uint32 value) {
  set_has_buypkcounttoday();
  buypkcounttoday_ = value;
}

// repeated .sanguo.MsgRoleData tops = 11;
inline int GetArenaInfoResponse::tops_size() const {
  return tops_.size();
}
inline void GetArenaInfoResponse::clear_tops() {
  tops_.Clear();
}
inline const ::sanguo::MsgRoleData& GetArenaInfoResponse::tops(int index) const {
  return tops_.Get(index);
}
inline ::sanguo::MsgRoleData* GetArenaInfoResponse::mutable_tops(int index) {
  return tops_.Mutable(index);
}
inline ::sanguo::MsgRoleData* GetArenaInfoResponse::add_tops() {
  return tops_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sanguo::MsgRoleData >&
GetArenaInfoResponse::tops() const {
  return tops_;
}
inline ::google::protobuf::RepeatedPtrField< ::sanguo::MsgRoleData >*
GetArenaInfoResponse::mutable_tops() {
  return &tops_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sanguo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_get_5farena_5finfo_2eproto__INCLUDED
