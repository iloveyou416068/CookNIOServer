// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: create_role.proto

#ifndef PROTOBUF_create_5frole_2eproto__INCLUDED
#define PROTOBUF_create_5frole_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "msg_id.pb.h"
#include "msg_status_code.pb.h"
// @@protoc_insertion_point(includes)

namespace sanguo {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_create_5frole_2eproto();
void protobuf_AssignDesc_create_5frole_2eproto();
void protobuf_ShutdownFile_create_5frole_2eproto();

class CreateRoleRequest;
class CreateRoleResponse;

// ===================================================================

class CreateRoleRequest : public ::google::protobuf::MessageLite {
 public:
  CreateRoleRequest();
  virtual ~CreateRoleRequest();

  CreateRoleRequest(const CreateRoleRequest& from);

  inline CreateRoleRequest& operator=(const CreateRoleRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const CreateRoleRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CreateRoleRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CreateRoleRequest* other);

  // implements Message ----------------------------------------------

  CreateRoleRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CreateRoleRequest& from);
  void MergeFrom(const CreateRoleRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .sanguo.MsgID msgID = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline ::sanguo::MsgID msgid() const;
  inline void set_msgid(::sanguo::MsgID value);

  // required uint64 userID = 2;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIDFieldNumber = 2;
  inline ::google::protobuf::uint64 userid() const;
  inline void set_userid(::google::protobuf::uint64 value);

  // required string roleName = 3;
  inline bool has_rolename() const;
  inline void clear_rolename();
  static const int kRoleNameFieldNumber = 3;
  inline const ::std::string& rolename() const;
  inline void set_rolename(const ::std::string& value);
  inline void set_rolename(const char* value);
  inline void set_rolename(const char* value, size_t size);
  inline ::std::string* mutable_rolename();
  inline ::std::string* release_rolename();
  inline void set_allocated_rolename(::std::string* rolename);

  // required uint32 roleProfession = 4;
  inline bool has_roleprofession() const;
  inline void clear_roleprofession();
  static const int kRoleProfessionFieldNumber = 4;
  inline ::google::protobuf::uint32 roleprofession() const;
  inline void set_roleprofession(::google::protobuf::uint32 value);

  // required uint32 osId = 5;
  inline bool has_osid() const;
  inline void clear_osid();
  static const int kOsIdFieldNumber = 5;
  inline ::google::protobuf::uint32 osid() const;
  inline void set_osid(::google::protobuf::uint32 value);

  // required uint32 serverID = 6;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIDFieldNumber = 6;
  inline ::google::protobuf::uint32 serverid() const;
  inline void set_serverid(::google::protobuf::uint32 value);

  // required uint32 channelId = 7;
  inline bool has_channelid() const;
  inline void clear_channelid();
  static const int kChannelIdFieldNumber = 7;
  inline ::google::protobuf::uint32 channelid() const;
  inline void set_channelid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:sanguo.CreateRoleRequest)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_rolename();
  inline void clear_has_rolename();
  inline void set_has_roleprofession();
  inline void clear_has_roleprofession();
  inline void set_has_osid();
  inline void clear_has_osid();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_channelid();
  inline void clear_has_channelid();

  ::google::protobuf::uint64 userid_;
  int msgid_;
  ::google::protobuf::uint32 roleprofession_;
  ::std::string* rolename_;
  ::google::protobuf::uint32 osid_;
  ::google::protobuf::uint32 serverid_;
  ::google::protobuf::uint32 channelid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_create_5frole_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_create_5frole_2eproto();
  #endif
  friend void protobuf_AssignDesc_create_5frole_2eproto();
  friend void protobuf_ShutdownFile_create_5frole_2eproto();

  void InitAsDefaultInstance();
  static CreateRoleRequest* default_instance_;
};
// -------------------------------------------------------------------

class CreateRoleResponse : public ::google::protobuf::MessageLite {
 public:
  CreateRoleResponse();
  virtual ~CreateRoleResponse();

  CreateRoleResponse(const CreateRoleResponse& from);

  inline CreateRoleResponse& operator=(const CreateRoleResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const CreateRoleResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CreateRoleResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CreateRoleResponse* other);

  // implements Message ----------------------------------------------

  CreateRoleResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CreateRoleResponse& from);
  void MergeFrom(const CreateRoleResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .sanguo.MsgID msgID = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline ::sanguo::MsgID msgid() const;
  inline void set_msgid(::sanguo::MsgID value);

  // required .sanguo.StatusCode status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::sanguo::StatusCode status() const;
  inline void set_status(::sanguo::StatusCode value);

  // optional uint64 roleID = 3;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIDFieldNumber = 3;
  inline ::google::protobuf::uint64 roleid() const;
  inline void set_roleid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:sanguo.CreateRoleResponse)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_roleid();
  inline void clear_has_roleid();

  int msgid_;
  int status_;
  ::google::protobuf::uint64 roleid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_create_5frole_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_create_5frole_2eproto();
  #endif
  friend void protobuf_AssignDesc_create_5frole_2eproto();
  friend void protobuf_ShutdownFile_create_5frole_2eproto();

  void InitAsDefaultInstance();
  static CreateRoleResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// CreateRoleRequest

// required .sanguo.MsgID msgID = 1;
inline bool CreateRoleRequest::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateRoleRequest::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateRoleRequest::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateRoleRequest::clear_msgid() {
  msgid_ = 1;
  clear_has_msgid();
}
inline ::sanguo::MsgID CreateRoleRequest::msgid() const {
  return static_cast< ::sanguo::MsgID >(msgid_);
}
inline void CreateRoleRequest::set_msgid(::sanguo::MsgID value) {
  assert(::sanguo::MsgID_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// required uint64 userID = 2;
inline bool CreateRoleRequest::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateRoleRequest::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateRoleRequest::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreateRoleRequest::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::uint64 CreateRoleRequest::userid() const {
  return userid_;
}
inline void CreateRoleRequest::set_userid(::google::protobuf::uint64 value) {
  set_has_userid();
  userid_ = value;
}

// required string roleName = 3;
inline bool CreateRoleRequest::has_rolename() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CreateRoleRequest::set_has_rolename() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CreateRoleRequest::clear_has_rolename() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CreateRoleRequest::clear_rolename() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    rolename_->clear();
  }
  clear_has_rolename();
}
inline const ::std::string& CreateRoleRequest::rolename() const {
  return *rolename_;
}
inline void CreateRoleRequest::set_rolename(const ::std::string& value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void CreateRoleRequest::set_rolename(const char* value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void CreateRoleRequest::set_rolename(const char* value, size_t size) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CreateRoleRequest::mutable_rolename() {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  return rolename_;
}
inline ::std::string* CreateRoleRequest::release_rolename() {
  clear_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rolename_;
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CreateRoleRequest::set_allocated_rolename(::std::string* rolename) {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (rolename) {
    set_has_rolename();
    rolename_ = rolename;
  } else {
    clear_has_rolename();
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 roleProfession = 4;
inline bool CreateRoleRequest::has_roleprofession() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CreateRoleRequest::set_has_roleprofession() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CreateRoleRequest::clear_has_roleprofession() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CreateRoleRequest::clear_roleprofession() {
  roleprofession_ = 0u;
  clear_has_roleprofession();
}
inline ::google::protobuf::uint32 CreateRoleRequest::roleprofession() const {
  return roleprofession_;
}
inline void CreateRoleRequest::set_roleprofession(::google::protobuf::uint32 value) {
  set_has_roleprofession();
  roleprofession_ = value;
}

// required uint32 osId = 5;
inline bool CreateRoleRequest::has_osid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CreateRoleRequest::set_has_osid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CreateRoleRequest::clear_has_osid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CreateRoleRequest::clear_osid() {
  osid_ = 0u;
  clear_has_osid();
}
inline ::google::protobuf::uint32 CreateRoleRequest::osid() const {
  return osid_;
}
inline void CreateRoleRequest::set_osid(::google::protobuf::uint32 value) {
  set_has_osid();
  osid_ = value;
}

// required uint32 serverID = 6;
inline bool CreateRoleRequest::has_serverid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CreateRoleRequest::set_has_serverid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CreateRoleRequest::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CreateRoleRequest::clear_serverid() {
  serverid_ = 0u;
  clear_has_serverid();
}
inline ::google::protobuf::uint32 CreateRoleRequest::serverid() const {
  return serverid_;
}
inline void CreateRoleRequest::set_serverid(::google::protobuf::uint32 value) {
  set_has_serverid();
  serverid_ = value;
}

// required uint32 channelId = 7;
inline bool CreateRoleRequest::has_channelid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CreateRoleRequest::set_has_channelid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CreateRoleRequest::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CreateRoleRequest::clear_channelid() {
  channelid_ = 0u;
  clear_has_channelid();
}
inline ::google::protobuf::uint32 CreateRoleRequest::channelid() const {
  return channelid_;
}
inline void CreateRoleRequest::set_channelid(::google::protobuf::uint32 value) {
  set_has_channelid();
  channelid_ = value;
}

// -------------------------------------------------------------------

// CreateRoleResponse

// required .sanguo.MsgID msgID = 1;
inline bool CreateRoleResponse::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateRoleResponse::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateRoleResponse::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateRoleResponse::clear_msgid() {
  msgid_ = 1;
  clear_has_msgid();
}
inline ::sanguo::MsgID CreateRoleResponse::msgid() const {
  return static_cast< ::sanguo::MsgID >(msgid_);
}
inline void CreateRoleResponse::set_msgid(::sanguo::MsgID value) {
  assert(::sanguo::MsgID_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// required .sanguo.StatusCode status = 2;
inline bool CreateRoleResponse::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateRoleResponse::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateRoleResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreateRoleResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::sanguo::StatusCode CreateRoleResponse::status() const {
  return static_cast< ::sanguo::StatusCode >(status_);
}
inline void CreateRoleResponse::set_status(::sanguo::StatusCode value) {
  assert(::sanguo::StatusCode_IsValid(value));
  set_has_status();
  status_ = value;
}

// optional uint64 roleID = 3;
inline bool CreateRoleResponse::has_roleid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CreateRoleResponse::set_has_roleid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CreateRoleResponse::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CreateRoleResponse::clear_roleid() {
  roleid_ = GOOGLE_ULONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::uint64 CreateRoleResponse::roleid() const {
  return roleid_;
}
inline void CreateRoleResponse::set_roleid(::google::protobuf::uint64 value) {
  set_has_roleid();
  roleid_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sanguo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_create_5frole_2eproto__INCLUDED
