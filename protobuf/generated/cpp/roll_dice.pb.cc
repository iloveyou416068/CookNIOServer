// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: roll_dice.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "roll_dice.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace sanguo {

void protobuf_ShutdownFile_roll_5fdice_2eproto() {
  delete RollDiceRequest::default_instance_;
  delete RollDiceResponse::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_roll_5fdice_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_roll_5fdice_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::sanguo::protobuf_AddDesc_msg_5fid_2eproto();
  ::sanguo::protobuf_AddDesc_msg_5fstatus_5fcode_2eproto();
  ::sanguo::protobuf_AddDesc_role_5fgem_5fbag_5fgoods_2eproto();
  ::sanguo::protobuf_AddDesc_role_5fbag_5fgoods_2eproto();
  ::sanguo::protobuf_AddDesc_gift_5finfo_2eproto();
  RollDiceRequest::default_instance_ = new RollDiceRequest();
  RollDiceResponse::default_instance_ = new RollDiceResponse();
  RollDiceRequest::default_instance_->InitAsDefaultInstance();
  RollDiceResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_roll_5fdice_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_roll_5fdice_2eproto_once_);
void protobuf_AddDesc_roll_5fdice_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_roll_5fdice_2eproto_once_,
                 &protobuf_AddDesc_roll_5fdice_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_roll_5fdice_2eproto {
  StaticDescriptorInitializer_roll_5fdice_2eproto() {
    protobuf_AddDesc_roll_5fdice_2eproto();
  }
} static_descriptor_initializer_roll_5fdice_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int RollDiceRequest::kMsgIDFieldNumber;
#endif  // !_MSC_VER

RollDiceRequest::RollDiceRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RollDiceRequest::InitAsDefaultInstance() {
}

RollDiceRequest::RollDiceRequest(const RollDiceRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RollDiceRequest::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RollDiceRequest::~RollDiceRequest() {
  SharedDtor();
}

void RollDiceRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RollDiceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RollDiceRequest& RollDiceRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_roll_5fdice_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_roll_5fdice_2eproto();
#endif
  return *default_instance_;
}

RollDiceRequest* RollDiceRequest::default_instance_ = NULL;

RollDiceRequest* RollDiceRequest::New() const {
  return new RollDiceRequest;
}

void RollDiceRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RollDiceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sanguo.MsgID msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::sanguo::MsgID >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RollDiceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .sanguo.MsgID msgID = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

}

int RollDiceRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .sanguo.MsgID msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RollDiceRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RollDiceRequest*>(&from));
}

void RollDiceRequest::MergeFrom(const RollDiceRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
}

void RollDiceRequest::CopyFrom(const RollDiceRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RollDiceRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RollDiceRequest::Swap(RollDiceRequest* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RollDiceRequest::GetTypeName() const {
  return "sanguo.RollDiceRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int RollDiceResponse::kMsgIDFieldNumber;
const int RollDiceResponse::kStatusFieldNumber;
const int RollDiceResponse::kLeftRollCountFieldNumber;
const int RollDiceResponse::kDicePointFieldNumber;
const int RollDiceResponse::kRewardMultipleFieldNumber;
const int RollDiceResponse::kVipLeftRollCountFieldNumber;
const int RollDiceResponse::kGiftInfoFieldNumber;
#endif  // !_MSC_VER

RollDiceResponse::RollDiceResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RollDiceResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  giftinfo_ = const_cast< ::sanguo::MsgGiftInfo*>(
      ::sanguo::MsgGiftInfo::internal_default_instance());
#else
  giftinfo_ = const_cast< ::sanguo::MsgGiftInfo*>(&::sanguo::MsgGiftInfo::default_instance());
#endif
}

RollDiceResponse::RollDiceResponse(const RollDiceResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RollDiceResponse::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 1;
  status_ = 0;
  leftrollcount_ = 0u;
  dicepoint_ = 0u;
  rewardmultiple_ = 0u;
  vipleftrollcount_ = 0u;
  giftinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RollDiceResponse::~RollDiceResponse() {
  SharedDtor();
}

void RollDiceResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete giftinfo_;
  }
}

void RollDiceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RollDiceResponse& RollDiceResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_roll_5fdice_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_roll_5fdice_2eproto();
#endif
  return *default_instance_;
}

RollDiceResponse* RollDiceResponse::default_instance_ = NULL;

RollDiceResponse* RollDiceResponse::New() const {
  return new RollDiceResponse;
}

void RollDiceResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 1;
    status_ = 0;
    leftrollcount_ = 0u;
    dicepoint_ = 0u;
    rewardmultiple_ = 0u;
    vipleftrollcount_ = 0u;
    if (has_giftinfo()) {
      if (giftinfo_ != NULL) giftinfo_->::sanguo::MsgGiftInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RollDiceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sanguo.MsgID msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::sanguo::MsgID >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .sanguo.StatusCode status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::StatusCode_IsValid(value)) {
            set_status(static_cast< ::sanguo::StatusCode >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_leftRollCount;
        break;
      }

      // optional uint32 leftRollCount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leftRollCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leftrollcount_)));
          set_has_leftrollcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dicePoint;
        break;
      }

      // optional uint32 dicePoint = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dicePoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dicepoint_)));
          set_has_dicepoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_rewardMultiple;
        break;
      }

      // optional uint32 rewardMultiple = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewardMultiple:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rewardmultiple_)));
          set_has_rewardmultiple();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_vipLeftRollCount;
        break;
      }

      // optional uint32 vipLeftRollCount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipLeftRollCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vipleftrollcount_)));
          set_has_vipleftrollcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_giftInfo;
        break;
      }

      // optional .sanguo.MsgGiftInfo giftInfo = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_giftInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_giftinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RollDiceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .sanguo.MsgID msgID = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // required .sanguo.StatusCode status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // optional uint32 leftRollCount = 3;
  if (has_leftrollcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->leftrollcount(), output);
  }

  // optional uint32 dicePoint = 4;
  if (has_dicepoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dicepoint(), output);
  }

  // optional uint32 rewardMultiple = 5;
  if (has_rewardmultiple()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->rewardmultiple(), output);
  }

  // optional uint32 vipLeftRollCount = 6;
  if (has_vipleftrollcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->vipleftrollcount(), output);
  }

  // optional .sanguo.MsgGiftInfo giftInfo = 7;
  if (has_giftinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->giftinfo(), output);
  }

}

int RollDiceResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .sanguo.MsgID msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // required .sanguo.StatusCode status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional uint32 leftRollCount = 3;
    if (has_leftrollcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leftrollcount());
    }

    // optional uint32 dicePoint = 4;
    if (has_dicepoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dicepoint());
    }

    // optional uint32 rewardMultiple = 5;
    if (has_rewardmultiple()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rewardmultiple());
    }

    // optional uint32 vipLeftRollCount = 6;
    if (has_vipleftrollcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vipleftrollcount());
    }

    // optional .sanguo.MsgGiftInfo giftInfo = 7;
    if (has_giftinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->giftinfo());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RollDiceResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RollDiceResponse*>(&from));
}

void RollDiceResponse::MergeFrom(const RollDiceResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_leftrollcount()) {
      set_leftrollcount(from.leftrollcount());
    }
    if (from.has_dicepoint()) {
      set_dicepoint(from.dicepoint());
    }
    if (from.has_rewardmultiple()) {
      set_rewardmultiple(from.rewardmultiple());
    }
    if (from.has_vipleftrollcount()) {
      set_vipleftrollcount(from.vipleftrollcount());
    }
    if (from.has_giftinfo()) {
      mutable_giftinfo()->::sanguo::MsgGiftInfo::MergeFrom(from.giftinfo());
    }
  }
}

void RollDiceResponse::CopyFrom(const RollDiceResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RollDiceResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_giftinfo()) {
    if (!this->giftinfo().IsInitialized()) return false;
  }
  return true;
}

void RollDiceResponse::Swap(RollDiceResponse* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(status_, other->status_);
    std::swap(leftrollcount_, other->leftrollcount_);
    std::swap(dicepoint_, other->dicepoint_);
    std::swap(rewardmultiple_, other->rewardmultiple_);
    std::swap(vipleftrollcount_, other->vipleftrollcount_);
    std::swap(giftinfo_, other->giftinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RollDiceResponse::GetTypeName() const {
  return "sanguo.RollDiceResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sanguo

// @@protoc_insertion_point(global_scope)
