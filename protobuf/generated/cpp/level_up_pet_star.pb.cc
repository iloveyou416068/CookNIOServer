// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: level_up_pet_star.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "level_up_pet_star.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace sanguo {

void protobuf_ShutdownFile_level_5fup_5fpet_5fstar_2eproto() {
  delete LevelUpPetStarRequest::default_instance_;
  delete LevelUpPetStarResponse::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_level_5fup_5fpet_5fstar_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_level_5fup_5fpet_5fstar_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::sanguo::protobuf_AddDesc_msg_5fid_2eproto();
  ::sanguo::protobuf_AddDesc_msg_5fstatus_5fcode_2eproto();
  ::sanguo::protobuf_AddDesc_pet_2eproto();
  ::sanguo::protobuf_AddDesc_pet_5fcooldown_2eproto();
  LevelUpPetStarRequest::default_instance_ = new LevelUpPetStarRequest();
  LevelUpPetStarResponse::default_instance_ = new LevelUpPetStarResponse();
  LevelUpPetStarRequest::default_instance_->InitAsDefaultInstance();
  LevelUpPetStarResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_level_5fup_5fpet_5fstar_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_level_5fup_5fpet_5fstar_2eproto_once_);
void protobuf_AddDesc_level_5fup_5fpet_5fstar_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_level_5fup_5fpet_5fstar_2eproto_once_,
                 &protobuf_AddDesc_level_5fup_5fpet_5fstar_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_level_5fup_5fpet_5fstar_2eproto {
  StaticDescriptorInitializer_level_5fup_5fpet_5fstar_2eproto() {
    protobuf_AddDesc_level_5fup_5fpet_5fstar_2eproto();
  }
} static_descriptor_initializer_level_5fup_5fpet_5fstar_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int LevelUpPetStarRequest::kMsgIDFieldNumber;
const int LevelUpPetStarRequest::kPetIDFieldNumber;
const int LevelUpPetStarRequest::kFeedPetIDFieldNumber;
#endif  // !_MSC_VER

LevelUpPetStarRequest::LevelUpPetStarRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void LevelUpPetStarRequest::InitAsDefaultInstance() {
}

LevelUpPetStarRequest::LevelUpPetStarRequest(const LevelUpPetStarRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void LevelUpPetStarRequest::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 1;
  petid_ = GOOGLE_ULONGLONG(0);
  feedpetid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LevelUpPetStarRequest::~LevelUpPetStarRequest() {
  SharedDtor();
}

void LevelUpPetStarRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LevelUpPetStarRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LevelUpPetStarRequest& LevelUpPetStarRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_level_5fup_5fpet_5fstar_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_level_5fup_5fpet_5fstar_2eproto();
#endif
  return *default_instance_;
}

LevelUpPetStarRequest* LevelUpPetStarRequest::default_instance_ = NULL;

LevelUpPetStarRequest* LevelUpPetStarRequest::New() const {
  return new LevelUpPetStarRequest;
}

void LevelUpPetStarRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 1;
    petid_ = GOOGLE_ULONGLONG(0);
    feedpetid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool LevelUpPetStarRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sanguo.MsgID msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::sanguo::MsgID >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_petID;
        break;
      }

      // required uint64 petID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_petID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_feedPetID;
        break;
      }

      // required uint64 feedPetID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_feedPetID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &feedpetid_)));
          set_has_feedpetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LevelUpPetStarRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .sanguo.MsgID msgID = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // required uint64 petID = 2;
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->petid(), output);
  }

  // required uint64 feedPetID = 3;
  if (has_feedpetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->feedpetid(), output);
  }

}

int LevelUpPetStarRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .sanguo.MsgID msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // required uint64 petID = 2;
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->petid());
    }

    // required uint64 feedPetID = 3;
    if (has_feedpetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->feedpetid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LevelUpPetStarRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LevelUpPetStarRequest*>(&from));
}

void LevelUpPetStarRequest::MergeFrom(const LevelUpPetStarRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_petid()) {
      set_petid(from.petid());
    }
    if (from.has_feedpetid()) {
      set_feedpetid(from.feedpetid());
    }
  }
}

void LevelUpPetStarRequest::CopyFrom(const LevelUpPetStarRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LevelUpPetStarRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void LevelUpPetStarRequest::Swap(LevelUpPetStarRequest* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(petid_, other->petid_);
    std::swap(feedpetid_, other->feedpetid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LevelUpPetStarRequest::GetTypeName() const {
  return "sanguo.LevelUpPetStarRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int LevelUpPetStarResponse::kMsgIDFieldNumber;
const int LevelUpPetStarResponse::kStatusFieldNumber;
const int LevelUpPetStarResponse::kCopperFieldNumber;
const int LevelUpPetStarResponse::kPetFieldNumber;
const int LevelUpPetStarResponse::kPetcooldownFieldNumber;
#endif  // !_MSC_VER

LevelUpPetStarResponse::LevelUpPetStarResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void LevelUpPetStarResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  pet_ = const_cast< ::sanguo::MsgPet*>(
      ::sanguo::MsgPet::internal_default_instance());
#else
  pet_ = const_cast< ::sanguo::MsgPet*>(&::sanguo::MsgPet::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  petcooldown_ = const_cast< ::sanguo::MsgPetCooldown*>(
      ::sanguo::MsgPetCooldown::internal_default_instance());
#else
  petcooldown_ = const_cast< ::sanguo::MsgPetCooldown*>(&::sanguo::MsgPetCooldown::default_instance());
#endif
}

LevelUpPetStarResponse::LevelUpPetStarResponse(const LevelUpPetStarResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void LevelUpPetStarResponse::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 1;
  status_ = 0;
  copper_ = GOOGLE_ULONGLONG(0);
  pet_ = NULL;
  petcooldown_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LevelUpPetStarResponse::~LevelUpPetStarResponse() {
  SharedDtor();
}

void LevelUpPetStarResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete pet_;
    delete petcooldown_;
  }
}

void LevelUpPetStarResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LevelUpPetStarResponse& LevelUpPetStarResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_level_5fup_5fpet_5fstar_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_level_5fup_5fpet_5fstar_2eproto();
#endif
  return *default_instance_;
}

LevelUpPetStarResponse* LevelUpPetStarResponse::default_instance_ = NULL;

LevelUpPetStarResponse* LevelUpPetStarResponse::New() const {
  return new LevelUpPetStarResponse;
}

void LevelUpPetStarResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 1;
    status_ = 0;
    copper_ = GOOGLE_ULONGLONG(0);
    if (has_pet()) {
      if (pet_ != NULL) pet_->::sanguo::MsgPet::Clear();
    }
    if (has_petcooldown()) {
      if (petcooldown_ != NULL) petcooldown_->::sanguo::MsgPetCooldown::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool LevelUpPetStarResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sanguo.MsgID msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::sanguo::MsgID >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .sanguo.StatusCode status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::StatusCode_IsValid(value)) {
            set_status(static_cast< ::sanguo::StatusCode >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_copper;
        break;
      }

      // optional uint64 copper = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_copper:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &copper_)));
          set_has_copper();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pet;
        break;
      }

      // optional .sanguo.MsgPet pet = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_petcooldown;
        break;
      }

      // optional .sanguo.MsgPetCooldown petcooldown = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_petcooldown:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_petcooldown()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LevelUpPetStarResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .sanguo.MsgID msgID = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // required .sanguo.StatusCode status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // optional uint64 copper = 3;
  if (has_copper()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->copper(), output);
  }

  // optional .sanguo.MsgPet pet = 4;
  if (has_pet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->pet(), output);
  }

  // optional .sanguo.MsgPetCooldown petcooldown = 5;
  if (has_petcooldown()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->petcooldown(), output);
  }

}

int LevelUpPetStarResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .sanguo.MsgID msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // required .sanguo.StatusCode status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional uint64 copper = 3;
    if (has_copper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->copper());
    }

    // optional .sanguo.MsgPet pet = 4;
    if (has_pet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pet());
    }

    // optional .sanguo.MsgPetCooldown petcooldown = 5;
    if (has_petcooldown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->petcooldown());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LevelUpPetStarResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LevelUpPetStarResponse*>(&from));
}

void LevelUpPetStarResponse::MergeFrom(const LevelUpPetStarResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_copper()) {
      set_copper(from.copper());
    }
    if (from.has_pet()) {
      mutable_pet()->::sanguo::MsgPet::MergeFrom(from.pet());
    }
    if (from.has_petcooldown()) {
      mutable_petcooldown()->::sanguo::MsgPetCooldown::MergeFrom(from.petcooldown());
    }
  }
}

void LevelUpPetStarResponse::CopyFrom(const LevelUpPetStarResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LevelUpPetStarResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_pet()) {
    if (!this->pet().IsInitialized()) return false;
  }
  if (has_petcooldown()) {
    if (!this->petcooldown().IsInitialized()) return false;
  }
  return true;
}

void LevelUpPetStarResponse::Swap(LevelUpPetStarResponse* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(status_, other->status_);
    std::swap(copper_, other->copper_);
    std::swap(pet_, other->pet_);
    std::swap(petcooldown_, other->petcooldown_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LevelUpPetStarResponse::GetTypeName() const {
  return "sanguo.LevelUpPetStarResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sanguo

// @@protoc_insertion_point(global_scope)
