// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: role.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "role.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace sanguo {

void protobuf_ShutdownFile_role_2eproto() {
  delete MsgRoleData::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_role_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_role_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::sanguo::protobuf_AddDesc_constants_2eproto();
  MsgRoleData::default_instance_ = new MsgRoleData();
  MsgRoleData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_role_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_role_2eproto_once_);
void protobuf_AddDesc_role_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_role_2eproto_once_,
                 &protobuf_AddDesc_role_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_role_2eproto {
  StaticDescriptorInitializer_role_2eproto() {
    protobuf_AddDesc_role_2eproto();
  }
} static_descriptor_initializer_role_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int MsgRoleData::kRoleIDFieldNumber;
const int MsgRoleData::kRoleNameFieldNumber;
const int MsgRoleData::kRoleLevelFieldNumber;
const int MsgRoleData::kRoleProfessionFieldNumber;
const int MsgRoleData::kMapIDFieldNumber;
const int MsgRoleData::kCopperFieldNumber;
const int MsgRoleData::kGoldFieldNumber;
const int MsgRoleData::kJadeFieldNumber;
const int MsgRoleData::kPowerFieldNumber;
const int MsgRoleData::kVipLevelFieldNumber;
const int MsgRoleData::kCreditFieldNumber;
const int MsgRoleData::kHonourFieldNumber;
const int MsgRoleData::kVipRewardedFieldNumber;
const int MsgRoleData::kRechargeFieldNumber;
const int MsgRoleData::kYijunIDFieldNumber;
const int MsgRoleData::kExpFieldNumber;
const int MsgRoleData::kJungongFieldNumber;
const int MsgRoleData::kBuyPowerCountTodayFieldNumber;
const int MsgRoleData::kArenaRoleRankFieldNumber;
const int MsgRoleData::kFightFieldNumber;
const int MsgRoleData::kGoldTicketFieldNumber;
const int MsgRoleData::kSilverTicketFieldNumber;
const int MsgRoleData::kCopperTicketFieldNumber;
const int MsgRoleData::kFriendShipFieldNumber;
const int MsgRoleData::kCurtitleFieldNumber;
const int MsgRoleData::kVipExperienceCardLevelFieldNumber;
#endif  // !_MSC_VER

MsgRoleData::MsgRoleData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void MsgRoleData::InitAsDefaultInstance() {
}

MsgRoleData::MsgRoleData(const MsgRoleData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void MsgRoleData::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_ULONGLONG(0);
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rolelevel_ = 0u;
  roleprofession_ = 1;
  mapid_ = 0u;
  copper_ = GOOGLE_ULONGLONG(0);
  gold_ = 0u;
  jade_ = 0u;
  power_ = 0u;
  viplevel_ = 0u;
  credit_ = GOOGLE_ULONGLONG(0);
  honour_ = GOOGLE_ULONGLONG(0);
  recharge_ = 0u;
  yijunid_ = GOOGLE_ULONGLONG(0);
  exp_ = GOOGLE_ULONGLONG(0);
  jungong_ = GOOGLE_ULONGLONG(0);
  buypowercounttoday_ = 0u;
  arenarolerank_ = GOOGLE_ULONGLONG(0);
  fight_ = 0u;
  goldticket_ = 0u;
  silverticket_ = 0u;
  copperticket_ = 0u;
  friendship_ = 0u;
  curtitle_ = 0u;
  vipexperiencecardlevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgRoleData::~MsgRoleData() {
  SharedDtor();
}

void MsgRoleData::SharedDtor() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgRoleData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgRoleData& MsgRoleData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_role_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_role_2eproto();
#endif
  return *default_instance_;
}

MsgRoleData* MsgRoleData::default_instance_ = NULL;

MsgRoleData* MsgRoleData::New() const {
  return new MsgRoleData;
}

void MsgRoleData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = GOOGLE_ULONGLONG(0);
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    rolelevel_ = 0u;
    roleprofession_ = 1;
    mapid_ = 0u;
    copper_ = GOOGLE_ULONGLONG(0);
    gold_ = 0u;
    jade_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    power_ = 0u;
    viplevel_ = 0u;
    credit_ = GOOGLE_ULONGLONG(0);
    honour_ = GOOGLE_ULONGLONG(0);
    recharge_ = 0u;
    yijunid_ = GOOGLE_ULONGLONG(0);
    exp_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    jungong_ = GOOGLE_ULONGLONG(0);
    buypowercounttoday_ = 0u;
    arenarolerank_ = GOOGLE_ULONGLONG(0);
    fight_ = 0u;
    goldticket_ = 0u;
    silverticket_ = 0u;
    copperticket_ = 0u;
    friendship_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    curtitle_ = 0u;
    vipexperiencecardlevel_ = 0u;
  }
  viprewarded_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool MsgRoleData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 roleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roleName;
        break;
      }

      // required string roleName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_roleLevel;
        break;
      }

      // required uint32 roleLevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rolelevel_)));
          set_has_rolelevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_roleProfession;
        break;
      }

      // required .sanguo.RoleProfession roleProfession = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleProfession:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::RoleProfession_IsValid(value)) {
            set_roleprofession(static_cast< ::sanguo::RoleProfession >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_mapID;
        break;
      }

      // required uint32 mapID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_copper;
        break;
      }

      // required uint64 copper = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_copper:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &copper_)));
          set_has_copper();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_gold;
        break;
      }

      // required uint32 gold = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_jade;
        break;
      }

      // required uint32 jade = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jade_)));
          set_has_jade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_power;
        break;
      }

      // required uint32 power = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_vipLevel;
        break;
      }

      // required uint32 vipLevel = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_credit;
        break;
      }

      // required uint64 credit = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_credit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &credit_)));
          set_has_credit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_honour;
        break;
      }

      // optional uint64 honour = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_honour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &honour_)));
          set_has_honour();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_vipRewarded;
        break;
      }

      // repeated uint32 vipRewarded = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipRewarded:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 104, input, this->mutable_viprewarded())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_viprewarded())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_vipRewarded;
        if (input->ExpectTag(112)) goto parse_recharge;
        break;
      }

      // optional uint32 recharge = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recharge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recharge_)));
          set_has_recharge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_yijunID;
        break;
      }

      // optional uint64 yijunID = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_yijunID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &yijunid_)));
          set_has_yijunid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_exp;
        break;
      }

      // optional uint64 exp = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_jungong;
        break;
      }

      // optional uint64 jungong = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jungong:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &jungong_)));
          set_has_jungong();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_buyPowerCountToday;
        break;
      }

      // optional uint32 buyPowerCountToday = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyPowerCountToday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buypowercounttoday_)));
          set_has_buypowercounttoday();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_arenaRoleRank;
        break;
      }

      // optional uint64 arenaRoleRank = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arenaRoleRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &arenarolerank_)));
          set_has_arenarolerank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_fight;
        break;
      }

      // optional uint32 fight = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_goldTicket;
        break;
      }

      // optional uint32 goldTicket = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goldTicket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goldticket_)));
          set_has_goldticket();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_silverTicket;
        break;
      }

      // optional uint32 silverTicket = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_silverTicket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &silverticket_)));
          set_has_silverticket();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_copperTicket;
        break;
      }

      // optional uint32 copperTicket = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_copperTicket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copperticket_)));
          set_has_copperticket();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_friendShip;
        break;
      }

      // optional uint32 friendShip = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friendShip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &friendship_)));
          set_has_friendship();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_curtitle;
        break;
      }

      // required uint32 curtitle = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curtitle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curtitle_)));
          set_has_curtitle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_vipExperienceCardLevel;
        break;
      }

      // optional uint32 vipExperienceCardLevel = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipExperienceCardLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vipexperiencecardlevel_)));
          set_has_vipexperiencecardlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgRoleData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 roleID = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roleid(), output);
  }

  // required string roleName = 2;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->rolename(), output);
  }

  // required uint32 roleLevel = 3;
  if (has_rolelevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rolelevel(), output);
  }

  // required .sanguo.RoleProfession roleProfession = 4;
  if (has_roleprofession()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->roleprofession(), output);
  }

  // required uint32 mapID = 5;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->mapid(), output);
  }

  // required uint64 copper = 6;
  if (has_copper()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->copper(), output);
  }

  // required uint32 gold = 7;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->gold(), output);
  }

  // required uint32 jade = 8;
  if (has_jade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->jade(), output);
  }

  // required uint32 power = 9;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->power(), output);
  }

  // required uint32 vipLevel = 10;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->viplevel(), output);
  }

  // required uint64 credit = 11;
  if (has_credit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->credit(), output);
  }

  // optional uint64 honour = 12;
  if (has_honour()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->honour(), output);
  }

  // repeated uint32 vipRewarded = 13;
  for (int i = 0; i < this->viprewarded_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      13, this->viprewarded(i), output);
  }

  // optional uint32 recharge = 14;
  if (has_recharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->recharge(), output);
  }

  // optional uint64 yijunID = 15;
  if (has_yijunid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->yijunid(), output);
  }

  // optional uint64 exp = 16;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->exp(), output);
  }

  // optional uint64 jungong = 17;
  if (has_jungong()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->jungong(), output);
  }

  // optional uint32 buyPowerCountToday = 18;
  if (has_buypowercounttoday()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->buypowercounttoday(), output);
  }

  // optional uint64 arenaRoleRank = 19;
  if (has_arenarolerank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(19, this->arenarolerank(), output);
  }

  // optional uint32 fight = 20;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->fight(), output);
  }

  // optional uint32 goldTicket = 21;
  if (has_goldticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->goldticket(), output);
  }

  // optional uint32 silverTicket = 22;
  if (has_silverticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->silverticket(), output);
  }

  // optional uint32 copperTicket = 23;
  if (has_copperticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->copperticket(), output);
  }

  // optional uint32 friendShip = 24;
  if (has_friendship()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->friendship(), output);
  }

  // required uint32 curtitle = 25;
  if (has_curtitle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->curtitle(), output);
  }

  // optional uint32 vipExperienceCardLevel = 26;
  if (has_vipexperiencecardlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->vipexperiencecardlevel(), output);
  }

}

int MsgRoleData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 roleID = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

    // required string roleName = 2;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }

    // required uint32 roleLevel = 3;
    if (has_rolelevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rolelevel());
    }

    // required .sanguo.RoleProfession roleProfession = 4;
    if (has_roleprofession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->roleprofession());
    }

    // required uint32 mapID = 5;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

    // required uint64 copper = 6;
    if (has_copper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->copper());
    }

    // required uint32 gold = 7;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold());
    }

    // required uint32 jade = 8;
    if (has_jade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jade());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 power = 9;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->power());
    }

    // required uint32 vipLevel = 10;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viplevel());
    }

    // required uint64 credit = 11;
    if (has_credit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->credit());
    }

    // optional uint64 honour = 12;
    if (has_honour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->honour());
    }

    // optional uint32 recharge = 14;
    if (has_recharge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recharge());
    }

    // optional uint64 yijunID = 15;
    if (has_yijunid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->yijunid());
    }

    // optional uint64 exp = 16;
    if (has_exp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->exp());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint64 jungong = 17;
    if (has_jungong()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->jungong());
    }

    // optional uint32 buyPowerCountToday = 18;
    if (has_buypowercounttoday()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buypowercounttoday());
    }

    // optional uint64 arenaRoleRank = 19;
    if (has_arenarolerank()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->arenarolerank());
    }

    // optional uint32 fight = 20;
    if (has_fight()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fight());
    }

    // optional uint32 goldTicket = 21;
    if (has_goldticket()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goldticket());
    }

    // optional uint32 silverTicket = 22;
    if (has_silverticket()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->silverticket());
    }

    // optional uint32 copperTicket = 23;
    if (has_copperticket()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->copperticket());
    }

    // optional uint32 friendShip = 24;
    if (has_friendship()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->friendship());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required uint32 curtitle = 25;
    if (has_curtitle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curtitle());
    }

    // optional uint32 vipExperienceCardLevel = 26;
    if (has_vipexperiencecardlevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vipexperiencecardlevel());
    }

  }
  // repeated uint32 vipRewarded = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->viprewarded_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->viprewarded(i));
    }
    total_size += 1 * this->viprewarded_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgRoleData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgRoleData*>(&from));
}

void MsgRoleData::MergeFrom(const MsgRoleData& from) {
  GOOGLE_CHECK_NE(&from, this);
  viprewarded_.MergeFrom(from.viprewarded_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_rolelevel()) {
      set_rolelevel(from.rolelevel());
    }
    if (from.has_roleprofession()) {
      set_roleprofession(from.roleprofession());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_copper()) {
      set_copper(from.copper());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_jade()) {
      set_jade(from.jade());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
    if (from.has_credit()) {
      set_credit(from.credit());
    }
    if (from.has_honour()) {
      set_honour(from.honour());
    }
    if (from.has_recharge()) {
      set_recharge(from.recharge());
    }
    if (from.has_yijunid()) {
      set_yijunid(from.yijunid());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_jungong()) {
      set_jungong(from.jungong());
    }
    if (from.has_buypowercounttoday()) {
      set_buypowercounttoday(from.buypowercounttoday());
    }
    if (from.has_arenarolerank()) {
      set_arenarolerank(from.arenarolerank());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
    if (from.has_goldticket()) {
      set_goldticket(from.goldticket());
    }
    if (from.has_silverticket()) {
      set_silverticket(from.silverticket());
    }
    if (from.has_copperticket()) {
      set_copperticket(from.copperticket());
    }
    if (from.has_friendship()) {
      set_friendship(from.friendship());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_curtitle()) {
      set_curtitle(from.curtitle());
    }
    if (from.has_vipexperiencecardlevel()) {
      set_vipexperiencecardlevel(from.vipexperiencecardlevel());
    }
  }
}

void MsgRoleData::CopyFrom(const MsgRoleData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRoleData::IsInitialized() const {
  if ((_has_bits_[0] & 0x010007ff) != 0x010007ff) return false;

  return true;
}

void MsgRoleData::Swap(MsgRoleData* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(rolename_, other->rolename_);
    std::swap(rolelevel_, other->rolelevel_);
    std::swap(roleprofession_, other->roleprofession_);
    std::swap(mapid_, other->mapid_);
    std::swap(copper_, other->copper_);
    std::swap(gold_, other->gold_);
    std::swap(jade_, other->jade_);
    std::swap(power_, other->power_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(credit_, other->credit_);
    std::swap(honour_, other->honour_);
    viprewarded_.Swap(&other->viprewarded_);
    std::swap(recharge_, other->recharge_);
    std::swap(yijunid_, other->yijunid_);
    std::swap(exp_, other->exp_);
    std::swap(jungong_, other->jungong_);
    std::swap(buypowercounttoday_, other->buypowercounttoday_);
    std::swap(arenarolerank_, other->arenarolerank_);
    std::swap(fight_, other->fight_);
    std::swap(goldticket_, other->goldticket_);
    std::swap(silverticket_, other->silverticket_);
    std::swap(copperticket_, other->copperticket_);
    std::swap(friendship_, other->friendship_);
    std::swap(curtitle_, other->curtitle_);
    std::swap(vipexperiencecardlevel_, other->vipexperiencecardlevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MsgRoleData::GetTypeName() const {
  return "sanguo.MsgRoleData";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sanguo

// @@protoc_insertion_point(global_scope)
