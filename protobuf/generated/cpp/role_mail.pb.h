// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: role_mail.proto

#ifndef PROTOBUF_role_5fmail_2eproto__INCLUDED
#define PROTOBUF_role_5fmail_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "constants.pb.h"
// @@protoc_insertion_point(includes)

namespace sanguo {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_role_5fmail_2eproto();
void protobuf_AssignDesc_role_5fmail_2eproto();
void protobuf_ShutdownFile_role_5fmail_2eproto();

class MsgRoleMail;

// ===================================================================

class MsgRoleMail : public ::google::protobuf::MessageLite {
 public:
  MsgRoleMail();
  virtual ~MsgRoleMail();

  MsgRoleMail(const MsgRoleMail& from);

  inline MsgRoleMail& operator=(const MsgRoleMail& from) {
    CopyFrom(from);
    return *this;
  }

  static const MsgRoleMail& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const MsgRoleMail* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(MsgRoleMail* other);

  // implements Message ----------------------------------------------

  MsgRoleMail* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const MsgRoleMail& from);
  void MergeFrom(const MsgRoleMail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // required string tiltle = 2;
  inline bool has_tiltle() const;
  inline void clear_tiltle();
  static const int kTiltleFieldNumber = 2;
  inline const ::std::string& tiltle() const;
  inline void set_tiltle(const ::std::string& value);
  inline void set_tiltle(const char* value);
  inline void set_tiltle(const char* value, size_t size);
  inline ::std::string* mutable_tiltle();
  inline ::std::string* release_tiltle();
  inline void set_allocated_tiltle(::std::string* tiltle);

  // required string context = 3;
  inline bool has_context() const;
  inline void clear_context();
  static const int kContextFieldNumber = 3;
  inline const ::std::string& context() const;
  inline void set_context(const ::std::string& value);
  inline void set_context(const char* value);
  inline void set_context(const char* value, size_t size);
  inline ::std::string* mutable_context();
  inline ::std::string* release_context();
  inline void set_allocated_context(::std::string* context);

  // required string kit = 4;
  inline bool has_kit() const;
  inline void clear_kit();
  static const int kKitFieldNumber = 4;
  inline const ::std::string& kit() const;
  inline void set_kit(const ::std::string& value);
  inline void set_kit(const char* value);
  inline void set_kit(const char* value, size_t size);
  inline ::std::string* mutable_kit();
  inline ::std::string* release_kit();
  inline void set_allocated_kit(::std::string* kit);

  // required uint64 senderId = 5;
  inline bool has_senderid() const;
  inline void clear_senderid();
  static const int kSenderIdFieldNumber = 5;
  inline ::google::protobuf::uint64 senderid() const;
  inline void set_senderid(::google::protobuf::uint64 value);

  // required uint64 receiverId = 6;
  inline bool has_receiverid() const;
  inline void clear_receiverid();
  static const int kReceiverIdFieldNumber = 6;
  inline ::google::protobuf::uint64 receiverid() const;
  inline void set_receiverid(::google::protobuf::uint64 value);

  // required uint32 mailStatus = 7;
  inline bool has_mailstatus() const;
  inline void clear_mailstatus();
  static const int kMailStatusFieldNumber = 7;
  inline ::google::protobuf::uint32 mailstatus() const;
  inline void set_mailstatus(::google::protobuf::uint32 value);

  // required uint32 kitStatus = 8;
  inline bool has_kitstatus() const;
  inline void clear_kitstatus();
  static const int kKitStatusFieldNumber = 8;
  inline ::google::protobuf::uint32 kitstatus() const;
  inline void set_kitstatus(::google::protobuf::uint32 value);

  // required uint64 endTime = 9;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndTimeFieldNumber = 9;
  inline ::google::protobuf::uint64 endtime() const;
  inline void set_endtime(::google::protobuf::uint64 value);

  // required string senderName = 10;
  inline bool has_sendername() const;
  inline void clear_sendername();
  static const int kSenderNameFieldNumber = 10;
  inline const ::std::string& sendername() const;
  inline void set_sendername(const ::std::string& value);
  inline void set_sendername(const char* value);
  inline void set_sendername(const char* value, size_t size);
  inline ::std::string* mutable_sendername();
  inline ::std::string* release_sendername();
  inline void set_allocated_sendername(::std::string* sendername);

  // required string receiverName = 11;
  inline bool has_receivername() const;
  inline void clear_receivername();
  static const int kReceiverNameFieldNumber = 11;
  inline const ::std::string& receivername() const;
  inline void set_receivername(const ::std::string& value);
  inline void set_receivername(const char* value);
  inline void set_receivername(const char* value, size_t size);
  inline ::std::string* mutable_receivername();
  inline ::std::string* release_receivername();
  inline void set_allocated_receivername(::std::string* receivername);

  // required uint32 haveReward = 12;
  inline bool has_havereward() const;
  inline void clear_havereward();
  static const int kHaveRewardFieldNumber = 12;
  inline ::google::protobuf::uint32 havereward() const;
  inline void set_havereward(::google::protobuf::uint32 value);

  // required string name = 13;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 13;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string startTime = 14;
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStartTimeFieldNumber = 14;
  inline const ::std::string& starttime() const;
  inline void set_starttime(const ::std::string& value);
  inline void set_starttime(const char* value);
  inline void set_starttime(const char* value, size_t size);
  inline ::std::string* mutable_starttime();
  inline ::std::string* release_starttime();
  inline void set_allocated_starttime(::std::string* starttime);

  // @@protoc_insertion_point(class_scope:sanguo.MsgRoleMail)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_tiltle();
  inline void clear_has_tiltle();
  inline void set_has_context();
  inline void clear_has_context();
  inline void set_has_kit();
  inline void clear_has_kit();
  inline void set_has_senderid();
  inline void clear_has_senderid();
  inline void set_has_receiverid();
  inline void clear_has_receiverid();
  inline void set_has_mailstatus();
  inline void clear_has_mailstatus();
  inline void set_has_kitstatus();
  inline void clear_has_kitstatus();
  inline void set_has_endtime();
  inline void clear_has_endtime();
  inline void set_has_sendername();
  inline void clear_has_sendername();
  inline void set_has_receivername();
  inline void clear_has_receivername();
  inline void set_has_havereward();
  inline void clear_has_havereward();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_starttime();
  inline void clear_has_starttime();

  ::google::protobuf::uint64 id_;
  ::std::string* tiltle_;
  ::std::string* context_;
  ::std::string* kit_;
  ::google::protobuf::uint64 senderid_;
  ::google::protobuf::uint64 receiverid_;
  ::google::protobuf::uint32 mailstatus_;
  ::google::protobuf::uint32 kitstatus_;
  ::google::protobuf::uint64 endtime_;
  ::std::string* sendername_;
  ::std::string* receivername_;
  ::std::string* name_;
  ::std::string* starttime_;
  ::google::protobuf::uint32 havereward_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_role_5fmail_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_role_5fmail_2eproto();
  #endif
  friend void protobuf_AssignDesc_role_5fmail_2eproto();
  friend void protobuf_ShutdownFile_role_5fmail_2eproto();

  void InitAsDefaultInstance();
  static MsgRoleMail* default_instance_;
};
// ===================================================================


// ===================================================================

// MsgRoleMail

// required uint64 id = 1;
inline bool MsgRoleMail::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgRoleMail::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgRoleMail::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgRoleMail::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 MsgRoleMail::id() const {
  return id_;
}
inline void MsgRoleMail::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// required string tiltle = 2;
inline bool MsgRoleMail::has_tiltle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgRoleMail::set_has_tiltle() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgRoleMail::clear_has_tiltle() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgRoleMail::clear_tiltle() {
  if (tiltle_ != &::google::protobuf::internal::kEmptyString) {
    tiltle_->clear();
  }
  clear_has_tiltle();
}
inline const ::std::string& MsgRoleMail::tiltle() const {
  return *tiltle_;
}
inline void MsgRoleMail::set_tiltle(const ::std::string& value) {
  set_has_tiltle();
  if (tiltle_ == &::google::protobuf::internal::kEmptyString) {
    tiltle_ = new ::std::string;
  }
  tiltle_->assign(value);
}
inline void MsgRoleMail::set_tiltle(const char* value) {
  set_has_tiltle();
  if (tiltle_ == &::google::protobuf::internal::kEmptyString) {
    tiltle_ = new ::std::string;
  }
  tiltle_->assign(value);
}
inline void MsgRoleMail::set_tiltle(const char* value, size_t size) {
  set_has_tiltle();
  if (tiltle_ == &::google::protobuf::internal::kEmptyString) {
    tiltle_ = new ::std::string;
  }
  tiltle_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgRoleMail::mutable_tiltle() {
  set_has_tiltle();
  if (tiltle_ == &::google::protobuf::internal::kEmptyString) {
    tiltle_ = new ::std::string;
  }
  return tiltle_;
}
inline ::std::string* MsgRoleMail::release_tiltle() {
  clear_has_tiltle();
  if (tiltle_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tiltle_;
    tiltle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MsgRoleMail::set_allocated_tiltle(::std::string* tiltle) {
  if (tiltle_ != &::google::protobuf::internal::kEmptyString) {
    delete tiltle_;
  }
  if (tiltle) {
    set_has_tiltle();
    tiltle_ = tiltle;
  } else {
    clear_has_tiltle();
    tiltle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string context = 3;
inline bool MsgRoleMail::has_context() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgRoleMail::set_has_context() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgRoleMail::clear_has_context() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgRoleMail::clear_context() {
  if (context_ != &::google::protobuf::internal::kEmptyString) {
    context_->clear();
  }
  clear_has_context();
}
inline const ::std::string& MsgRoleMail::context() const {
  return *context_;
}
inline void MsgRoleMail::set_context(const ::std::string& value) {
  set_has_context();
  if (context_ == &::google::protobuf::internal::kEmptyString) {
    context_ = new ::std::string;
  }
  context_->assign(value);
}
inline void MsgRoleMail::set_context(const char* value) {
  set_has_context();
  if (context_ == &::google::protobuf::internal::kEmptyString) {
    context_ = new ::std::string;
  }
  context_->assign(value);
}
inline void MsgRoleMail::set_context(const char* value, size_t size) {
  set_has_context();
  if (context_ == &::google::protobuf::internal::kEmptyString) {
    context_ = new ::std::string;
  }
  context_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgRoleMail::mutable_context() {
  set_has_context();
  if (context_ == &::google::protobuf::internal::kEmptyString) {
    context_ = new ::std::string;
  }
  return context_;
}
inline ::std::string* MsgRoleMail::release_context() {
  clear_has_context();
  if (context_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = context_;
    context_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MsgRoleMail::set_allocated_context(::std::string* context) {
  if (context_ != &::google::protobuf::internal::kEmptyString) {
    delete context_;
  }
  if (context) {
    set_has_context();
    context_ = context;
  } else {
    clear_has_context();
    context_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string kit = 4;
inline bool MsgRoleMail::has_kit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgRoleMail::set_has_kit() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgRoleMail::clear_has_kit() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgRoleMail::clear_kit() {
  if (kit_ != &::google::protobuf::internal::kEmptyString) {
    kit_->clear();
  }
  clear_has_kit();
}
inline const ::std::string& MsgRoleMail::kit() const {
  return *kit_;
}
inline void MsgRoleMail::set_kit(const ::std::string& value) {
  set_has_kit();
  if (kit_ == &::google::protobuf::internal::kEmptyString) {
    kit_ = new ::std::string;
  }
  kit_->assign(value);
}
inline void MsgRoleMail::set_kit(const char* value) {
  set_has_kit();
  if (kit_ == &::google::protobuf::internal::kEmptyString) {
    kit_ = new ::std::string;
  }
  kit_->assign(value);
}
inline void MsgRoleMail::set_kit(const char* value, size_t size) {
  set_has_kit();
  if (kit_ == &::google::protobuf::internal::kEmptyString) {
    kit_ = new ::std::string;
  }
  kit_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgRoleMail::mutable_kit() {
  set_has_kit();
  if (kit_ == &::google::protobuf::internal::kEmptyString) {
    kit_ = new ::std::string;
  }
  return kit_;
}
inline ::std::string* MsgRoleMail::release_kit() {
  clear_has_kit();
  if (kit_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = kit_;
    kit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MsgRoleMail::set_allocated_kit(::std::string* kit) {
  if (kit_ != &::google::protobuf::internal::kEmptyString) {
    delete kit_;
  }
  if (kit) {
    set_has_kit();
    kit_ = kit;
  } else {
    clear_has_kit();
    kit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint64 senderId = 5;
inline bool MsgRoleMail::has_senderid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MsgRoleMail::set_has_senderid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MsgRoleMail::clear_has_senderid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MsgRoleMail::clear_senderid() {
  senderid_ = GOOGLE_ULONGLONG(0);
  clear_has_senderid();
}
inline ::google::protobuf::uint64 MsgRoleMail::senderid() const {
  return senderid_;
}
inline void MsgRoleMail::set_senderid(::google::protobuf::uint64 value) {
  set_has_senderid();
  senderid_ = value;
}

// required uint64 receiverId = 6;
inline bool MsgRoleMail::has_receiverid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MsgRoleMail::set_has_receiverid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MsgRoleMail::clear_has_receiverid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MsgRoleMail::clear_receiverid() {
  receiverid_ = GOOGLE_ULONGLONG(0);
  clear_has_receiverid();
}
inline ::google::protobuf::uint64 MsgRoleMail::receiverid() const {
  return receiverid_;
}
inline void MsgRoleMail::set_receiverid(::google::protobuf::uint64 value) {
  set_has_receiverid();
  receiverid_ = value;
}

// required uint32 mailStatus = 7;
inline bool MsgRoleMail::has_mailstatus() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MsgRoleMail::set_has_mailstatus() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MsgRoleMail::clear_has_mailstatus() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MsgRoleMail::clear_mailstatus() {
  mailstatus_ = 0u;
  clear_has_mailstatus();
}
inline ::google::protobuf::uint32 MsgRoleMail::mailstatus() const {
  return mailstatus_;
}
inline void MsgRoleMail::set_mailstatus(::google::protobuf::uint32 value) {
  set_has_mailstatus();
  mailstatus_ = value;
}

// required uint32 kitStatus = 8;
inline bool MsgRoleMail::has_kitstatus() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MsgRoleMail::set_has_kitstatus() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MsgRoleMail::clear_has_kitstatus() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MsgRoleMail::clear_kitstatus() {
  kitstatus_ = 0u;
  clear_has_kitstatus();
}
inline ::google::protobuf::uint32 MsgRoleMail::kitstatus() const {
  return kitstatus_;
}
inline void MsgRoleMail::set_kitstatus(::google::protobuf::uint32 value) {
  set_has_kitstatus();
  kitstatus_ = value;
}

// required uint64 endTime = 9;
inline bool MsgRoleMail::has_endtime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MsgRoleMail::set_has_endtime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MsgRoleMail::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MsgRoleMail::clear_endtime() {
  endtime_ = GOOGLE_ULONGLONG(0);
  clear_has_endtime();
}
inline ::google::protobuf::uint64 MsgRoleMail::endtime() const {
  return endtime_;
}
inline void MsgRoleMail::set_endtime(::google::protobuf::uint64 value) {
  set_has_endtime();
  endtime_ = value;
}

// required string senderName = 10;
inline bool MsgRoleMail::has_sendername() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MsgRoleMail::set_has_sendername() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MsgRoleMail::clear_has_sendername() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MsgRoleMail::clear_sendername() {
  if (sendername_ != &::google::protobuf::internal::kEmptyString) {
    sendername_->clear();
  }
  clear_has_sendername();
}
inline const ::std::string& MsgRoleMail::sendername() const {
  return *sendername_;
}
inline void MsgRoleMail::set_sendername(const ::std::string& value) {
  set_has_sendername();
  if (sendername_ == &::google::protobuf::internal::kEmptyString) {
    sendername_ = new ::std::string;
  }
  sendername_->assign(value);
}
inline void MsgRoleMail::set_sendername(const char* value) {
  set_has_sendername();
  if (sendername_ == &::google::protobuf::internal::kEmptyString) {
    sendername_ = new ::std::string;
  }
  sendername_->assign(value);
}
inline void MsgRoleMail::set_sendername(const char* value, size_t size) {
  set_has_sendername();
  if (sendername_ == &::google::protobuf::internal::kEmptyString) {
    sendername_ = new ::std::string;
  }
  sendername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgRoleMail::mutable_sendername() {
  set_has_sendername();
  if (sendername_ == &::google::protobuf::internal::kEmptyString) {
    sendername_ = new ::std::string;
  }
  return sendername_;
}
inline ::std::string* MsgRoleMail::release_sendername() {
  clear_has_sendername();
  if (sendername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sendername_;
    sendername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MsgRoleMail::set_allocated_sendername(::std::string* sendername) {
  if (sendername_ != &::google::protobuf::internal::kEmptyString) {
    delete sendername_;
  }
  if (sendername) {
    set_has_sendername();
    sendername_ = sendername;
  } else {
    clear_has_sendername();
    sendername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string receiverName = 11;
inline bool MsgRoleMail::has_receivername() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MsgRoleMail::set_has_receivername() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MsgRoleMail::clear_has_receivername() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MsgRoleMail::clear_receivername() {
  if (receivername_ != &::google::protobuf::internal::kEmptyString) {
    receivername_->clear();
  }
  clear_has_receivername();
}
inline const ::std::string& MsgRoleMail::receivername() const {
  return *receivername_;
}
inline void MsgRoleMail::set_receivername(const ::std::string& value) {
  set_has_receivername();
  if (receivername_ == &::google::protobuf::internal::kEmptyString) {
    receivername_ = new ::std::string;
  }
  receivername_->assign(value);
}
inline void MsgRoleMail::set_receivername(const char* value) {
  set_has_receivername();
  if (receivername_ == &::google::protobuf::internal::kEmptyString) {
    receivername_ = new ::std::string;
  }
  receivername_->assign(value);
}
inline void MsgRoleMail::set_receivername(const char* value, size_t size) {
  set_has_receivername();
  if (receivername_ == &::google::protobuf::internal::kEmptyString) {
    receivername_ = new ::std::string;
  }
  receivername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgRoleMail::mutable_receivername() {
  set_has_receivername();
  if (receivername_ == &::google::protobuf::internal::kEmptyString) {
    receivername_ = new ::std::string;
  }
  return receivername_;
}
inline ::std::string* MsgRoleMail::release_receivername() {
  clear_has_receivername();
  if (receivername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = receivername_;
    receivername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MsgRoleMail::set_allocated_receivername(::std::string* receivername) {
  if (receivername_ != &::google::protobuf::internal::kEmptyString) {
    delete receivername_;
  }
  if (receivername) {
    set_has_receivername();
    receivername_ = receivername;
  } else {
    clear_has_receivername();
    receivername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 haveReward = 12;
inline bool MsgRoleMail::has_havereward() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MsgRoleMail::set_has_havereward() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MsgRoleMail::clear_has_havereward() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MsgRoleMail::clear_havereward() {
  havereward_ = 0u;
  clear_has_havereward();
}
inline ::google::protobuf::uint32 MsgRoleMail::havereward() const {
  return havereward_;
}
inline void MsgRoleMail::set_havereward(::google::protobuf::uint32 value) {
  set_has_havereward();
  havereward_ = value;
}

// required string name = 13;
inline bool MsgRoleMail::has_name() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void MsgRoleMail::set_has_name() {
  _has_bits_[0] |= 0x00001000u;
}
inline void MsgRoleMail::clear_has_name() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void MsgRoleMail::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& MsgRoleMail::name() const {
  return *name_;
}
inline void MsgRoleMail::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MsgRoleMail::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MsgRoleMail::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgRoleMail::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* MsgRoleMail::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MsgRoleMail::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string startTime = 14;
inline bool MsgRoleMail::has_starttime() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void MsgRoleMail::set_has_starttime() {
  _has_bits_[0] |= 0x00002000u;
}
inline void MsgRoleMail::clear_has_starttime() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void MsgRoleMail::clear_starttime() {
  if (starttime_ != &::google::protobuf::internal::kEmptyString) {
    starttime_->clear();
  }
  clear_has_starttime();
}
inline const ::std::string& MsgRoleMail::starttime() const {
  return *starttime_;
}
inline void MsgRoleMail::set_starttime(const ::std::string& value) {
  set_has_starttime();
  if (starttime_ == &::google::protobuf::internal::kEmptyString) {
    starttime_ = new ::std::string;
  }
  starttime_->assign(value);
}
inline void MsgRoleMail::set_starttime(const char* value) {
  set_has_starttime();
  if (starttime_ == &::google::protobuf::internal::kEmptyString) {
    starttime_ = new ::std::string;
  }
  starttime_->assign(value);
}
inline void MsgRoleMail::set_starttime(const char* value, size_t size) {
  set_has_starttime();
  if (starttime_ == &::google::protobuf::internal::kEmptyString) {
    starttime_ = new ::std::string;
  }
  starttime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgRoleMail::mutable_starttime() {
  set_has_starttime();
  if (starttime_ == &::google::protobuf::internal::kEmptyString) {
    starttime_ = new ::std::string;
  }
  return starttime_;
}
inline ::std::string* MsgRoleMail::release_starttime() {
  clear_has_starttime();
  if (starttime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = starttime_;
    starttime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MsgRoleMail::set_allocated_starttime(::std::string* starttime) {
  if (starttime_ != &::google::protobuf::internal::kEmptyString) {
    delete starttime_;
  }
  if (starttime) {
    set_has_starttime();
    starttime_ = starttime;
  } else {
    clear_has_starttime();
    starttime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sanguo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_role_5fmail_2eproto__INCLUDED
