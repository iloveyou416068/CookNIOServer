// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: one_key_sell_guaxiang.proto

#ifndef PROTOBUF_one_5fkey_5fsell_5fguaxiang_2eproto__INCLUDED
#define PROTOBUF_one_5fkey_5fsell_5fguaxiang_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "msg_id.pb.h"
#include "msg_status_code.pb.h"
#include "role_guaxiang_goods.pb.h"
// @@protoc_insertion_point(includes)

namespace sanguo {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_one_5fkey_5fsell_5fguaxiang_2eproto();
void protobuf_AssignDesc_one_5fkey_5fsell_5fguaxiang_2eproto();
void protobuf_ShutdownFile_one_5fkey_5fsell_5fguaxiang_2eproto();

class OneKeySellGuaxiangRequest;
class OneKeySellGuaxiangResponse;

// ===================================================================

class OneKeySellGuaxiangRequest : public ::google::protobuf::MessageLite {
 public:
  OneKeySellGuaxiangRequest();
  virtual ~OneKeySellGuaxiangRequest();

  OneKeySellGuaxiangRequest(const OneKeySellGuaxiangRequest& from);

  inline OneKeySellGuaxiangRequest& operator=(const OneKeySellGuaxiangRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const OneKeySellGuaxiangRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const OneKeySellGuaxiangRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(OneKeySellGuaxiangRequest* other);

  // implements Message ----------------------------------------------

  OneKeySellGuaxiangRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const OneKeySellGuaxiangRequest& from);
  void MergeFrom(const OneKeySellGuaxiangRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .sanguo.MsgID msgID = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline ::sanguo::MsgID msgid() const;
  inline void set_msgid(::sanguo::MsgID value);

  // repeated .sanguo.MsgGuaxiangGoods sellGuaxiang = 2;
  inline int sellguaxiang_size() const;
  inline void clear_sellguaxiang();
  static const int kSellGuaxiangFieldNumber = 2;
  inline const ::sanguo::MsgGuaxiangGoods& sellguaxiang(int index) const;
  inline ::sanguo::MsgGuaxiangGoods* mutable_sellguaxiang(int index);
  inline ::sanguo::MsgGuaxiangGoods* add_sellguaxiang();
  inline const ::google::protobuf::RepeatedPtrField< ::sanguo::MsgGuaxiangGoods >&
      sellguaxiang() const;
  inline ::google::protobuf::RepeatedPtrField< ::sanguo::MsgGuaxiangGoods >*
      mutable_sellguaxiang();

  // required sint32 delIndex = 3;
  inline bool has_delindex() const;
  inline void clear_delindex();
  static const int kDelIndexFieldNumber = 3;
  inline ::google::protobuf::int32 delindex() const;
  inline void set_delindex(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sanguo.OneKeySellGuaxiangRequest)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_delindex();
  inline void clear_has_delindex();

  ::google::protobuf::RepeatedPtrField< ::sanguo::MsgGuaxiangGoods > sellguaxiang_;
  int msgid_;
  ::google::protobuf::int32 delindex_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_one_5fkey_5fsell_5fguaxiang_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_one_5fkey_5fsell_5fguaxiang_2eproto();
  #endif
  friend void protobuf_AssignDesc_one_5fkey_5fsell_5fguaxiang_2eproto();
  friend void protobuf_ShutdownFile_one_5fkey_5fsell_5fguaxiang_2eproto();

  void InitAsDefaultInstance();
  static OneKeySellGuaxiangRequest* default_instance_;
};
// -------------------------------------------------------------------

class OneKeySellGuaxiangResponse : public ::google::protobuf::MessageLite {
 public:
  OneKeySellGuaxiangResponse();
  virtual ~OneKeySellGuaxiangResponse();

  OneKeySellGuaxiangResponse(const OneKeySellGuaxiangResponse& from);

  inline OneKeySellGuaxiangResponse& operator=(const OneKeySellGuaxiangResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const OneKeySellGuaxiangResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const OneKeySellGuaxiangResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(OneKeySellGuaxiangResponse* other);

  // implements Message ----------------------------------------------

  OneKeySellGuaxiangResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const OneKeySellGuaxiangResponse& from);
  void MergeFrom(const OneKeySellGuaxiangResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .sanguo.MsgID msgID = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline ::sanguo::MsgID msgid() const;
  inline void set_msgid(::sanguo::MsgID value);

  // required .sanguo.StatusCode status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::sanguo::StatusCode status() const;
  inline void set_status(::sanguo::StatusCode value);

  // optional uint64 copper = 3;
  inline bool has_copper() const;
  inline void clear_copper();
  static const int kCopperFieldNumber = 3;
  inline ::google::protobuf::uint64 copper() const;
  inline void set_copper(::google::protobuf::uint64 value);

  // optional uint32 gold = 4;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 4;
  inline ::google::protobuf::uint32 gold() const;
  inline void set_gold(::google::protobuf::uint32 value);

  // optional uint32 jade = 5;
  inline bool has_jade() const;
  inline void clear_jade();
  static const int kJadeFieldNumber = 5;
  inline ::google::protobuf::uint32 jade() const;
  inline void set_jade(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:sanguo.OneKeySellGuaxiangResponse)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_copper();
  inline void clear_has_copper();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_jade();
  inline void clear_has_jade();

  int msgid_;
  int status_;
  ::google::protobuf::uint64 copper_;
  ::google::protobuf::uint32 gold_;
  ::google::protobuf::uint32 jade_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_one_5fkey_5fsell_5fguaxiang_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_one_5fkey_5fsell_5fguaxiang_2eproto();
  #endif
  friend void protobuf_AssignDesc_one_5fkey_5fsell_5fguaxiang_2eproto();
  friend void protobuf_ShutdownFile_one_5fkey_5fsell_5fguaxiang_2eproto();

  void InitAsDefaultInstance();
  static OneKeySellGuaxiangResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// OneKeySellGuaxiangRequest

// required .sanguo.MsgID msgID = 1;
inline bool OneKeySellGuaxiangRequest::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OneKeySellGuaxiangRequest::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OneKeySellGuaxiangRequest::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OneKeySellGuaxiangRequest::clear_msgid() {
  msgid_ = 1;
  clear_has_msgid();
}
inline ::sanguo::MsgID OneKeySellGuaxiangRequest::msgid() const {
  return static_cast< ::sanguo::MsgID >(msgid_);
}
inline void OneKeySellGuaxiangRequest::set_msgid(::sanguo::MsgID value) {
  assert(::sanguo::MsgID_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// repeated .sanguo.MsgGuaxiangGoods sellGuaxiang = 2;
inline int OneKeySellGuaxiangRequest::sellguaxiang_size() const {
  return sellguaxiang_.size();
}
inline void OneKeySellGuaxiangRequest::clear_sellguaxiang() {
  sellguaxiang_.Clear();
}
inline const ::sanguo::MsgGuaxiangGoods& OneKeySellGuaxiangRequest::sellguaxiang(int index) const {
  return sellguaxiang_.Get(index);
}
inline ::sanguo::MsgGuaxiangGoods* OneKeySellGuaxiangRequest::mutable_sellguaxiang(int index) {
  return sellguaxiang_.Mutable(index);
}
inline ::sanguo::MsgGuaxiangGoods* OneKeySellGuaxiangRequest::add_sellguaxiang() {
  return sellguaxiang_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sanguo::MsgGuaxiangGoods >&
OneKeySellGuaxiangRequest::sellguaxiang() const {
  return sellguaxiang_;
}
inline ::google::protobuf::RepeatedPtrField< ::sanguo::MsgGuaxiangGoods >*
OneKeySellGuaxiangRequest::mutable_sellguaxiang() {
  return &sellguaxiang_;
}

// required sint32 delIndex = 3;
inline bool OneKeySellGuaxiangRequest::has_delindex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OneKeySellGuaxiangRequest::set_has_delindex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OneKeySellGuaxiangRequest::clear_has_delindex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OneKeySellGuaxiangRequest::clear_delindex() {
  delindex_ = 0;
  clear_has_delindex();
}
inline ::google::protobuf::int32 OneKeySellGuaxiangRequest::delindex() const {
  return delindex_;
}
inline void OneKeySellGuaxiangRequest::set_delindex(::google::protobuf::int32 value) {
  set_has_delindex();
  delindex_ = value;
}

// -------------------------------------------------------------------

// OneKeySellGuaxiangResponse

// required .sanguo.MsgID msgID = 1;
inline bool OneKeySellGuaxiangResponse::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OneKeySellGuaxiangResponse::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OneKeySellGuaxiangResponse::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OneKeySellGuaxiangResponse::clear_msgid() {
  msgid_ = 1;
  clear_has_msgid();
}
inline ::sanguo::MsgID OneKeySellGuaxiangResponse::msgid() const {
  return static_cast< ::sanguo::MsgID >(msgid_);
}
inline void OneKeySellGuaxiangResponse::set_msgid(::sanguo::MsgID value) {
  assert(::sanguo::MsgID_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// required .sanguo.StatusCode status = 2;
inline bool OneKeySellGuaxiangResponse::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OneKeySellGuaxiangResponse::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OneKeySellGuaxiangResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OneKeySellGuaxiangResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::sanguo::StatusCode OneKeySellGuaxiangResponse::status() const {
  return static_cast< ::sanguo::StatusCode >(status_);
}
inline void OneKeySellGuaxiangResponse::set_status(::sanguo::StatusCode value) {
  assert(::sanguo::StatusCode_IsValid(value));
  set_has_status();
  status_ = value;
}

// optional uint64 copper = 3;
inline bool OneKeySellGuaxiangResponse::has_copper() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OneKeySellGuaxiangResponse::set_has_copper() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OneKeySellGuaxiangResponse::clear_has_copper() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OneKeySellGuaxiangResponse::clear_copper() {
  copper_ = GOOGLE_ULONGLONG(0);
  clear_has_copper();
}
inline ::google::protobuf::uint64 OneKeySellGuaxiangResponse::copper() const {
  return copper_;
}
inline void OneKeySellGuaxiangResponse::set_copper(::google::protobuf::uint64 value) {
  set_has_copper();
  copper_ = value;
}

// optional uint32 gold = 4;
inline bool OneKeySellGuaxiangResponse::has_gold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OneKeySellGuaxiangResponse::set_has_gold() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OneKeySellGuaxiangResponse::clear_has_gold() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OneKeySellGuaxiangResponse::clear_gold() {
  gold_ = 0u;
  clear_has_gold();
}
inline ::google::protobuf::uint32 OneKeySellGuaxiangResponse::gold() const {
  return gold_;
}
inline void OneKeySellGuaxiangResponse::set_gold(::google::protobuf::uint32 value) {
  set_has_gold();
  gold_ = value;
}

// optional uint32 jade = 5;
inline bool OneKeySellGuaxiangResponse::has_jade() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OneKeySellGuaxiangResponse::set_has_jade() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OneKeySellGuaxiangResponse::clear_has_jade() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OneKeySellGuaxiangResponse::clear_jade() {
  jade_ = 0u;
  clear_has_jade();
}
inline ::google::protobuf::uint32 OneKeySellGuaxiangResponse::jade() const {
  return jade_;
}
inline void OneKeySellGuaxiangResponse::set_jade(::google::protobuf::uint32 value) {
  set_has_jade();
  jade_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sanguo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_one_5fkey_5fsell_5fguaxiang_2eproto__INCLUDED
