// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: init_daily_reward_data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "init_daily_reward_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace sanguo {

void protobuf_ShutdownFile_init_5fdaily_5freward_5fdata_2eproto() {
  delete InitDailyRewardDataRequest::default_instance_;
  delete InitDailyRewardDataResponse::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_init_5fdaily_5freward_5fdata_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_init_5fdaily_5freward_5fdata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::sanguo::protobuf_AddDesc_msg_5fid_2eproto();
  ::sanguo::protobuf_AddDesc_msg_5fstatus_5fcode_2eproto();
  InitDailyRewardDataRequest::default_instance_ = new InitDailyRewardDataRequest();
  InitDailyRewardDataResponse::default_instance_ = new InitDailyRewardDataResponse();
  InitDailyRewardDataRequest::default_instance_->InitAsDefaultInstance();
  InitDailyRewardDataResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_init_5fdaily_5freward_5fdata_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_init_5fdaily_5freward_5fdata_2eproto_once_);
void protobuf_AddDesc_init_5fdaily_5freward_5fdata_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_init_5fdaily_5freward_5fdata_2eproto_once_,
                 &protobuf_AddDesc_init_5fdaily_5freward_5fdata_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_init_5fdaily_5freward_5fdata_2eproto {
  StaticDescriptorInitializer_init_5fdaily_5freward_5fdata_2eproto() {
    protobuf_AddDesc_init_5fdaily_5freward_5fdata_2eproto();
  }
} static_descriptor_initializer_init_5fdaily_5freward_5fdata_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int InitDailyRewardDataRequest::kMsgIDFieldNumber;
#endif  // !_MSC_VER

InitDailyRewardDataRequest::InitDailyRewardDataRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void InitDailyRewardDataRequest::InitAsDefaultInstance() {
}

InitDailyRewardDataRequest::InitDailyRewardDataRequest(const InitDailyRewardDataRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void InitDailyRewardDataRequest::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InitDailyRewardDataRequest::~InitDailyRewardDataRequest() {
  SharedDtor();
}

void InitDailyRewardDataRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void InitDailyRewardDataRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const InitDailyRewardDataRequest& InitDailyRewardDataRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_init_5fdaily_5freward_5fdata_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_init_5fdaily_5freward_5fdata_2eproto();
#endif
  return *default_instance_;
}

InitDailyRewardDataRequest* InitDailyRewardDataRequest::default_instance_ = NULL;

InitDailyRewardDataRequest* InitDailyRewardDataRequest::New() const {
  return new InitDailyRewardDataRequest;
}

void InitDailyRewardDataRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool InitDailyRewardDataRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sanguo.MsgID msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::sanguo::MsgID >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InitDailyRewardDataRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .sanguo.MsgID msgID = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

}

int InitDailyRewardDataRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .sanguo.MsgID msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitDailyRewardDataRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InitDailyRewardDataRequest*>(&from));
}

void InitDailyRewardDataRequest::MergeFrom(const InitDailyRewardDataRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
}

void InitDailyRewardDataRequest::CopyFrom(const InitDailyRewardDataRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitDailyRewardDataRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void InitDailyRewardDataRequest::Swap(InitDailyRewardDataRequest* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string InitDailyRewardDataRequest::GetTypeName() const {
  return "sanguo.InitDailyRewardDataRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int InitDailyRewardDataResponse::kMsgIDFieldNumber;
const int InitDailyRewardDataResponse::kStatusFieldNumber;
const int InitDailyRewardDataResponse::kDailyRewardProcessFieldNumber;
const int InitDailyRewardDataResponse::kDailyRewardedTodayFieldNumber;
const int InitDailyRewardDataResponse::kDailyVipRewardedTodayFieldNumber;
const int InitDailyRewardDataResponse::kDailyGuanjieRewardedTodayFieldNumber;
const int InitDailyRewardDataResponse::kDailyRewardRecordFieldNumber;
#endif  // !_MSC_VER

InitDailyRewardDataResponse::InitDailyRewardDataResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void InitDailyRewardDataResponse::InitAsDefaultInstance() {
}

InitDailyRewardDataResponse::InitDailyRewardDataResponse(const InitDailyRewardDataResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void InitDailyRewardDataResponse::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 1;
  status_ = 0;
  dailyrewardprocess_ = 0u;
  dailyrewardedtoday_ = 0u;
  dailyviprewardedtoday_ = 0u;
  dailyguanjierewardedtoday_ = 0u;
  dailyrewardrecord_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InitDailyRewardDataResponse::~InitDailyRewardDataResponse() {
  SharedDtor();
}

void InitDailyRewardDataResponse::SharedDtor() {
  if (dailyrewardrecord_ != &::google::protobuf::internal::kEmptyString) {
    delete dailyrewardrecord_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void InitDailyRewardDataResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const InitDailyRewardDataResponse& InitDailyRewardDataResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_init_5fdaily_5freward_5fdata_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_init_5fdaily_5freward_5fdata_2eproto();
#endif
  return *default_instance_;
}

InitDailyRewardDataResponse* InitDailyRewardDataResponse::default_instance_ = NULL;

InitDailyRewardDataResponse* InitDailyRewardDataResponse::New() const {
  return new InitDailyRewardDataResponse;
}

void InitDailyRewardDataResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 1;
    status_ = 0;
    dailyrewardprocess_ = 0u;
    dailyrewardedtoday_ = 0u;
    dailyviprewardedtoday_ = 0u;
    dailyguanjierewardedtoday_ = 0u;
    if (has_dailyrewardrecord()) {
      if (dailyrewardrecord_ != &::google::protobuf::internal::kEmptyString) {
        dailyrewardrecord_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool InitDailyRewardDataResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sanguo.MsgID msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::sanguo::MsgID >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .sanguo.StatusCode status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::StatusCode_IsValid(value)) {
            set_status(static_cast< ::sanguo::StatusCode >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dailyRewardProcess;
        break;
      }

      // optional uint32 dailyRewardProcess = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dailyRewardProcess:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dailyrewardprocess_)));
          set_has_dailyrewardprocess();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dailyRewardedToday;
        break;
      }

      // optional uint32 dailyRewardedToday = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dailyRewardedToday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dailyrewardedtoday_)));
          set_has_dailyrewardedtoday();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_dailyVipRewardedToday;
        break;
      }

      // optional uint32 dailyVipRewardedToday = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dailyVipRewardedToday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dailyviprewardedtoday_)));
          set_has_dailyviprewardedtoday();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_dailyGuanjieRewardedToday;
        break;
      }

      // optional uint32 dailyGuanjieRewardedToday = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dailyGuanjieRewardedToday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dailyguanjierewardedtoday_)));
          set_has_dailyguanjierewardedtoday();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_dailyRewardRecord;
        break;
      }

      // optional string dailyRewardRecord = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dailyRewardRecord:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dailyrewardrecord()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InitDailyRewardDataResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .sanguo.MsgID msgID = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // required .sanguo.StatusCode status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // optional uint32 dailyRewardProcess = 3;
  if (has_dailyrewardprocess()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dailyrewardprocess(), output);
  }

  // optional uint32 dailyRewardedToday = 4;
  if (has_dailyrewardedtoday()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dailyrewardedtoday(), output);
  }

  // optional uint32 dailyVipRewardedToday = 5;
  if (has_dailyviprewardedtoday()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->dailyviprewardedtoday(), output);
  }

  // optional uint32 dailyGuanjieRewardedToday = 6;
  if (has_dailyguanjierewardedtoday()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->dailyguanjierewardedtoday(), output);
  }

  // optional string dailyRewardRecord = 7;
  if (has_dailyrewardrecord()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->dailyrewardrecord(), output);
  }

}

int InitDailyRewardDataResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .sanguo.MsgID msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // required .sanguo.StatusCode status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional uint32 dailyRewardProcess = 3;
    if (has_dailyrewardprocess()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dailyrewardprocess());
    }

    // optional uint32 dailyRewardedToday = 4;
    if (has_dailyrewardedtoday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dailyrewardedtoday());
    }

    // optional uint32 dailyVipRewardedToday = 5;
    if (has_dailyviprewardedtoday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dailyviprewardedtoday());
    }

    // optional uint32 dailyGuanjieRewardedToday = 6;
    if (has_dailyguanjierewardedtoday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dailyguanjierewardedtoday());
    }

    // optional string dailyRewardRecord = 7;
    if (has_dailyrewardrecord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dailyrewardrecord());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitDailyRewardDataResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InitDailyRewardDataResponse*>(&from));
}

void InitDailyRewardDataResponse::MergeFrom(const InitDailyRewardDataResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_dailyrewardprocess()) {
      set_dailyrewardprocess(from.dailyrewardprocess());
    }
    if (from.has_dailyrewardedtoday()) {
      set_dailyrewardedtoday(from.dailyrewardedtoday());
    }
    if (from.has_dailyviprewardedtoday()) {
      set_dailyviprewardedtoday(from.dailyviprewardedtoday());
    }
    if (from.has_dailyguanjierewardedtoday()) {
      set_dailyguanjierewardedtoday(from.dailyguanjierewardedtoday());
    }
    if (from.has_dailyrewardrecord()) {
      set_dailyrewardrecord(from.dailyrewardrecord());
    }
  }
}

void InitDailyRewardDataResponse::CopyFrom(const InitDailyRewardDataResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitDailyRewardDataResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void InitDailyRewardDataResponse::Swap(InitDailyRewardDataResponse* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(status_, other->status_);
    std::swap(dailyrewardprocess_, other->dailyrewardprocess_);
    std::swap(dailyrewardedtoday_, other->dailyrewardedtoday_);
    std::swap(dailyviprewardedtoday_, other->dailyviprewardedtoday_);
    std::swap(dailyguanjierewardedtoday_, other->dailyguanjierewardedtoday_);
    std::swap(dailyrewardrecord_, other->dailyrewardrecord_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string InitDailyRewardDataResponse::GetTypeName() const {
  return "sanguo.InitDailyRewardDataResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sanguo

// @@protoc_insertion_point(global_scope)
