// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: one_key_get_guaxiang.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "one_key_get_guaxiang.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace sanguo {

void protobuf_ShutdownFile_one_5fkey_5fget_5fguaxiang_2eproto() {
  delete OneKeyGetGuaxiangRequest::default_instance_;
  delete OneKeyGetGuaxiangResponse::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_one_5fkey_5fget_5fguaxiang_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_one_5fkey_5fget_5fguaxiang_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::sanguo::protobuf_AddDesc_msg_5fid_2eproto();
  ::sanguo::protobuf_AddDesc_msg_5fstatus_5fcode_2eproto();
  ::sanguo::protobuf_AddDesc_role_5fguaxiang_5fgoods_2eproto();
  OneKeyGetGuaxiangRequest::default_instance_ = new OneKeyGetGuaxiangRequest();
  OneKeyGetGuaxiangResponse::default_instance_ = new OneKeyGetGuaxiangResponse();
  OneKeyGetGuaxiangRequest::default_instance_->InitAsDefaultInstance();
  OneKeyGetGuaxiangResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_one_5fkey_5fget_5fguaxiang_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_one_5fkey_5fget_5fguaxiang_2eproto_once_);
void protobuf_AddDesc_one_5fkey_5fget_5fguaxiang_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_one_5fkey_5fget_5fguaxiang_2eproto_once_,
                 &protobuf_AddDesc_one_5fkey_5fget_5fguaxiang_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_one_5fkey_5fget_5fguaxiang_2eproto {
  StaticDescriptorInitializer_one_5fkey_5fget_5fguaxiang_2eproto() {
    protobuf_AddDesc_one_5fkey_5fget_5fguaxiang_2eproto();
  }
} static_descriptor_initializer_one_5fkey_5fget_5fguaxiang_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int OneKeyGetGuaxiangRequest::kMsgIDFieldNumber;
const int OneKeyGetGuaxiangRequest::kGuaxiangAttrIDFieldNumber;
const int OneKeyGetGuaxiangRequest::kDelIndexFieldNumber;
#endif  // !_MSC_VER

OneKeyGetGuaxiangRequest::OneKeyGetGuaxiangRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void OneKeyGetGuaxiangRequest::InitAsDefaultInstance() {
}

OneKeyGetGuaxiangRequest::OneKeyGetGuaxiangRequest(const OneKeyGetGuaxiangRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void OneKeyGetGuaxiangRequest::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 1;
  delindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OneKeyGetGuaxiangRequest::~OneKeyGetGuaxiangRequest() {
  SharedDtor();
}

void OneKeyGetGuaxiangRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void OneKeyGetGuaxiangRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OneKeyGetGuaxiangRequest& OneKeyGetGuaxiangRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_one_5fkey_5fget_5fguaxiang_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_one_5fkey_5fget_5fguaxiang_2eproto();
#endif
  return *default_instance_;
}

OneKeyGetGuaxiangRequest* OneKeyGetGuaxiangRequest::default_instance_ = NULL;

OneKeyGetGuaxiangRequest* OneKeyGetGuaxiangRequest::New() const {
  return new OneKeyGetGuaxiangRequest;
}

void OneKeyGetGuaxiangRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 1;
    delindex_ = 0;
  }
  guaxiangattrid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool OneKeyGetGuaxiangRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sanguo.MsgID msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::sanguo::MsgID >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_guaxiangAttrID;
        break;
      }

      // repeated uint32 guaxiangAttrID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guaxiangAttrID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_guaxiangattrid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_guaxiangattrid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_guaxiangAttrID;
        if (input->ExpectTag(24)) goto parse_delIndex;
        break;
      }

      // required sint32 delIndex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &delindex_)));
          set_has_delindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OneKeyGetGuaxiangRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .sanguo.MsgID msgID = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // repeated uint32 guaxiangAttrID = 2;
  for (int i = 0; i < this->guaxiangattrid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->guaxiangattrid(i), output);
  }

  // required sint32 delIndex = 3;
  if (has_delindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->delindex(), output);
  }

}

int OneKeyGetGuaxiangRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .sanguo.MsgID msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // required sint32 delIndex = 3;
    if (has_delindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->delindex());
    }

  }
  // repeated uint32 guaxiangAttrID = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->guaxiangattrid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->guaxiangattrid(i));
    }
    total_size += 1 * this->guaxiangattrid_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OneKeyGetGuaxiangRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OneKeyGetGuaxiangRequest*>(&from));
}

void OneKeyGetGuaxiangRequest::MergeFrom(const OneKeyGetGuaxiangRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  guaxiangattrid_.MergeFrom(from.guaxiangattrid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_delindex()) {
      set_delindex(from.delindex());
    }
  }
}

void OneKeyGetGuaxiangRequest::CopyFrom(const OneKeyGetGuaxiangRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneKeyGetGuaxiangRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void OneKeyGetGuaxiangRequest::Swap(OneKeyGetGuaxiangRequest* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    guaxiangattrid_.Swap(&other->guaxiangattrid_);
    std::swap(delindex_, other->delindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string OneKeyGetGuaxiangRequest::GetTypeName() const {
  return "sanguo.OneKeyGetGuaxiangRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int OneKeyGetGuaxiangResponse::kMsgIDFieldNumber;
const int OneKeyGetGuaxiangResponse::kStatusFieldNumber;
const int OneKeyGetGuaxiangResponse::kGuaxiangBagFieldNumber;
const int OneKeyGetGuaxiangResponse::kGuaxiangAttrIDFieldNumber;
#endif  // !_MSC_VER

OneKeyGetGuaxiangResponse::OneKeyGetGuaxiangResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void OneKeyGetGuaxiangResponse::InitAsDefaultInstance() {
}

OneKeyGetGuaxiangResponse::OneKeyGetGuaxiangResponse(const OneKeyGetGuaxiangResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void OneKeyGetGuaxiangResponse::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 1;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OneKeyGetGuaxiangResponse::~OneKeyGetGuaxiangResponse() {
  SharedDtor();
}

void OneKeyGetGuaxiangResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void OneKeyGetGuaxiangResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OneKeyGetGuaxiangResponse& OneKeyGetGuaxiangResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_one_5fkey_5fget_5fguaxiang_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_one_5fkey_5fget_5fguaxiang_2eproto();
#endif
  return *default_instance_;
}

OneKeyGetGuaxiangResponse* OneKeyGetGuaxiangResponse::default_instance_ = NULL;

OneKeyGetGuaxiangResponse* OneKeyGetGuaxiangResponse::New() const {
  return new OneKeyGetGuaxiangResponse;
}

void OneKeyGetGuaxiangResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 1;
    status_ = 0;
  }
  guaxiangbag_.Clear();
  guaxiangattrid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool OneKeyGetGuaxiangResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sanguo.MsgID msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::sanguo::MsgID >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .sanguo.StatusCode status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::StatusCode_IsValid(value)) {
            set_status(static_cast< ::sanguo::StatusCode >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_guaxiangBag;
        break;
      }

      // repeated .sanguo.MsgGuaxiangGoods guaxiangBag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guaxiangBag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_guaxiangbag()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_guaxiangBag;
        if (input->ExpectTag(32)) goto parse_guaxiangAttrID;
        break;
      }

      // repeated uint32 guaxiangAttrID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guaxiangAttrID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_guaxiangattrid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_guaxiangattrid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_guaxiangAttrID;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OneKeyGetGuaxiangResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .sanguo.MsgID msgID = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // required .sanguo.StatusCode status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // repeated .sanguo.MsgGuaxiangGoods guaxiangBag = 3;
  for (int i = 0; i < this->guaxiangbag_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->guaxiangbag(i), output);
  }

  // repeated uint32 guaxiangAttrID = 4;
  for (int i = 0; i < this->guaxiangattrid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->guaxiangattrid(i), output);
  }

}

int OneKeyGetGuaxiangResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .sanguo.MsgID msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // required .sanguo.StatusCode status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  // repeated .sanguo.MsgGuaxiangGoods guaxiangBag = 3;
  total_size += 1 * this->guaxiangbag_size();
  for (int i = 0; i < this->guaxiangbag_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guaxiangbag(i));
  }

  // repeated uint32 guaxiangAttrID = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->guaxiangattrid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->guaxiangattrid(i));
    }
    total_size += 1 * this->guaxiangattrid_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OneKeyGetGuaxiangResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OneKeyGetGuaxiangResponse*>(&from));
}

void OneKeyGetGuaxiangResponse::MergeFrom(const OneKeyGetGuaxiangResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  guaxiangbag_.MergeFrom(from.guaxiangbag_);
  guaxiangattrid_.MergeFrom(from.guaxiangattrid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
}

void OneKeyGetGuaxiangResponse::CopyFrom(const OneKeyGetGuaxiangResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneKeyGetGuaxiangResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < guaxiangbag_size(); i++) {
    if (!this->guaxiangbag(i).IsInitialized()) return false;
  }
  return true;
}

void OneKeyGetGuaxiangResponse::Swap(OneKeyGetGuaxiangResponse* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(status_, other->status_);
    guaxiangbag_.Swap(&other->guaxiangbag_);
    guaxiangattrid_.Swap(&other->guaxiangattrid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string OneKeyGetGuaxiangResponse::GetTypeName() const {
  return "sanguo.OneKeyGetGuaxiangResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sanguo

// @@protoc_insertion_point(global_scope)
