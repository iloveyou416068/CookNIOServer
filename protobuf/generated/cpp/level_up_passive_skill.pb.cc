// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: level_up_passive_skill.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "level_up_passive_skill.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace sanguo {

void protobuf_ShutdownFile_level_5fup_5fpassive_5fskill_2eproto() {
  delete LevelUpPassiveSkillRequest::default_instance_;
  delete LevelUpPassiveSkillResponse::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_level_5fup_5fpassive_5fskill_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_level_5fup_5fpassive_5fskill_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::sanguo::protobuf_AddDesc_msg_5fid_2eproto();
  ::sanguo::protobuf_AddDesc_msg_5fstatus_5fcode_2eproto();
  ::sanguo::protobuf_AddDesc_role_5fcooldown_2eproto();
  LevelUpPassiveSkillRequest::default_instance_ = new LevelUpPassiveSkillRequest();
  LevelUpPassiveSkillResponse::default_instance_ = new LevelUpPassiveSkillResponse();
  LevelUpPassiveSkillRequest::default_instance_->InitAsDefaultInstance();
  LevelUpPassiveSkillResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_level_5fup_5fpassive_5fskill_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_level_5fup_5fpassive_5fskill_2eproto_once_);
void protobuf_AddDesc_level_5fup_5fpassive_5fskill_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_level_5fup_5fpassive_5fskill_2eproto_once_,
                 &protobuf_AddDesc_level_5fup_5fpassive_5fskill_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_level_5fup_5fpassive_5fskill_2eproto {
  StaticDescriptorInitializer_level_5fup_5fpassive_5fskill_2eproto() {
    protobuf_AddDesc_level_5fup_5fpassive_5fskill_2eproto();
  }
} static_descriptor_initializer_level_5fup_5fpassive_5fskill_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int LevelUpPassiveSkillRequest::kMsgIDFieldNumber;
const int LevelUpPassiveSkillRequest::kSkillIDFieldNumber;
#endif  // !_MSC_VER

LevelUpPassiveSkillRequest::LevelUpPassiveSkillRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void LevelUpPassiveSkillRequest::InitAsDefaultInstance() {
}

LevelUpPassiveSkillRequest::LevelUpPassiveSkillRequest(const LevelUpPassiveSkillRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void LevelUpPassiveSkillRequest::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 1;
  skillid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LevelUpPassiveSkillRequest::~LevelUpPassiveSkillRequest() {
  SharedDtor();
}

void LevelUpPassiveSkillRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LevelUpPassiveSkillRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LevelUpPassiveSkillRequest& LevelUpPassiveSkillRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_level_5fup_5fpassive_5fskill_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_level_5fup_5fpassive_5fskill_2eproto();
#endif
  return *default_instance_;
}

LevelUpPassiveSkillRequest* LevelUpPassiveSkillRequest::default_instance_ = NULL;

LevelUpPassiveSkillRequest* LevelUpPassiveSkillRequest::New() const {
  return new LevelUpPassiveSkillRequest;
}

void LevelUpPassiveSkillRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 1;
    skillid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool LevelUpPassiveSkillRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sanguo.MsgID msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::sanguo::MsgID >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skillID;
        break;
      }

      // required uint32 skillID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LevelUpPassiveSkillRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .sanguo.MsgID msgID = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // required uint32 skillID = 2;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->skillid(), output);
  }

}

int LevelUpPassiveSkillRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .sanguo.MsgID msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // required uint32 skillID = 2;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LevelUpPassiveSkillRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LevelUpPassiveSkillRequest*>(&from));
}

void LevelUpPassiveSkillRequest::MergeFrom(const LevelUpPassiveSkillRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
  }
}

void LevelUpPassiveSkillRequest::CopyFrom(const LevelUpPassiveSkillRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LevelUpPassiveSkillRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LevelUpPassiveSkillRequest::Swap(LevelUpPassiveSkillRequest* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(skillid_, other->skillid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LevelUpPassiveSkillRequest::GetTypeName() const {
  return "sanguo.LevelUpPassiveSkillRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int LevelUpPassiveSkillResponse::kMsgIDFieldNumber;
const int LevelUpPassiveSkillResponse::kStatusFieldNumber;
const int LevelUpPassiveSkillResponse::kCdFieldNumber;
#endif  // !_MSC_VER

LevelUpPassiveSkillResponse::LevelUpPassiveSkillResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void LevelUpPassiveSkillResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  cd_ = const_cast< ::sanguo::MsgRoleCooldown*>(
      ::sanguo::MsgRoleCooldown::internal_default_instance());
#else
  cd_ = const_cast< ::sanguo::MsgRoleCooldown*>(&::sanguo::MsgRoleCooldown::default_instance());
#endif
}

LevelUpPassiveSkillResponse::LevelUpPassiveSkillResponse(const LevelUpPassiveSkillResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void LevelUpPassiveSkillResponse::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 1;
  status_ = 0;
  cd_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LevelUpPassiveSkillResponse::~LevelUpPassiveSkillResponse() {
  SharedDtor();
}

void LevelUpPassiveSkillResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete cd_;
  }
}

void LevelUpPassiveSkillResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LevelUpPassiveSkillResponse& LevelUpPassiveSkillResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_level_5fup_5fpassive_5fskill_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_level_5fup_5fpassive_5fskill_2eproto();
#endif
  return *default_instance_;
}

LevelUpPassiveSkillResponse* LevelUpPassiveSkillResponse::default_instance_ = NULL;

LevelUpPassiveSkillResponse* LevelUpPassiveSkillResponse::New() const {
  return new LevelUpPassiveSkillResponse;
}

void LevelUpPassiveSkillResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 1;
    status_ = 0;
    if (has_cd()) {
      if (cd_ != NULL) cd_->::sanguo::MsgRoleCooldown::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool LevelUpPassiveSkillResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sanguo.MsgID msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::sanguo::MsgID >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .sanguo.StatusCode status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::StatusCode_IsValid(value)) {
            set_status(static_cast< ::sanguo::StatusCode >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cd;
        break;
      }

      // optional .sanguo.MsgRoleCooldown cd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LevelUpPassiveSkillResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .sanguo.MsgID msgID = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // required .sanguo.StatusCode status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // optional .sanguo.MsgRoleCooldown cd = 3;
  if (has_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->cd(), output);
  }

}

int LevelUpPassiveSkillResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .sanguo.MsgID msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // required .sanguo.StatusCode status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional .sanguo.MsgRoleCooldown cd = 3;
    if (has_cd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cd());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LevelUpPassiveSkillResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LevelUpPassiveSkillResponse*>(&from));
}

void LevelUpPassiveSkillResponse::MergeFrom(const LevelUpPassiveSkillResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_cd()) {
      mutable_cd()->::sanguo::MsgRoleCooldown::MergeFrom(from.cd());
    }
  }
}

void LevelUpPassiveSkillResponse::CopyFrom(const LevelUpPassiveSkillResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LevelUpPassiveSkillResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_cd()) {
    if (!this->cd().IsInitialized()) return false;
  }
  return true;
}

void LevelUpPassiveSkillResponse::Swap(LevelUpPassiveSkillResponse* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(status_, other->status_);
    std::swap(cd_, other->cd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LevelUpPassiveSkillResponse::GetTypeName() const {
  return "sanguo.LevelUpPassiveSkillResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sanguo

// @@protoc_insertion_point(global_scope)
