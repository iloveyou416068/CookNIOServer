// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sweep_dungeon_award.proto

#ifndef PROTOBUF_sweep_5fdungeon_5faward_2eproto__INCLUDED
#define PROTOBUF_sweep_5fdungeon_5faward_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "role_dungeon_reward.pb.h"
#include "role_gamble_card_reward.pb.h"
// @@protoc_insertion_point(includes)

namespace sanguo {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_sweep_5fdungeon_5faward_2eproto();
void protobuf_AssignDesc_sweep_5fdungeon_5faward_2eproto();
void protobuf_ShutdownFile_sweep_5fdungeon_5faward_2eproto();

class MsgSweepDungeonAward;

// ===================================================================

class MsgSweepDungeonAward : public ::google::protobuf::MessageLite {
 public:
  MsgSweepDungeonAward();
  virtual ~MsgSweepDungeonAward();

  MsgSweepDungeonAward(const MsgSweepDungeonAward& from);

  inline MsgSweepDungeonAward& operator=(const MsgSweepDungeonAward& from) {
    CopyFrom(from);
    return *this;
  }

  static const MsgSweepDungeonAward& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const MsgSweepDungeonAward* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(MsgSweepDungeonAward* other);

  // implements Message ----------------------------------------------

  MsgSweepDungeonAward* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const MsgSweepDungeonAward& from);
  void MergeFrom(const MsgSweepDungeonAward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .sanguo.MsgGambleCardReward cardReward = 1;
  inline int cardreward_size() const;
  inline void clear_cardreward();
  static const int kCardRewardFieldNumber = 1;
  inline const ::sanguo::MsgGambleCardReward& cardreward(int index) const;
  inline ::sanguo::MsgGambleCardReward* mutable_cardreward(int index);
  inline ::sanguo::MsgGambleCardReward* add_cardreward();
  inline const ::google::protobuf::RepeatedPtrField< ::sanguo::MsgGambleCardReward >&
      cardreward() const;
  inline ::google::protobuf::RepeatedPtrField< ::sanguo::MsgGambleCardReward >*
      mutable_cardreward();

  // optional .sanguo.MsgDungeonReward dungeonReward = 2;
  inline bool has_dungeonreward() const;
  inline void clear_dungeonreward();
  static const int kDungeonRewardFieldNumber = 2;
  inline const ::sanguo::MsgDungeonReward& dungeonreward() const;
  inline ::sanguo::MsgDungeonReward* mutable_dungeonreward();
  inline ::sanguo::MsgDungeonReward* release_dungeonreward();
  inline void set_allocated_dungeonreward(::sanguo::MsgDungeonReward* dungeonreward);

  // @@protoc_insertion_point(class_scope:sanguo.MsgSweepDungeonAward)
 private:
  inline void set_has_dungeonreward();
  inline void clear_has_dungeonreward();

  ::google::protobuf::RepeatedPtrField< ::sanguo::MsgGambleCardReward > cardreward_;
  ::sanguo::MsgDungeonReward* dungeonreward_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_sweep_5fdungeon_5faward_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_sweep_5fdungeon_5faward_2eproto();
  #endif
  friend void protobuf_AssignDesc_sweep_5fdungeon_5faward_2eproto();
  friend void protobuf_ShutdownFile_sweep_5fdungeon_5faward_2eproto();

  void InitAsDefaultInstance();
  static MsgSweepDungeonAward* default_instance_;
};
// ===================================================================


// ===================================================================

// MsgSweepDungeonAward

// repeated .sanguo.MsgGambleCardReward cardReward = 1;
inline int MsgSweepDungeonAward::cardreward_size() const {
  return cardreward_.size();
}
inline void MsgSweepDungeonAward::clear_cardreward() {
  cardreward_.Clear();
}
inline const ::sanguo::MsgGambleCardReward& MsgSweepDungeonAward::cardreward(int index) const {
  return cardreward_.Get(index);
}
inline ::sanguo::MsgGambleCardReward* MsgSweepDungeonAward::mutable_cardreward(int index) {
  return cardreward_.Mutable(index);
}
inline ::sanguo::MsgGambleCardReward* MsgSweepDungeonAward::add_cardreward() {
  return cardreward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sanguo::MsgGambleCardReward >&
MsgSweepDungeonAward::cardreward() const {
  return cardreward_;
}
inline ::google::protobuf::RepeatedPtrField< ::sanguo::MsgGambleCardReward >*
MsgSweepDungeonAward::mutable_cardreward() {
  return &cardreward_;
}

// optional .sanguo.MsgDungeonReward dungeonReward = 2;
inline bool MsgSweepDungeonAward::has_dungeonreward() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgSweepDungeonAward::set_has_dungeonreward() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgSweepDungeonAward::clear_has_dungeonreward() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgSweepDungeonAward::clear_dungeonreward() {
  if (dungeonreward_ != NULL) dungeonreward_->::sanguo::MsgDungeonReward::Clear();
  clear_has_dungeonreward();
}
inline const ::sanguo::MsgDungeonReward& MsgSweepDungeonAward::dungeonreward() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return dungeonreward_ != NULL ? *dungeonreward_ : *default_instance().dungeonreward_;
#else
  return dungeonreward_ != NULL ? *dungeonreward_ : *default_instance_->dungeonreward_;
#endif
}
inline ::sanguo::MsgDungeonReward* MsgSweepDungeonAward::mutable_dungeonreward() {
  set_has_dungeonreward();
  if (dungeonreward_ == NULL) dungeonreward_ = new ::sanguo::MsgDungeonReward;
  return dungeonreward_;
}
inline ::sanguo::MsgDungeonReward* MsgSweepDungeonAward::release_dungeonreward() {
  clear_has_dungeonreward();
  ::sanguo::MsgDungeonReward* temp = dungeonreward_;
  dungeonreward_ = NULL;
  return temp;
}
inline void MsgSweepDungeonAward::set_allocated_dungeonreward(::sanguo::MsgDungeonReward* dungeonreward) {
  delete dungeonreward_;
  dungeonreward_ = dungeonreward;
  if (dungeonreward) {
    set_has_dungeonreward();
  } else {
    clear_has_dungeonreward();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sanguo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_sweep_5fdungeon_5faward_2eproto__INCLUDED
