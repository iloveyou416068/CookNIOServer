// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: roll_dice.proto

#ifndef PROTOBUF_roll_5fdice_2eproto__INCLUDED
#define PROTOBUF_roll_5fdice_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "msg_id.pb.h"
#include "msg_status_code.pb.h"
#include "role_gem_bag_goods.pb.h"
#include "role_bag_goods.pb.h"
#include "gift_info.pb.h"
// @@protoc_insertion_point(includes)

namespace sanguo {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_roll_5fdice_2eproto();
void protobuf_AssignDesc_roll_5fdice_2eproto();
void protobuf_ShutdownFile_roll_5fdice_2eproto();

class RollDiceRequest;
class RollDiceResponse;

// ===================================================================

class RollDiceRequest : public ::google::protobuf::MessageLite {
 public:
  RollDiceRequest();
  virtual ~RollDiceRequest();

  RollDiceRequest(const RollDiceRequest& from);

  inline RollDiceRequest& operator=(const RollDiceRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const RollDiceRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const RollDiceRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(RollDiceRequest* other);

  // implements Message ----------------------------------------------

  RollDiceRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const RollDiceRequest& from);
  void MergeFrom(const RollDiceRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .sanguo.MsgID msgID = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline ::sanguo::MsgID msgid() const;
  inline void set_msgid(::sanguo::MsgID value);

  // @@protoc_insertion_point(class_scope:sanguo.RollDiceRequest)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();

  int msgid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_roll_5fdice_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_roll_5fdice_2eproto();
  #endif
  friend void protobuf_AssignDesc_roll_5fdice_2eproto();
  friend void protobuf_ShutdownFile_roll_5fdice_2eproto();

  void InitAsDefaultInstance();
  static RollDiceRequest* default_instance_;
};
// -------------------------------------------------------------------

class RollDiceResponse : public ::google::protobuf::MessageLite {
 public:
  RollDiceResponse();
  virtual ~RollDiceResponse();

  RollDiceResponse(const RollDiceResponse& from);

  inline RollDiceResponse& operator=(const RollDiceResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const RollDiceResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const RollDiceResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(RollDiceResponse* other);

  // implements Message ----------------------------------------------

  RollDiceResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const RollDiceResponse& from);
  void MergeFrom(const RollDiceResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .sanguo.MsgID msgID = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline ::sanguo::MsgID msgid() const;
  inline void set_msgid(::sanguo::MsgID value);

  // required .sanguo.StatusCode status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::sanguo::StatusCode status() const;
  inline void set_status(::sanguo::StatusCode value);

  // optional uint32 leftRollCount = 3;
  inline bool has_leftrollcount() const;
  inline void clear_leftrollcount();
  static const int kLeftRollCountFieldNumber = 3;
  inline ::google::protobuf::uint32 leftrollcount() const;
  inline void set_leftrollcount(::google::protobuf::uint32 value);

  // optional uint32 dicePoint = 4;
  inline bool has_dicepoint() const;
  inline void clear_dicepoint();
  static const int kDicePointFieldNumber = 4;
  inline ::google::protobuf::uint32 dicepoint() const;
  inline void set_dicepoint(::google::protobuf::uint32 value);

  // optional uint32 rewardMultiple = 5;
  inline bool has_rewardmultiple() const;
  inline void clear_rewardmultiple();
  static const int kRewardMultipleFieldNumber = 5;
  inline ::google::protobuf::uint32 rewardmultiple() const;
  inline void set_rewardmultiple(::google::protobuf::uint32 value);

  // optional uint32 vipLeftRollCount = 6;
  inline bool has_vipleftrollcount() const;
  inline void clear_vipleftrollcount();
  static const int kVipLeftRollCountFieldNumber = 6;
  inline ::google::protobuf::uint32 vipleftrollcount() const;
  inline void set_vipleftrollcount(::google::protobuf::uint32 value);

  // optional .sanguo.MsgGiftInfo giftInfo = 7;
  inline bool has_giftinfo() const;
  inline void clear_giftinfo();
  static const int kGiftInfoFieldNumber = 7;
  inline const ::sanguo::MsgGiftInfo& giftinfo() const;
  inline ::sanguo::MsgGiftInfo* mutable_giftinfo();
  inline ::sanguo::MsgGiftInfo* release_giftinfo();
  inline void set_allocated_giftinfo(::sanguo::MsgGiftInfo* giftinfo);

  // @@protoc_insertion_point(class_scope:sanguo.RollDiceResponse)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_leftrollcount();
  inline void clear_has_leftrollcount();
  inline void set_has_dicepoint();
  inline void clear_has_dicepoint();
  inline void set_has_rewardmultiple();
  inline void clear_has_rewardmultiple();
  inline void set_has_vipleftrollcount();
  inline void clear_has_vipleftrollcount();
  inline void set_has_giftinfo();
  inline void clear_has_giftinfo();

  int msgid_;
  int status_;
  ::google::protobuf::uint32 leftrollcount_;
  ::google::protobuf::uint32 dicepoint_;
  ::google::protobuf::uint32 rewardmultiple_;
  ::google::protobuf::uint32 vipleftrollcount_;
  ::sanguo::MsgGiftInfo* giftinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_roll_5fdice_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_roll_5fdice_2eproto();
  #endif
  friend void protobuf_AssignDesc_roll_5fdice_2eproto();
  friend void protobuf_ShutdownFile_roll_5fdice_2eproto();

  void InitAsDefaultInstance();
  static RollDiceResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// RollDiceRequest

// required .sanguo.MsgID msgID = 1;
inline bool RollDiceRequest::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RollDiceRequest::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RollDiceRequest::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RollDiceRequest::clear_msgid() {
  msgid_ = 1;
  clear_has_msgid();
}
inline ::sanguo::MsgID RollDiceRequest::msgid() const {
  return static_cast< ::sanguo::MsgID >(msgid_);
}
inline void RollDiceRequest::set_msgid(::sanguo::MsgID value) {
  assert(::sanguo::MsgID_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// -------------------------------------------------------------------

// RollDiceResponse

// required .sanguo.MsgID msgID = 1;
inline bool RollDiceResponse::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RollDiceResponse::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RollDiceResponse::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RollDiceResponse::clear_msgid() {
  msgid_ = 1;
  clear_has_msgid();
}
inline ::sanguo::MsgID RollDiceResponse::msgid() const {
  return static_cast< ::sanguo::MsgID >(msgid_);
}
inline void RollDiceResponse::set_msgid(::sanguo::MsgID value) {
  assert(::sanguo::MsgID_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// required .sanguo.StatusCode status = 2;
inline bool RollDiceResponse::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RollDiceResponse::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RollDiceResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RollDiceResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::sanguo::StatusCode RollDiceResponse::status() const {
  return static_cast< ::sanguo::StatusCode >(status_);
}
inline void RollDiceResponse::set_status(::sanguo::StatusCode value) {
  assert(::sanguo::StatusCode_IsValid(value));
  set_has_status();
  status_ = value;
}

// optional uint32 leftRollCount = 3;
inline bool RollDiceResponse::has_leftrollcount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RollDiceResponse::set_has_leftrollcount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RollDiceResponse::clear_has_leftrollcount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RollDiceResponse::clear_leftrollcount() {
  leftrollcount_ = 0u;
  clear_has_leftrollcount();
}
inline ::google::protobuf::uint32 RollDiceResponse::leftrollcount() const {
  return leftrollcount_;
}
inline void RollDiceResponse::set_leftrollcount(::google::protobuf::uint32 value) {
  set_has_leftrollcount();
  leftrollcount_ = value;
}

// optional uint32 dicePoint = 4;
inline bool RollDiceResponse::has_dicepoint() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RollDiceResponse::set_has_dicepoint() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RollDiceResponse::clear_has_dicepoint() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RollDiceResponse::clear_dicepoint() {
  dicepoint_ = 0u;
  clear_has_dicepoint();
}
inline ::google::protobuf::uint32 RollDiceResponse::dicepoint() const {
  return dicepoint_;
}
inline void RollDiceResponse::set_dicepoint(::google::protobuf::uint32 value) {
  set_has_dicepoint();
  dicepoint_ = value;
}

// optional uint32 rewardMultiple = 5;
inline bool RollDiceResponse::has_rewardmultiple() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RollDiceResponse::set_has_rewardmultiple() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RollDiceResponse::clear_has_rewardmultiple() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RollDiceResponse::clear_rewardmultiple() {
  rewardmultiple_ = 0u;
  clear_has_rewardmultiple();
}
inline ::google::protobuf::uint32 RollDiceResponse::rewardmultiple() const {
  return rewardmultiple_;
}
inline void RollDiceResponse::set_rewardmultiple(::google::protobuf::uint32 value) {
  set_has_rewardmultiple();
  rewardmultiple_ = value;
}

// optional uint32 vipLeftRollCount = 6;
inline bool RollDiceResponse::has_vipleftrollcount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RollDiceResponse::set_has_vipleftrollcount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RollDiceResponse::clear_has_vipleftrollcount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RollDiceResponse::clear_vipleftrollcount() {
  vipleftrollcount_ = 0u;
  clear_has_vipleftrollcount();
}
inline ::google::protobuf::uint32 RollDiceResponse::vipleftrollcount() const {
  return vipleftrollcount_;
}
inline void RollDiceResponse::set_vipleftrollcount(::google::protobuf::uint32 value) {
  set_has_vipleftrollcount();
  vipleftrollcount_ = value;
}

// optional .sanguo.MsgGiftInfo giftInfo = 7;
inline bool RollDiceResponse::has_giftinfo() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RollDiceResponse::set_has_giftinfo() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RollDiceResponse::clear_has_giftinfo() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RollDiceResponse::clear_giftinfo() {
  if (giftinfo_ != NULL) giftinfo_->::sanguo::MsgGiftInfo::Clear();
  clear_has_giftinfo();
}
inline const ::sanguo::MsgGiftInfo& RollDiceResponse::giftinfo() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return giftinfo_ != NULL ? *giftinfo_ : *default_instance().giftinfo_;
#else
  return giftinfo_ != NULL ? *giftinfo_ : *default_instance_->giftinfo_;
#endif
}
inline ::sanguo::MsgGiftInfo* RollDiceResponse::mutable_giftinfo() {
  set_has_giftinfo();
  if (giftinfo_ == NULL) giftinfo_ = new ::sanguo::MsgGiftInfo;
  return giftinfo_;
}
inline ::sanguo::MsgGiftInfo* RollDiceResponse::release_giftinfo() {
  clear_has_giftinfo();
  ::sanguo::MsgGiftInfo* temp = giftinfo_;
  giftinfo_ = NULL;
  return temp;
}
inline void RollDiceResponse::set_allocated_giftinfo(::sanguo::MsgGiftInfo* giftinfo) {
  delete giftinfo_;
  giftinfo_ = giftinfo;
  if (giftinfo) {
    set_has_giftinfo();
  } else {
    clear_has_giftinfo();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sanguo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_roll_5fdice_2eproto__INCLUDED
