// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: save_role_behavior_events.proto

#ifndef PROTOBUF_save_5frole_5fbehavior_5fevents_2eproto__INCLUDED
#define PROTOBUF_save_5frole_5fbehavior_5fevents_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "msg_id.pb.h"
#include "msg_status_code.pb.h"
// @@protoc_insertion_point(includes)

namespace sanguo {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_save_5frole_5fbehavior_5fevents_2eproto();
void protobuf_AssignDesc_save_5frole_5fbehavior_5fevents_2eproto();
void protobuf_ShutdownFile_save_5frole_5fbehavior_5fevents_2eproto();

class SaveRoleBehaviorEventsRequest;
class SaveRoleBehaviorEventsResponse;

// ===================================================================

class SaveRoleBehaviorEventsRequest : public ::google::protobuf::MessageLite {
 public:
  SaveRoleBehaviorEventsRequest();
  virtual ~SaveRoleBehaviorEventsRequest();

  SaveRoleBehaviorEventsRequest(const SaveRoleBehaviorEventsRequest& from);

  inline SaveRoleBehaviorEventsRequest& operator=(const SaveRoleBehaviorEventsRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const SaveRoleBehaviorEventsRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SaveRoleBehaviorEventsRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SaveRoleBehaviorEventsRequest* other);

  // implements Message ----------------------------------------------

  SaveRoleBehaviorEventsRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SaveRoleBehaviorEventsRequest& from);
  void MergeFrom(const SaveRoleBehaviorEventsRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .sanguo.MsgID msgID = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline ::sanguo::MsgID msgid() const;
  inline void set_msgid(::sanguo::MsgID value);

  // required string eventId = 2;
  inline bool has_eventid() const;
  inline void clear_eventid();
  static const int kEventIdFieldNumber = 2;
  inline const ::std::string& eventid() const;
  inline void set_eventid(const ::std::string& value);
  inline void set_eventid(const char* value);
  inline void set_eventid(const char* value, size_t size);
  inline ::std::string* mutable_eventid();
  inline ::std::string* release_eventid();
  inline void set_allocated_eventid(::std::string* eventid);

  // required string eventStepKey = 3;
  inline bool has_eventstepkey() const;
  inline void clear_eventstepkey();
  static const int kEventStepKeyFieldNumber = 3;
  inline const ::std::string& eventstepkey() const;
  inline void set_eventstepkey(const ::std::string& value);
  inline void set_eventstepkey(const char* value);
  inline void set_eventstepkey(const char* value, size_t size);
  inline ::std::string* mutable_eventstepkey();
  inline ::std::string* release_eventstepkey();
  inline void set_allocated_eventstepkey(::std::string* eventstepkey);

  // required string channelID = 4;
  inline bool has_channelid() const;
  inline void clear_channelid();
  static const int kChannelIDFieldNumber = 4;
  inline const ::std::string& channelid() const;
  inline void set_channelid(const ::std::string& value);
  inline void set_channelid(const char* value);
  inline void set_channelid(const char* value, size_t size);
  inline ::std::string* mutable_channelid();
  inline ::std::string* release_channelid();
  inline void set_allocated_channelid(::std::string* channelid);

  // @@protoc_insertion_point(class_scope:sanguo.SaveRoleBehaviorEventsRequest)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_eventid();
  inline void clear_has_eventid();
  inline void set_has_eventstepkey();
  inline void clear_has_eventstepkey();
  inline void set_has_channelid();
  inline void clear_has_channelid();

  ::std::string* eventid_;
  ::std::string* eventstepkey_;
  ::std::string* channelid_;
  int msgid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_save_5frole_5fbehavior_5fevents_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_save_5frole_5fbehavior_5fevents_2eproto();
  #endif
  friend void protobuf_AssignDesc_save_5frole_5fbehavior_5fevents_2eproto();
  friend void protobuf_ShutdownFile_save_5frole_5fbehavior_5fevents_2eproto();

  void InitAsDefaultInstance();
  static SaveRoleBehaviorEventsRequest* default_instance_;
};
// -------------------------------------------------------------------

class SaveRoleBehaviorEventsResponse : public ::google::protobuf::MessageLite {
 public:
  SaveRoleBehaviorEventsResponse();
  virtual ~SaveRoleBehaviorEventsResponse();

  SaveRoleBehaviorEventsResponse(const SaveRoleBehaviorEventsResponse& from);

  inline SaveRoleBehaviorEventsResponse& operator=(const SaveRoleBehaviorEventsResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const SaveRoleBehaviorEventsResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SaveRoleBehaviorEventsResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SaveRoleBehaviorEventsResponse* other);

  // implements Message ----------------------------------------------

  SaveRoleBehaviorEventsResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SaveRoleBehaviorEventsResponse& from);
  void MergeFrom(const SaveRoleBehaviorEventsResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .sanguo.MsgID msgID = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline ::sanguo::MsgID msgid() const;
  inline void set_msgid(::sanguo::MsgID value);

  // required .sanguo.StatusCode status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::sanguo::StatusCode status() const;
  inline void set_status(::sanguo::StatusCode value);

  // @@protoc_insertion_point(class_scope:sanguo.SaveRoleBehaviorEventsResponse)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_status();
  inline void clear_has_status();

  int msgid_;
  int status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_save_5frole_5fbehavior_5fevents_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_save_5frole_5fbehavior_5fevents_2eproto();
  #endif
  friend void protobuf_AssignDesc_save_5frole_5fbehavior_5fevents_2eproto();
  friend void protobuf_ShutdownFile_save_5frole_5fbehavior_5fevents_2eproto();

  void InitAsDefaultInstance();
  static SaveRoleBehaviorEventsResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// SaveRoleBehaviorEventsRequest

// required .sanguo.MsgID msgID = 1;
inline bool SaveRoleBehaviorEventsRequest::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SaveRoleBehaviorEventsRequest::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SaveRoleBehaviorEventsRequest::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SaveRoleBehaviorEventsRequest::clear_msgid() {
  msgid_ = 1;
  clear_has_msgid();
}
inline ::sanguo::MsgID SaveRoleBehaviorEventsRequest::msgid() const {
  return static_cast< ::sanguo::MsgID >(msgid_);
}
inline void SaveRoleBehaviorEventsRequest::set_msgid(::sanguo::MsgID value) {
  assert(::sanguo::MsgID_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// required string eventId = 2;
inline bool SaveRoleBehaviorEventsRequest::has_eventid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SaveRoleBehaviorEventsRequest::set_has_eventid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SaveRoleBehaviorEventsRequest::clear_has_eventid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SaveRoleBehaviorEventsRequest::clear_eventid() {
  if (eventid_ != &::google::protobuf::internal::kEmptyString) {
    eventid_->clear();
  }
  clear_has_eventid();
}
inline const ::std::string& SaveRoleBehaviorEventsRequest::eventid() const {
  return *eventid_;
}
inline void SaveRoleBehaviorEventsRequest::set_eventid(const ::std::string& value) {
  set_has_eventid();
  if (eventid_ == &::google::protobuf::internal::kEmptyString) {
    eventid_ = new ::std::string;
  }
  eventid_->assign(value);
}
inline void SaveRoleBehaviorEventsRequest::set_eventid(const char* value) {
  set_has_eventid();
  if (eventid_ == &::google::protobuf::internal::kEmptyString) {
    eventid_ = new ::std::string;
  }
  eventid_->assign(value);
}
inline void SaveRoleBehaviorEventsRequest::set_eventid(const char* value, size_t size) {
  set_has_eventid();
  if (eventid_ == &::google::protobuf::internal::kEmptyString) {
    eventid_ = new ::std::string;
  }
  eventid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SaveRoleBehaviorEventsRequest::mutable_eventid() {
  set_has_eventid();
  if (eventid_ == &::google::protobuf::internal::kEmptyString) {
    eventid_ = new ::std::string;
  }
  return eventid_;
}
inline ::std::string* SaveRoleBehaviorEventsRequest::release_eventid() {
  clear_has_eventid();
  if (eventid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = eventid_;
    eventid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SaveRoleBehaviorEventsRequest::set_allocated_eventid(::std::string* eventid) {
  if (eventid_ != &::google::protobuf::internal::kEmptyString) {
    delete eventid_;
  }
  if (eventid) {
    set_has_eventid();
    eventid_ = eventid;
  } else {
    clear_has_eventid();
    eventid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string eventStepKey = 3;
inline bool SaveRoleBehaviorEventsRequest::has_eventstepkey() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SaveRoleBehaviorEventsRequest::set_has_eventstepkey() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SaveRoleBehaviorEventsRequest::clear_has_eventstepkey() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SaveRoleBehaviorEventsRequest::clear_eventstepkey() {
  if (eventstepkey_ != &::google::protobuf::internal::kEmptyString) {
    eventstepkey_->clear();
  }
  clear_has_eventstepkey();
}
inline const ::std::string& SaveRoleBehaviorEventsRequest::eventstepkey() const {
  return *eventstepkey_;
}
inline void SaveRoleBehaviorEventsRequest::set_eventstepkey(const ::std::string& value) {
  set_has_eventstepkey();
  if (eventstepkey_ == &::google::protobuf::internal::kEmptyString) {
    eventstepkey_ = new ::std::string;
  }
  eventstepkey_->assign(value);
}
inline void SaveRoleBehaviorEventsRequest::set_eventstepkey(const char* value) {
  set_has_eventstepkey();
  if (eventstepkey_ == &::google::protobuf::internal::kEmptyString) {
    eventstepkey_ = new ::std::string;
  }
  eventstepkey_->assign(value);
}
inline void SaveRoleBehaviorEventsRequest::set_eventstepkey(const char* value, size_t size) {
  set_has_eventstepkey();
  if (eventstepkey_ == &::google::protobuf::internal::kEmptyString) {
    eventstepkey_ = new ::std::string;
  }
  eventstepkey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SaveRoleBehaviorEventsRequest::mutable_eventstepkey() {
  set_has_eventstepkey();
  if (eventstepkey_ == &::google::protobuf::internal::kEmptyString) {
    eventstepkey_ = new ::std::string;
  }
  return eventstepkey_;
}
inline ::std::string* SaveRoleBehaviorEventsRequest::release_eventstepkey() {
  clear_has_eventstepkey();
  if (eventstepkey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = eventstepkey_;
    eventstepkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SaveRoleBehaviorEventsRequest::set_allocated_eventstepkey(::std::string* eventstepkey) {
  if (eventstepkey_ != &::google::protobuf::internal::kEmptyString) {
    delete eventstepkey_;
  }
  if (eventstepkey) {
    set_has_eventstepkey();
    eventstepkey_ = eventstepkey;
  } else {
    clear_has_eventstepkey();
    eventstepkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string channelID = 4;
inline bool SaveRoleBehaviorEventsRequest::has_channelid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SaveRoleBehaviorEventsRequest::set_has_channelid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SaveRoleBehaviorEventsRequest::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SaveRoleBehaviorEventsRequest::clear_channelid() {
  if (channelid_ != &::google::protobuf::internal::kEmptyString) {
    channelid_->clear();
  }
  clear_has_channelid();
}
inline const ::std::string& SaveRoleBehaviorEventsRequest::channelid() const {
  return *channelid_;
}
inline void SaveRoleBehaviorEventsRequest::set_channelid(const ::std::string& value) {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    channelid_ = new ::std::string;
  }
  channelid_->assign(value);
}
inline void SaveRoleBehaviorEventsRequest::set_channelid(const char* value) {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    channelid_ = new ::std::string;
  }
  channelid_->assign(value);
}
inline void SaveRoleBehaviorEventsRequest::set_channelid(const char* value, size_t size) {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    channelid_ = new ::std::string;
  }
  channelid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SaveRoleBehaviorEventsRequest::mutable_channelid() {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    channelid_ = new ::std::string;
  }
  return channelid_;
}
inline ::std::string* SaveRoleBehaviorEventsRequest::release_channelid() {
  clear_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = channelid_;
    channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SaveRoleBehaviorEventsRequest::set_allocated_channelid(::std::string* channelid) {
  if (channelid_ != &::google::protobuf::internal::kEmptyString) {
    delete channelid_;
  }
  if (channelid) {
    set_has_channelid();
    channelid_ = channelid;
  } else {
    clear_has_channelid();
    channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SaveRoleBehaviorEventsResponse

// required .sanguo.MsgID msgID = 1;
inline bool SaveRoleBehaviorEventsResponse::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SaveRoleBehaviorEventsResponse::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SaveRoleBehaviorEventsResponse::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SaveRoleBehaviorEventsResponse::clear_msgid() {
  msgid_ = 1;
  clear_has_msgid();
}
inline ::sanguo::MsgID SaveRoleBehaviorEventsResponse::msgid() const {
  return static_cast< ::sanguo::MsgID >(msgid_);
}
inline void SaveRoleBehaviorEventsResponse::set_msgid(::sanguo::MsgID value) {
  assert(::sanguo::MsgID_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// required .sanguo.StatusCode status = 2;
inline bool SaveRoleBehaviorEventsResponse::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SaveRoleBehaviorEventsResponse::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SaveRoleBehaviorEventsResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SaveRoleBehaviorEventsResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::sanguo::StatusCode SaveRoleBehaviorEventsResponse::status() const {
  return static_cast< ::sanguo::StatusCode >(status_);
}
inline void SaveRoleBehaviorEventsResponse::set_status(::sanguo::StatusCode value) {
  assert(::sanguo::StatusCode_IsValid(value));
  set_has_status();
  status_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sanguo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_save_5frole_5fbehavior_5fevents_2eproto__INCLUDED
