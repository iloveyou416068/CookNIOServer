// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kungfu_skill.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "kungfu_skill.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace sanguo {

void protobuf_ShutdownFile_kungfu_5fskill_2eproto() {
  delete MsgKungfuSkill::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_kungfu_5fskill_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_kungfu_5fskill_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::sanguo::protobuf_AddDesc_constants_2eproto();
  MsgKungfuSkill::default_instance_ = new MsgKungfuSkill();
  MsgKungfuSkill::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_kungfu_5fskill_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_kungfu_5fskill_2eproto_once_);
void protobuf_AddDesc_kungfu_5fskill_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_kungfu_5fskill_2eproto_once_,
                 &protobuf_AddDesc_kungfu_5fskill_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_kungfu_5fskill_2eproto {
  StaticDescriptorInitializer_kungfu_5fskill_2eproto() {
    protobuf_AddDesc_kungfu_5fskill_2eproto();
  }
} static_descriptor_initializer_kungfu_5fskill_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int MsgKungfuSkill::kKungfuSkillIDFieldNumber;
const int MsgKungfuSkill::kOwnerNumFieldNumber;
const int MsgKungfuSkill::kOwnerTotalNumFieldNumber;
const int MsgKungfuSkill::kLevelFieldNumber;
const int MsgKungfuSkill::kStarFieldNumber;
#endif  // !_MSC_VER

MsgKungfuSkill::MsgKungfuSkill()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void MsgKungfuSkill::InitAsDefaultInstance() {
}

MsgKungfuSkill::MsgKungfuSkill(const MsgKungfuSkill& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void MsgKungfuSkill::SharedCtor() {
  _cached_size_ = 0;
  kungfuskillid_ = 0u;
  ownernum_ = 0u;
  ownertotalnum_ = 0u;
  level_ = 0u;
  star_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgKungfuSkill::~MsgKungfuSkill() {
  SharedDtor();
}

void MsgKungfuSkill::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgKungfuSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgKungfuSkill& MsgKungfuSkill::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_kungfu_5fskill_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_kungfu_5fskill_2eproto();
#endif
  return *default_instance_;
}

MsgKungfuSkill* MsgKungfuSkill::default_instance_ = NULL;

MsgKungfuSkill* MsgKungfuSkill::New() const {
  return new MsgKungfuSkill;
}

void MsgKungfuSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    kungfuskillid_ = 0u;
    ownernum_ = 0u;
    ownertotalnum_ = 0u;
    level_ = 0u;
    star_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool MsgKungfuSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 kungfuSkillID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kungfuskillid_)));
          set_has_kungfuskillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ownerNum;
        break;
      }

      // required uint32 ownerNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ownerNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ownernum_)));
          set_has_ownernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ownerTotalNum;
        break;
      }

      // required uint32 ownerTotalNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ownerTotalNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ownertotalnum_)));
          set_has_ownertotalnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // required uint32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_star;
        break;
      }

      // required uint32 star = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgKungfuSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 kungfuSkillID = 1;
  if (has_kungfuskillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->kungfuskillid(), output);
  }

  // required uint32 ownerNum = 2;
  if (has_ownernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ownernum(), output);
  }

  // required uint32 ownerTotalNum = 3;
  if (has_ownertotalnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ownertotalnum(), output);
  }

  // required uint32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  // required uint32 star = 5;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->star(), output);
  }

}

int MsgKungfuSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 kungfuSkillID = 1;
    if (has_kungfuskillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kungfuskillid());
    }

    // required uint32 ownerNum = 2;
    if (has_ownernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ownernum());
    }

    // required uint32 ownerTotalNum = 3;
    if (has_ownertotalnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ownertotalnum());
    }

    // required uint32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 star = 5;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgKungfuSkill::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgKungfuSkill*>(&from));
}

void MsgKungfuSkill::MergeFrom(const MsgKungfuSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kungfuskillid()) {
      set_kungfuskillid(from.kungfuskillid());
    }
    if (from.has_ownernum()) {
      set_ownernum(from.ownernum());
    }
    if (from.has_ownertotalnum()) {
      set_ownertotalnum(from.ownertotalnum());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
  }
}

void MsgKungfuSkill::CopyFrom(const MsgKungfuSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgKungfuSkill::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void MsgKungfuSkill::Swap(MsgKungfuSkill* other) {
  if (other != this) {
    std::swap(kungfuskillid_, other->kungfuskillid_);
    std::swap(ownernum_, other->ownernum_);
    std::swap(ownertotalnum_, other->ownertotalnum_);
    std::swap(level_, other->level_);
    std::swap(star_, other->star_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MsgKungfuSkill::GetTypeName() const {
  return "sanguo.MsgKungfuSkill";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sanguo

// @@protoc_insertion_point(global_scope)
