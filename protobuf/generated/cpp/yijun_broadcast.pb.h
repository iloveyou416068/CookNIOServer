// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: yijun_broadcast.proto

#ifndef PROTOBUF_yijun_5fbroadcast_2eproto__INCLUDED
#define PROTOBUF_yijun_5fbroadcast_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "msg_id.pb.h"
#include "msg_status_code.pb.h"
// @@protoc_insertion_point(includes)

namespace sanguo {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_yijun_5fbroadcast_2eproto();
void protobuf_AssignDesc_yijun_5fbroadcast_2eproto();
void protobuf_ShutdownFile_yijun_5fbroadcast_2eproto();

class ApproveAppBroadcast;
class PromoteGeneralBroadcast;
class DismissYijunBroadcast;
class TransferMarshalBroadcast;
class LevelUpYijunBroadcast;
class LevelUpYijunBuildingBroadcast;
class SendAppBroadcast;
class DemoteGeneralBroadcast;
class KickMemberBroadcast;
class ExitYijunBroadcast;
class SendYijunCaptureBroadcast;
class SendYijunCaptureResultBroadcast;

// ===================================================================

class ApproveAppBroadcast : public ::google::protobuf::MessageLite {
 public:
  ApproveAppBroadcast();
  virtual ~ApproveAppBroadcast();

  ApproveAppBroadcast(const ApproveAppBroadcast& from);

  inline ApproveAppBroadcast& operator=(const ApproveAppBroadcast& from) {
    CopyFrom(from);
    return *this;
  }

  static const ApproveAppBroadcast& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ApproveAppBroadcast* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ApproveAppBroadcast* other);

  // implements Message ----------------------------------------------

  ApproveAppBroadcast* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ApproveAppBroadcast& from);
  void MergeFrom(const ApproveAppBroadcast& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .sanguo.MsgID msgID = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline ::sanguo::MsgID msgid() const;
  inline void set_msgid(::sanguo::MsgID value);

  // required .sanguo.StatusCode status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::sanguo::StatusCode status() const;
  inline void set_status(::sanguo::StatusCode value);

  // required uint64 adminID = 3;
  inline bool has_adminid() const;
  inline void clear_adminid();
  static const int kAdminIDFieldNumber = 3;
  inline ::google::protobuf::uint64 adminid() const;
  inline void set_adminid(::google::protobuf::uint64 value);

  // required uint64 roleID = 4;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIDFieldNumber = 4;
  inline ::google::protobuf::uint64 roleid() const;
  inline void set_roleid(::google::protobuf::uint64 value);

  // required string roleName = 5;
  inline bool has_rolename() const;
  inline void clear_rolename();
  static const int kRoleNameFieldNumber = 5;
  inline const ::std::string& rolename() const;
  inline void set_rolename(const ::std::string& value);
  inline void set_rolename(const char* value);
  inline void set_rolename(const char* value, size_t size);
  inline ::std::string* mutable_rolename();
  inline ::std::string* release_rolename();
  inline void set_allocated_rolename(::std::string* rolename);

  // required uint64 yijunID = 6;
  inline bool has_yijunid() const;
  inline void clear_yijunid();
  static const int kYijunIDFieldNumber = 6;
  inline ::google::protobuf::uint64 yijunid() const;
  inline void set_yijunid(::google::protobuf::uint64 value);

  // required string yijunName = 7;
  inline bool has_yijunname() const;
  inline void clear_yijunname();
  static const int kYijunNameFieldNumber = 7;
  inline const ::std::string& yijunname() const;
  inline void set_yijunname(const ::std::string& value);
  inline void set_yijunname(const char* value);
  inline void set_yijunname(const char* value, size_t size);
  inline ::std::string* mutable_yijunname();
  inline ::std::string* release_yijunname();
  inline void set_allocated_yijunname(::std::string* yijunname);

  // @@protoc_insertion_point(class_scope:sanguo.ApproveAppBroadcast)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_adminid();
  inline void clear_has_adminid();
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_rolename();
  inline void clear_has_rolename();
  inline void set_has_yijunid();
  inline void clear_has_yijunid();
  inline void set_has_yijunname();
  inline void clear_has_yijunname();

  int msgid_;
  int status_;
  ::google::protobuf::uint64 adminid_;
  ::google::protobuf::uint64 roleid_;
  ::std::string* rolename_;
  ::google::protobuf::uint64 yijunid_;
  ::std::string* yijunname_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_yijun_5fbroadcast_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_yijun_5fbroadcast_2eproto();
  #endif
  friend void protobuf_AssignDesc_yijun_5fbroadcast_2eproto();
  friend void protobuf_ShutdownFile_yijun_5fbroadcast_2eproto();

  void InitAsDefaultInstance();
  static ApproveAppBroadcast* default_instance_;
};
// -------------------------------------------------------------------

class PromoteGeneralBroadcast : public ::google::protobuf::MessageLite {
 public:
  PromoteGeneralBroadcast();
  virtual ~PromoteGeneralBroadcast();

  PromoteGeneralBroadcast(const PromoteGeneralBroadcast& from);

  inline PromoteGeneralBroadcast& operator=(const PromoteGeneralBroadcast& from) {
    CopyFrom(from);
    return *this;
  }

  static const PromoteGeneralBroadcast& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PromoteGeneralBroadcast* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PromoteGeneralBroadcast* other);

  // implements Message ----------------------------------------------

  PromoteGeneralBroadcast* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PromoteGeneralBroadcast& from);
  void MergeFrom(const PromoteGeneralBroadcast& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .sanguo.MsgID msgID = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline ::sanguo::MsgID msgid() const;
  inline void set_msgid(::sanguo::MsgID value);

  // required .sanguo.StatusCode status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::sanguo::StatusCode status() const;
  inline void set_status(::sanguo::StatusCode value);

  // required uint64 adminID = 3;
  inline bool has_adminid() const;
  inline void clear_adminid();
  static const int kAdminIDFieldNumber = 3;
  inline ::google::protobuf::uint64 adminid() const;
  inline void set_adminid(::google::protobuf::uint64 value);

  // required string adminName = 4;
  inline bool has_adminname() const;
  inline void clear_adminname();
  static const int kAdminNameFieldNumber = 4;
  inline const ::std::string& adminname() const;
  inline void set_adminname(const ::std::string& value);
  inline void set_adminname(const char* value);
  inline void set_adminname(const char* value, size_t size);
  inline ::std::string* mutable_adminname();
  inline ::std::string* release_adminname();
  inline void set_allocated_adminname(::std::string* adminname);

  // required uint64 roleID = 5;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIDFieldNumber = 5;
  inline ::google::protobuf::uint64 roleid() const;
  inline void set_roleid(::google::protobuf::uint64 value);

  // required string roleName = 6;
  inline bool has_rolename() const;
  inline void clear_rolename();
  static const int kRoleNameFieldNumber = 6;
  inline const ::std::string& rolename() const;
  inline void set_rolename(const ::std::string& value);
  inline void set_rolename(const char* value);
  inline void set_rolename(const char* value, size_t size);
  inline ::std::string* mutable_rolename();
  inline ::std::string* release_rolename();
  inline void set_allocated_rolename(::std::string* rolename);

  // @@protoc_insertion_point(class_scope:sanguo.PromoteGeneralBroadcast)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_adminid();
  inline void clear_has_adminid();
  inline void set_has_adminname();
  inline void clear_has_adminname();
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_rolename();
  inline void clear_has_rolename();

  int msgid_;
  int status_;
  ::google::protobuf::uint64 adminid_;
  ::std::string* adminname_;
  ::google::protobuf::uint64 roleid_;
  ::std::string* rolename_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_yijun_5fbroadcast_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_yijun_5fbroadcast_2eproto();
  #endif
  friend void protobuf_AssignDesc_yijun_5fbroadcast_2eproto();
  friend void protobuf_ShutdownFile_yijun_5fbroadcast_2eproto();

  void InitAsDefaultInstance();
  static PromoteGeneralBroadcast* default_instance_;
};
// -------------------------------------------------------------------

class DismissYijunBroadcast : public ::google::protobuf::MessageLite {
 public:
  DismissYijunBroadcast();
  virtual ~DismissYijunBroadcast();

  DismissYijunBroadcast(const DismissYijunBroadcast& from);

  inline DismissYijunBroadcast& operator=(const DismissYijunBroadcast& from) {
    CopyFrom(from);
    return *this;
  }

  static const DismissYijunBroadcast& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const DismissYijunBroadcast* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(DismissYijunBroadcast* other);

  // implements Message ----------------------------------------------

  DismissYijunBroadcast* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const DismissYijunBroadcast& from);
  void MergeFrom(const DismissYijunBroadcast& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .sanguo.MsgID msgID = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline ::sanguo::MsgID msgid() const;
  inline void set_msgid(::sanguo::MsgID value);

  // required .sanguo.StatusCode status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::sanguo::StatusCode status() const;
  inline void set_status(::sanguo::StatusCode value);

  // @@protoc_insertion_point(class_scope:sanguo.DismissYijunBroadcast)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_status();
  inline void clear_has_status();

  int msgid_;
  int status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_yijun_5fbroadcast_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_yijun_5fbroadcast_2eproto();
  #endif
  friend void protobuf_AssignDesc_yijun_5fbroadcast_2eproto();
  friend void protobuf_ShutdownFile_yijun_5fbroadcast_2eproto();

  void InitAsDefaultInstance();
  static DismissYijunBroadcast* default_instance_;
};
// -------------------------------------------------------------------

class TransferMarshalBroadcast : public ::google::protobuf::MessageLite {
 public:
  TransferMarshalBroadcast();
  virtual ~TransferMarshalBroadcast();

  TransferMarshalBroadcast(const TransferMarshalBroadcast& from);

  inline TransferMarshalBroadcast& operator=(const TransferMarshalBroadcast& from) {
    CopyFrom(from);
    return *this;
  }

  static const TransferMarshalBroadcast& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const TransferMarshalBroadcast* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(TransferMarshalBroadcast* other);

  // implements Message ----------------------------------------------

  TransferMarshalBroadcast* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const TransferMarshalBroadcast& from);
  void MergeFrom(const TransferMarshalBroadcast& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .sanguo.MsgID msgID = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline ::sanguo::MsgID msgid() const;
  inline void set_msgid(::sanguo::MsgID value);

  // required .sanguo.StatusCode status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::sanguo::StatusCode status() const;
  inline void set_status(::sanguo::StatusCode value);

  // required uint64 adminID = 3;
  inline bool has_adminid() const;
  inline void clear_adminid();
  static const int kAdminIDFieldNumber = 3;
  inline ::google::protobuf::uint64 adminid() const;
  inline void set_adminid(::google::protobuf::uint64 value);

  // required string adminName = 4;
  inline bool has_adminname() const;
  inline void clear_adminname();
  static const int kAdminNameFieldNumber = 4;
  inline const ::std::string& adminname() const;
  inline void set_adminname(const ::std::string& value);
  inline void set_adminname(const char* value);
  inline void set_adminname(const char* value, size_t size);
  inline ::std::string* mutable_adminname();
  inline ::std::string* release_adminname();
  inline void set_allocated_adminname(::std::string* adminname);

  // required uint64 roleID = 5;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIDFieldNumber = 5;
  inline ::google::protobuf::uint64 roleid() const;
  inline void set_roleid(::google::protobuf::uint64 value);

  // required string roleName = 6;
  inline bool has_rolename() const;
  inline void clear_rolename();
  static const int kRoleNameFieldNumber = 6;
  inline const ::std::string& rolename() const;
  inline void set_rolename(const ::std::string& value);
  inline void set_rolename(const char* value);
  inline void set_rolename(const char* value, size_t size);
  inline ::std::string* mutable_rolename();
  inline ::std::string* release_rolename();
  inline void set_allocated_rolename(::std::string* rolename);

  // @@protoc_insertion_point(class_scope:sanguo.TransferMarshalBroadcast)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_adminid();
  inline void clear_has_adminid();
  inline void set_has_adminname();
  inline void clear_has_adminname();
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_rolename();
  inline void clear_has_rolename();

  int msgid_;
  int status_;
  ::google::protobuf::uint64 adminid_;
  ::std::string* adminname_;
  ::google::protobuf::uint64 roleid_;
  ::std::string* rolename_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_yijun_5fbroadcast_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_yijun_5fbroadcast_2eproto();
  #endif
  friend void protobuf_AssignDesc_yijun_5fbroadcast_2eproto();
  friend void protobuf_ShutdownFile_yijun_5fbroadcast_2eproto();

  void InitAsDefaultInstance();
  static TransferMarshalBroadcast* default_instance_;
};
// -------------------------------------------------------------------

class LevelUpYijunBroadcast : public ::google::protobuf::MessageLite {
 public:
  LevelUpYijunBroadcast();
  virtual ~LevelUpYijunBroadcast();

  LevelUpYijunBroadcast(const LevelUpYijunBroadcast& from);

  inline LevelUpYijunBroadcast& operator=(const LevelUpYijunBroadcast& from) {
    CopyFrom(from);
    return *this;
  }

  static const LevelUpYijunBroadcast& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const LevelUpYijunBroadcast* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(LevelUpYijunBroadcast* other);

  // implements Message ----------------------------------------------

  LevelUpYijunBroadcast* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const LevelUpYijunBroadcast& from);
  void MergeFrom(const LevelUpYijunBroadcast& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .sanguo.MsgID msgID = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline ::sanguo::MsgID msgid() const;
  inline void set_msgid(::sanguo::MsgID value);

  // required .sanguo.StatusCode status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::sanguo::StatusCode status() const;
  inline void set_status(::sanguo::StatusCode value);

  // required uint64 adminID = 3;
  inline bool has_adminid() const;
  inline void clear_adminid();
  static const int kAdminIDFieldNumber = 3;
  inline ::google::protobuf::uint64 adminid() const;
  inline void set_adminid(::google::protobuf::uint64 value);

  // required string yijunName = 4;
  inline bool has_yijunname() const;
  inline void clear_yijunname();
  static const int kYijunNameFieldNumber = 4;
  inline const ::std::string& yijunname() const;
  inline void set_yijunname(const ::std::string& value);
  inline void set_yijunname(const char* value);
  inline void set_yijunname(const char* value, size_t size);
  inline ::std::string* mutable_yijunname();
  inline ::std::string* release_yijunname();
  inline void set_allocated_yijunname(::std::string* yijunname);

  // required uint32 yijunLevel = 5;
  inline bool has_yijunlevel() const;
  inline void clear_yijunlevel();
  static const int kYijunLevelFieldNumber = 5;
  inline ::google::protobuf::uint32 yijunlevel() const;
  inline void set_yijunlevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:sanguo.LevelUpYijunBroadcast)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_adminid();
  inline void clear_has_adminid();
  inline void set_has_yijunname();
  inline void clear_has_yijunname();
  inline void set_has_yijunlevel();
  inline void clear_has_yijunlevel();

  int msgid_;
  int status_;
  ::google::protobuf::uint64 adminid_;
  ::std::string* yijunname_;
  ::google::protobuf::uint32 yijunlevel_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_yijun_5fbroadcast_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_yijun_5fbroadcast_2eproto();
  #endif
  friend void protobuf_AssignDesc_yijun_5fbroadcast_2eproto();
  friend void protobuf_ShutdownFile_yijun_5fbroadcast_2eproto();

  void InitAsDefaultInstance();
  static LevelUpYijunBroadcast* default_instance_;
};
// -------------------------------------------------------------------

class LevelUpYijunBuildingBroadcast : public ::google::protobuf::MessageLite {
 public:
  LevelUpYijunBuildingBroadcast();
  virtual ~LevelUpYijunBuildingBroadcast();

  LevelUpYijunBuildingBroadcast(const LevelUpYijunBuildingBroadcast& from);

  inline LevelUpYijunBuildingBroadcast& operator=(const LevelUpYijunBuildingBroadcast& from) {
    CopyFrom(from);
    return *this;
  }

  static const LevelUpYijunBuildingBroadcast& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const LevelUpYijunBuildingBroadcast* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(LevelUpYijunBuildingBroadcast* other);

  // implements Message ----------------------------------------------

  LevelUpYijunBuildingBroadcast* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const LevelUpYijunBuildingBroadcast& from);
  void MergeFrom(const LevelUpYijunBuildingBroadcast& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .sanguo.MsgID msgID = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline ::sanguo::MsgID msgid() const;
  inline void set_msgid(::sanguo::MsgID value);

  // required .sanguo.StatusCode status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::sanguo::StatusCode status() const;
  inline void set_status(::sanguo::StatusCode value);

  // required string adminName = 3;
  inline bool has_adminname() const;
  inline void clear_adminname();
  static const int kAdminNameFieldNumber = 3;
  inline const ::std::string& adminname() const;
  inline void set_adminname(const ::std::string& value);
  inline void set_adminname(const char* value);
  inline void set_adminname(const char* value, size_t size);
  inline ::std::string* mutable_adminname();
  inline ::std::string* release_adminname();
  inline void set_allocated_adminname(::std::string* adminname);

  // required uint32 buildingId = 4;
  inline bool has_buildingid() const;
  inline void clear_buildingid();
  static const int kBuildingIdFieldNumber = 4;
  inline ::google::protobuf::uint32 buildingid() const;
  inline void set_buildingid(::google::protobuf::uint32 value);

  // required uint32 buildingLevel = 5;
  inline bool has_buildinglevel() const;
  inline void clear_buildinglevel();
  static const int kBuildingLevelFieldNumber = 5;
  inline ::google::protobuf::uint32 buildinglevel() const;
  inline void set_buildinglevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:sanguo.LevelUpYijunBuildingBroadcast)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_adminname();
  inline void clear_has_adminname();
  inline void set_has_buildingid();
  inline void clear_has_buildingid();
  inline void set_has_buildinglevel();
  inline void clear_has_buildinglevel();

  int msgid_;
  int status_;
  ::std::string* adminname_;
  ::google::protobuf::uint32 buildingid_;
  ::google::protobuf::uint32 buildinglevel_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_yijun_5fbroadcast_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_yijun_5fbroadcast_2eproto();
  #endif
  friend void protobuf_AssignDesc_yijun_5fbroadcast_2eproto();
  friend void protobuf_ShutdownFile_yijun_5fbroadcast_2eproto();

  void InitAsDefaultInstance();
  static LevelUpYijunBuildingBroadcast* default_instance_;
};
// -------------------------------------------------------------------

class SendAppBroadcast : public ::google::protobuf::MessageLite {
 public:
  SendAppBroadcast();
  virtual ~SendAppBroadcast();

  SendAppBroadcast(const SendAppBroadcast& from);

  inline SendAppBroadcast& operator=(const SendAppBroadcast& from) {
    CopyFrom(from);
    return *this;
  }

  static const SendAppBroadcast& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SendAppBroadcast* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SendAppBroadcast* other);

  // implements Message ----------------------------------------------

  SendAppBroadcast* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SendAppBroadcast& from);
  void MergeFrom(const SendAppBroadcast& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .sanguo.MsgID msgID = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline ::sanguo::MsgID msgid() const;
  inline void set_msgid(::sanguo::MsgID value);

  // required .sanguo.StatusCode status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::sanguo::StatusCode status() const;
  inline void set_status(::sanguo::StatusCode value);

  // required string roleName = 3;
  inline bool has_rolename() const;
  inline void clear_rolename();
  static const int kRoleNameFieldNumber = 3;
  inline const ::std::string& rolename() const;
  inline void set_rolename(const ::std::string& value);
  inline void set_rolename(const char* value);
  inline void set_rolename(const char* value, size_t size);
  inline ::std::string* mutable_rolename();
  inline ::std::string* release_rolename();
  inline void set_allocated_rolename(::std::string* rolename);

  // @@protoc_insertion_point(class_scope:sanguo.SendAppBroadcast)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_rolename();
  inline void clear_has_rolename();

  int msgid_;
  int status_;
  ::std::string* rolename_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_yijun_5fbroadcast_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_yijun_5fbroadcast_2eproto();
  #endif
  friend void protobuf_AssignDesc_yijun_5fbroadcast_2eproto();
  friend void protobuf_ShutdownFile_yijun_5fbroadcast_2eproto();

  void InitAsDefaultInstance();
  static SendAppBroadcast* default_instance_;
};
// -------------------------------------------------------------------

class DemoteGeneralBroadcast : public ::google::protobuf::MessageLite {
 public:
  DemoteGeneralBroadcast();
  virtual ~DemoteGeneralBroadcast();

  DemoteGeneralBroadcast(const DemoteGeneralBroadcast& from);

  inline DemoteGeneralBroadcast& operator=(const DemoteGeneralBroadcast& from) {
    CopyFrom(from);
    return *this;
  }

  static const DemoteGeneralBroadcast& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const DemoteGeneralBroadcast* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(DemoteGeneralBroadcast* other);

  // implements Message ----------------------------------------------

  DemoteGeneralBroadcast* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const DemoteGeneralBroadcast& from);
  void MergeFrom(const DemoteGeneralBroadcast& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .sanguo.MsgID msgID = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline ::sanguo::MsgID msgid() const;
  inline void set_msgid(::sanguo::MsgID value);

  // required .sanguo.StatusCode status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::sanguo::StatusCode status() const;
  inline void set_status(::sanguo::StatusCode value);

  // required uint64 adminID = 3;
  inline bool has_adminid() const;
  inline void clear_adminid();
  static const int kAdminIDFieldNumber = 3;
  inline ::google::protobuf::uint64 adminid() const;
  inline void set_adminid(::google::protobuf::uint64 value);

  // required string adminName = 4;
  inline bool has_adminname() const;
  inline void clear_adminname();
  static const int kAdminNameFieldNumber = 4;
  inline const ::std::string& adminname() const;
  inline void set_adminname(const ::std::string& value);
  inline void set_adminname(const char* value);
  inline void set_adminname(const char* value, size_t size);
  inline ::std::string* mutable_adminname();
  inline ::std::string* release_adminname();
  inline void set_allocated_adminname(::std::string* adminname);

  // required uint64 roleID = 5;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIDFieldNumber = 5;
  inline ::google::protobuf::uint64 roleid() const;
  inline void set_roleid(::google::protobuf::uint64 value);

  // required string roleName = 6;
  inline bool has_rolename() const;
  inline void clear_rolename();
  static const int kRoleNameFieldNumber = 6;
  inline const ::std::string& rolename() const;
  inline void set_rolename(const ::std::string& value);
  inline void set_rolename(const char* value);
  inline void set_rolename(const char* value, size_t size);
  inline ::std::string* mutable_rolename();
  inline ::std::string* release_rolename();
  inline void set_allocated_rolename(::std::string* rolename);

  // @@protoc_insertion_point(class_scope:sanguo.DemoteGeneralBroadcast)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_adminid();
  inline void clear_has_adminid();
  inline void set_has_adminname();
  inline void clear_has_adminname();
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_rolename();
  inline void clear_has_rolename();

  int msgid_;
  int status_;
  ::google::protobuf::uint64 adminid_;
  ::std::string* adminname_;
  ::google::protobuf::uint64 roleid_;
  ::std::string* rolename_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_yijun_5fbroadcast_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_yijun_5fbroadcast_2eproto();
  #endif
  friend void protobuf_AssignDesc_yijun_5fbroadcast_2eproto();
  friend void protobuf_ShutdownFile_yijun_5fbroadcast_2eproto();

  void InitAsDefaultInstance();
  static DemoteGeneralBroadcast* default_instance_;
};
// -------------------------------------------------------------------

class KickMemberBroadcast : public ::google::protobuf::MessageLite {
 public:
  KickMemberBroadcast();
  virtual ~KickMemberBroadcast();

  KickMemberBroadcast(const KickMemberBroadcast& from);

  inline KickMemberBroadcast& operator=(const KickMemberBroadcast& from) {
    CopyFrom(from);
    return *this;
  }

  static const KickMemberBroadcast& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const KickMemberBroadcast* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(KickMemberBroadcast* other);

  // implements Message ----------------------------------------------

  KickMemberBroadcast* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const KickMemberBroadcast& from);
  void MergeFrom(const KickMemberBroadcast& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .sanguo.MsgID msgID = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline ::sanguo::MsgID msgid() const;
  inline void set_msgid(::sanguo::MsgID value);

  // required .sanguo.StatusCode status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::sanguo::StatusCode status() const;
  inline void set_status(::sanguo::StatusCode value);

  // required uint64 adminID = 3;
  inline bool has_adminid() const;
  inline void clear_adminid();
  static const int kAdminIDFieldNumber = 3;
  inline ::google::protobuf::uint64 adminid() const;
  inline void set_adminid(::google::protobuf::uint64 value);

  // required string adminName = 4;
  inline bool has_adminname() const;
  inline void clear_adminname();
  static const int kAdminNameFieldNumber = 4;
  inline const ::std::string& adminname() const;
  inline void set_adminname(const ::std::string& value);
  inline void set_adminname(const char* value);
  inline void set_adminname(const char* value, size_t size);
  inline ::std::string* mutable_adminname();
  inline ::std::string* release_adminname();
  inline void set_allocated_adminname(::std::string* adminname);

  // required uint64 roleID = 5;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIDFieldNumber = 5;
  inline ::google::protobuf::uint64 roleid() const;
  inline void set_roleid(::google::protobuf::uint64 value);

  // required string roleName = 6;
  inline bool has_rolename() const;
  inline void clear_rolename();
  static const int kRoleNameFieldNumber = 6;
  inline const ::std::string& rolename() const;
  inline void set_rolename(const ::std::string& value);
  inline void set_rolename(const char* value);
  inline void set_rolename(const char* value, size_t size);
  inline ::std::string* mutable_rolename();
  inline ::std::string* release_rolename();
  inline void set_allocated_rolename(::std::string* rolename);

  // @@protoc_insertion_point(class_scope:sanguo.KickMemberBroadcast)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_adminid();
  inline void clear_has_adminid();
  inline void set_has_adminname();
  inline void clear_has_adminname();
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_rolename();
  inline void clear_has_rolename();

  int msgid_;
  int status_;
  ::google::protobuf::uint64 adminid_;
  ::std::string* adminname_;
  ::google::protobuf::uint64 roleid_;
  ::std::string* rolename_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_yijun_5fbroadcast_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_yijun_5fbroadcast_2eproto();
  #endif
  friend void protobuf_AssignDesc_yijun_5fbroadcast_2eproto();
  friend void protobuf_ShutdownFile_yijun_5fbroadcast_2eproto();

  void InitAsDefaultInstance();
  static KickMemberBroadcast* default_instance_;
};
// -------------------------------------------------------------------

class ExitYijunBroadcast : public ::google::protobuf::MessageLite {
 public:
  ExitYijunBroadcast();
  virtual ~ExitYijunBroadcast();

  ExitYijunBroadcast(const ExitYijunBroadcast& from);

  inline ExitYijunBroadcast& operator=(const ExitYijunBroadcast& from) {
    CopyFrom(from);
    return *this;
  }

  static const ExitYijunBroadcast& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ExitYijunBroadcast* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ExitYijunBroadcast* other);

  // implements Message ----------------------------------------------

  ExitYijunBroadcast* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ExitYijunBroadcast& from);
  void MergeFrom(const ExitYijunBroadcast& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .sanguo.MsgID msgID = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline ::sanguo::MsgID msgid() const;
  inline void set_msgid(::sanguo::MsgID value);

  // required .sanguo.StatusCode status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::sanguo::StatusCode status() const;
  inline void set_status(::sanguo::StatusCode value);

  // required string roleName = 3;
  inline bool has_rolename() const;
  inline void clear_rolename();
  static const int kRoleNameFieldNumber = 3;
  inline const ::std::string& rolename() const;
  inline void set_rolename(const ::std::string& value);
  inline void set_rolename(const char* value);
  inline void set_rolename(const char* value, size_t size);
  inline ::std::string* mutable_rolename();
  inline ::std::string* release_rolename();
  inline void set_allocated_rolename(::std::string* rolename);

  // @@protoc_insertion_point(class_scope:sanguo.ExitYijunBroadcast)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_rolename();
  inline void clear_has_rolename();

  int msgid_;
  int status_;
  ::std::string* rolename_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_yijun_5fbroadcast_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_yijun_5fbroadcast_2eproto();
  #endif
  friend void protobuf_AssignDesc_yijun_5fbroadcast_2eproto();
  friend void protobuf_ShutdownFile_yijun_5fbroadcast_2eproto();

  void InitAsDefaultInstance();
  static ExitYijunBroadcast* default_instance_;
};
// -------------------------------------------------------------------

class SendYijunCaptureBroadcast : public ::google::protobuf::MessageLite {
 public:
  SendYijunCaptureBroadcast();
  virtual ~SendYijunCaptureBroadcast();

  SendYijunCaptureBroadcast(const SendYijunCaptureBroadcast& from);

  inline SendYijunCaptureBroadcast& operator=(const SendYijunCaptureBroadcast& from) {
    CopyFrom(from);
    return *this;
  }

  static const SendYijunCaptureBroadcast& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SendYijunCaptureBroadcast* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SendYijunCaptureBroadcast* other);

  // implements Message ----------------------------------------------

  SendYijunCaptureBroadcast* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SendYijunCaptureBroadcast& from);
  void MergeFrom(const SendYijunCaptureBroadcast& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .sanguo.MsgID msgID = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline ::sanguo::MsgID msgid() const;
  inline void set_msgid(::sanguo::MsgID value);

  // required .sanguo.StatusCode status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::sanguo::StatusCode status() const;
  inline void set_status(::sanguo::StatusCode value);

  // @@protoc_insertion_point(class_scope:sanguo.SendYijunCaptureBroadcast)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_status();
  inline void clear_has_status();

  int msgid_;
  int status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_yijun_5fbroadcast_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_yijun_5fbroadcast_2eproto();
  #endif
  friend void protobuf_AssignDesc_yijun_5fbroadcast_2eproto();
  friend void protobuf_ShutdownFile_yijun_5fbroadcast_2eproto();

  void InitAsDefaultInstance();
  static SendYijunCaptureBroadcast* default_instance_;
};
// -------------------------------------------------------------------

class SendYijunCaptureResultBroadcast : public ::google::protobuf::MessageLite {
 public:
  SendYijunCaptureResultBroadcast();
  virtual ~SendYijunCaptureResultBroadcast();

  SendYijunCaptureResultBroadcast(const SendYijunCaptureResultBroadcast& from);

  inline SendYijunCaptureResultBroadcast& operator=(const SendYijunCaptureResultBroadcast& from) {
    CopyFrom(from);
    return *this;
  }

  static const SendYijunCaptureResultBroadcast& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SendYijunCaptureResultBroadcast* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SendYijunCaptureResultBroadcast* other);

  // implements Message ----------------------------------------------

  SendYijunCaptureResultBroadcast* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SendYijunCaptureResultBroadcast& from);
  void MergeFrom(const SendYijunCaptureResultBroadcast& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .sanguo.MsgID msgID = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline ::sanguo::MsgID msgid() const;
  inline void set_msgid(::sanguo::MsgID value);

  // required .sanguo.StatusCode status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::sanguo::StatusCode status() const;
  inline void set_status(::sanguo::StatusCode value);

  // optional uint32 result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // optional uint64 weathePD = 4;
  inline bool has_weathepd() const;
  inline void clear_weathepd();
  static const int kWeathePDFieldNumber = 4;
  inline ::google::protobuf::uint64 weathepd() const;
  inline void set_weathepd(::google::protobuf::uint64 value);

  // optional string roleName = 5;
  inline bool has_rolename() const;
  inline void clear_rolename();
  static const int kRoleNameFieldNumber = 5;
  inline const ::std::string& rolename() const;
  inline void set_rolename(const ::std::string& value);
  inline void set_rolename(const char* value);
  inline void set_rolename(const char* value, size_t size);
  inline ::std::string* mutable_rolename();
  inline ::std::string* release_rolename();
  inline void set_allocated_rolename(::std::string* rolename);

  // optional uint64 roleID = 6;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIDFieldNumber = 6;
  inline ::google::protobuf::uint64 roleid() const;
  inline void set_roleid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:sanguo.SendYijunCaptureResultBroadcast)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_weathepd();
  inline void clear_has_weathepd();
  inline void set_has_rolename();
  inline void clear_has_rolename();
  inline void set_has_roleid();
  inline void clear_has_roleid();

  int msgid_;
  int status_;
  ::google::protobuf::uint64 weathepd_;
  ::std::string* rolename_;
  ::google::protobuf::uint64 roleid_;
  ::google::protobuf::uint32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_yijun_5fbroadcast_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_yijun_5fbroadcast_2eproto();
  #endif
  friend void protobuf_AssignDesc_yijun_5fbroadcast_2eproto();
  friend void protobuf_ShutdownFile_yijun_5fbroadcast_2eproto();

  void InitAsDefaultInstance();
  static SendYijunCaptureResultBroadcast* default_instance_;
};
// ===================================================================


// ===================================================================

// ApproveAppBroadcast

// required .sanguo.MsgID msgID = 1;
inline bool ApproveAppBroadcast::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ApproveAppBroadcast::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ApproveAppBroadcast::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ApproveAppBroadcast::clear_msgid() {
  msgid_ = 1;
  clear_has_msgid();
}
inline ::sanguo::MsgID ApproveAppBroadcast::msgid() const {
  return static_cast< ::sanguo::MsgID >(msgid_);
}
inline void ApproveAppBroadcast::set_msgid(::sanguo::MsgID value) {
  assert(::sanguo::MsgID_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// required .sanguo.StatusCode status = 2;
inline bool ApproveAppBroadcast::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ApproveAppBroadcast::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ApproveAppBroadcast::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ApproveAppBroadcast::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::sanguo::StatusCode ApproveAppBroadcast::status() const {
  return static_cast< ::sanguo::StatusCode >(status_);
}
inline void ApproveAppBroadcast::set_status(::sanguo::StatusCode value) {
  assert(::sanguo::StatusCode_IsValid(value));
  set_has_status();
  status_ = value;
}

// required uint64 adminID = 3;
inline bool ApproveAppBroadcast::has_adminid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ApproveAppBroadcast::set_has_adminid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ApproveAppBroadcast::clear_has_adminid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ApproveAppBroadcast::clear_adminid() {
  adminid_ = GOOGLE_ULONGLONG(0);
  clear_has_adminid();
}
inline ::google::protobuf::uint64 ApproveAppBroadcast::adminid() const {
  return adminid_;
}
inline void ApproveAppBroadcast::set_adminid(::google::protobuf::uint64 value) {
  set_has_adminid();
  adminid_ = value;
}

// required uint64 roleID = 4;
inline bool ApproveAppBroadcast::has_roleid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ApproveAppBroadcast::set_has_roleid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ApproveAppBroadcast::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ApproveAppBroadcast::clear_roleid() {
  roleid_ = GOOGLE_ULONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::uint64 ApproveAppBroadcast::roleid() const {
  return roleid_;
}
inline void ApproveAppBroadcast::set_roleid(::google::protobuf::uint64 value) {
  set_has_roleid();
  roleid_ = value;
}

// required string roleName = 5;
inline bool ApproveAppBroadcast::has_rolename() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ApproveAppBroadcast::set_has_rolename() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ApproveAppBroadcast::clear_has_rolename() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ApproveAppBroadcast::clear_rolename() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    rolename_->clear();
  }
  clear_has_rolename();
}
inline const ::std::string& ApproveAppBroadcast::rolename() const {
  return *rolename_;
}
inline void ApproveAppBroadcast::set_rolename(const ::std::string& value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void ApproveAppBroadcast::set_rolename(const char* value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void ApproveAppBroadcast::set_rolename(const char* value, size_t size) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ApproveAppBroadcast::mutable_rolename() {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  return rolename_;
}
inline ::std::string* ApproveAppBroadcast::release_rolename() {
  clear_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rolename_;
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ApproveAppBroadcast::set_allocated_rolename(::std::string* rolename) {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (rolename) {
    set_has_rolename();
    rolename_ = rolename;
  } else {
    clear_has_rolename();
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint64 yijunID = 6;
inline bool ApproveAppBroadcast::has_yijunid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ApproveAppBroadcast::set_has_yijunid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ApproveAppBroadcast::clear_has_yijunid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ApproveAppBroadcast::clear_yijunid() {
  yijunid_ = GOOGLE_ULONGLONG(0);
  clear_has_yijunid();
}
inline ::google::protobuf::uint64 ApproveAppBroadcast::yijunid() const {
  return yijunid_;
}
inline void ApproveAppBroadcast::set_yijunid(::google::protobuf::uint64 value) {
  set_has_yijunid();
  yijunid_ = value;
}

// required string yijunName = 7;
inline bool ApproveAppBroadcast::has_yijunname() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ApproveAppBroadcast::set_has_yijunname() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ApproveAppBroadcast::clear_has_yijunname() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ApproveAppBroadcast::clear_yijunname() {
  if (yijunname_ != &::google::protobuf::internal::kEmptyString) {
    yijunname_->clear();
  }
  clear_has_yijunname();
}
inline const ::std::string& ApproveAppBroadcast::yijunname() const {
  return *yijunname_;
}
inline void ApproveAppBroadcast::set_yijunname(const ::std::string& value) {
  set_has_yijunname();
  if (yijunname_ == &::google::protobuf::internal::kEmptyString) {
    yijunname_ = new ::std::string;
  }
  yijunname_->assign(value);
}
inline void ApproveAppBroadcast::set_yijunname(const char* value) {
  set_has_yijunname();
  if (yijunname_ == &::google::protobuf::internal::kEmptyString) {
    yijunname_ = new ::std::string;
  }
  yijunname_->assign(value);
}
inline void ApproveAppBroadcast::set_yijunname(const char* value, size_t size) {
  set_has_yijunname();
  if (yijunname_ == &::google::protobuf::internal::kEmptyString) {
    yijunname_ = new ::std::string;
  }
  yijunname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ApproveAppBroadcast::mutable_yijunname() {
  set_has_yijunname();
  if (yijunname_ == &::google::protobuf::internal::kEmptyString) {
    yijunname_ = new ::std::string;
  }
  return yijunname_;
}
inline ::std::string* ApproveAppBroadcast::release_yijunname() {
  clear_has_yijunname();
  if (yijunname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = yijunname_;
    yijunname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ApproveAppBroadcast::set_allocated_yijunname(::std::string* yijunname) {
  if (yijunname_ != &::google::protobuf::internal::kEmptyString) {
    delete yijunname_;
  }
  if (yijunname) {
    set_has_yijunname();
    yijunname_ = yijunname;
  } else {
    clear_has_yijunname();
    yijunname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// PromoteGeneralBroadcast

// required .sanguo.MsgID msgID = 1;
inline bool PromoteGeneralBroadcast::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PromoteGeneralBroadcast::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PromoteGeneralBroadcast::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PromoteGeneralBroadcast::clear_msgid() {
  msgid_ = 1;
  clear_has_msgid();
}
inline ::sanguo::MsgID PromoteGeneralBroadcast::msgid() const {
  return static_cast< ::sanguo::MsgID >(msgid_);
}
inline void PromoteGeneralBroadcast::set_msgid(::sanguo::MsgID value) {
  assert(::sanguo::MsgID_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// required .sanguo.StatusCode status = 2;
inline bool PromoteGeneralBroadcast::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PromoteGeneralBroadcast::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PromoteGeneralBroadcast::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PromoteGeneralBroadcast::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::sanguo::StatusCode PromoteGeneralBroadcast::status() const {
  return static_cast< ::sanguo::StatusCode >(status_);
}
inline void PromoteGeneralBroadcast::set_status(::sanguo::StatusCode value) {
  assert(::sanguo::StatusCode_IsValid(value));
  set_has_status();
  status_ = value;
}

// required uint64 adminID = 3;
inline bool PromoteGeneralBroadcast::has_adminid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PromoteGeneralBroadcast::set_has_adminid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PromoteGeneralBroadcast::clear_has_adminid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PromoteGeneralBroadcast::clear_adminid() {
  adminid_ = GOOGLE_ULONGLONG(0);
  clear_has_adminid();
}
inline ::google::protobuf::uint64 PromoteGeneralBroadcast::adminid() const {
  return adminid_;
}
inline void PromoteGeneralBroadcast::set_adminid(::google::protobuf::uint64 value) {
  set_has_adminid();
  adminid_ = value;
}

// required string adminName = 4;
inline bool PromoteGeneralBroadcast::has_adminname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PromoteGeneralBroadcast::set_has_adminname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PromoteGeneralBroadcast::clear_has_adminname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PromoteGeneralBroadcast::clear_adminname() {
  if (adminname_ != &::google::protobuf::internal::kEmptyString) {
    adminname_->clear();
  }
  clear_has_adminname();
}
inline const ::std::string& PromoteGeneralBroadcast::adminname() const {
  return *adminname_;
}
inline void PromoteGeneralBroadcast::set_adminname(const ::std::string& value) {
  set_has_adminname();
  if (adminname_ == &::google::protobuf::internal::kEmptyString) {
    adminname_ = new ::std::string;
  }
  adminname_->assign(value);
}
inline void PromoteGeneralBroadcast::set_adminname(const char* value) {
  set_has_adminname();
  if (adminname_ == &::google::protobuf::internal::kEmptyString) {
    adminname_ = new ::std::string;
  }
  adminname_->assign(value);
}
inline void PromoteGeneralBroadcast::set_adminname(const char* value, size_t size) {
  set_has_adminname();
  if (adminname_ == &::google::protobuf::internal::kEmptyString) {
    adminname_ = new ::std::string;
  }
  adminname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PromoteGeneralBroadcast::mutable_adminname() {
  set_has_adminname();
  if (adminname_ == &::google::protobuf::internal::kEmptyString) {
    adminname_ = new ::std::string;
  }
  return adminname_;
}
inline ::std::string* PromoteGeneralBroadcast::release_adminname() {
  clear_has_adminname();
  if (adminname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = adminname_;
    adminname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PromoteGeneralBroadcast::set_allocated_adminname(::std::string* adminname) {
  if (adminname_ != &::google::protobuf::internal::kEmptyString) {
    delete adminname_;
  }
  if (adminname) {
    set_has_adminname();
    adminname_ = adminname;
  } else {
    clear_has_adminname();
    adminname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint64 roleID = 5;
inline bool PromoteGeneralBroadcast::has_roleid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PromoteGeneralBroadcast::set_has_roleid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PromoteGeneralBroadcast::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PromoteGeneralBroadcast::clear_roleid() {
  roleid_ = GOOGLE_ULONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::uint64 PromoteGeneralBroadcast::roleid() const {
  return roleid_;
}
inline void PromoteGeneralBroadcast::set_roleid(::google::protobuf::uint64 value) {
  set_has_roleid();
  roleid_ = value;
}

// required string roleName = 6;
inline bool PromoteGeneralBroadcast::has_rolename() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PromoteGeneralBroadcast::set_has_rolename() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PromoteGeneralBroadcast::clear_has_rolename() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PromoteGeneralBroadcast::clear_rolename() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    rolename_->clear();
  }
  clear_has_rolename();
}
inline const ::std::string& PromoteGeneralBroadcast::rolename() const {
  return *rolename_;
}
inline void PromoteGeneralBroadcast::set_rolename(const ::std::string& value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void PromoteGeneralBroadcast::set_rolename(const char* value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void PromoteGeneralBroadcast::set_rolename(const char* value, size_t size) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PromoteGeneralBroadcast::mutable_rolename() {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  return rolename_;
}
inline ::std::string* PromoteGeneralBroadcast::release_rolename() {
  clear_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rolename_;
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PromoteGeneralBroadcast::set_allocated_rolename(::std::string* rolename) {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (rolename) {
    set_has_rolename();
    rolename_ = rolename;
  } else {
    clear_has_rolename();
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// DismissYijunBroadcast

// required .sanguo.MsgID msgID = 1;
inline bool DismissYijunBroadcast::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DismissYijunBroadcast::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DismissYijunBroadcast::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DismissYijunBroadcast::clear_msgid() {
  msgid_ = 1;
  clear_has_msgid();
}
inline ::sanguo::MsgID DismissYijunBroadcast::msgid() const {
  return static_cast< ::sanguo::MsgID >(msgid_);
}
inline void DismissYijunBroadcast::set_msgid(::sanguo::MsgID value) {
  assert(::sanguo::MsgID_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// required .sanguo.StatusCode status = 2;
inline bool DismissYijunBroadcast::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DismissYijunBroadcast::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DismissYijunBroadcast::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DismissYijunBroadcast::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::sanguo::StatusCode DismissYijunBroadcast::status() const {
  return static_cast< ::sanguo::StatusCode >(status_);
}
inline void DismissYijunBroadcast::set_status(::sanguo::StatusCode value) {
  assert(::sanguo::StatusCode_IsValid(value));
  set_has_status();
  status_ = value;
}

// -------------------------------------------------------------------

// TransferMarshalBroadcast

// required .sanguo.MsgID msgID = 1;
inline bool TransferMarshalBroadcast::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransferMarshalBroadcast::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TransferMarshalBroadcast::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TransferMarshalBroadcast::clear_msgid() {
  msgid_ = 1;
  clear_has_msgid();
}
inline ::sanguo::MsgID TransferMarshalBroadcast::msgid() const {
  return static_cast< ::sanguo::MsgID >(msgid_);
}
inline void TransferMarshalBroadcast::set_msgid(::sanguo::MsgID value) {
  assert(::sanguo::MsgID_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// required .sanguo.StatusCode status = 2;
inline bool TransferMarshalBroadcast::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TransferMarshalBroadcast::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TransferMarshalBroadcast::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TransferMarshalBroadcast::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::sanguo::StatusCode TransferMarshalBroadcast::status() const {
  return static_cast< ::sanguo::StatusCode >(status_);
}
inline void TransferMarshalBroadcast::set_status(::sanguo::StatusCode value) {
  assert(::sanguo::StatusCode_IsValid(value));
  set_has_status();
  status_ = value;
}

// required uint64 adminID = 3;
inline bool TransferMarshalBroadcast::has_adminid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TransferMarshalBroadcast::set_has_adminid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TransferMarshalBroadcast::clear_has_adminid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TransferMarshalBroadcast::clear_adminid() {
  adminid_ = GOOGLE_ULONGLONG(0);
  clear_has_adminid();
}
inline ::google::protobuf::uint64 TransferMarshalBroadcast::adminid() const {
  return adminid_;
}
inline void TransferMarshalBroadcast::set_adminid(::google::protobuf::uint64 value) {
  set_has_adminid();
  adminid_ = value;
}

// required string adminName = 4;
inline bool TransferMarshalBroadcast::has_adminname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TransferMarshalBroadcast::set_has_adminname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TransferMarshalBroadcast::clear_has_adminname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TransferMarshalBroadcast::clear_adminname() {
  if (adminname_ != &::google::protobuf::internal::kEmptyString) {
    adminname_->clear();
  }
  clear_has_adminname();
}
inline const ::std::string& TransferMarshalBroadcast::adminname() const {
  return *adminname_;
}
inline void TransferMarshalBroadcast::set_adminname(const ::std::string& value) {
  set_has_adminname();
  if (adminname_ == &::google::protobuf::internal::kEmptyString) {
    adminname_ = new ::std::string;
  }
  adminname_->assign(value);
}
inline void TransferMarshalBroadcast::set_adminname(const char* value) {
  set_has_adminname();
  if (adminname_ == &::google::protobuf::internal::kEmptyString) {
    adminname_ = new ::std::string;
  }
  adminname_->assign(value);
}
inline void TransferMarshalBroadcast::set_adminname(const char* value, size_t size) {
  set_has_adminname();
  if (adminname_ == &::google::protobuf::internal::kEmptyString) {
    adminname_ = new ::std::string;
  }
  adminname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TransferMarshalBroadcast::mutable_adminname() {
  set_has_adminname();
  if (adminname_ == &::google::protobuf::internal::kEmptyString) {
    adminname_ = new ::std::string;
  }
  return adminname_;
}
inline ::std::string* TransferMarshalBroadcast::release_adminname() {
  clear_has_adminname();
  if (adminname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = adminname_;
    adminname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TransferMarshalBroadcast::set_allocated_adminname(::std::string* adminname) {
  if (adminname_ != &::google::protobuf::internal::kEmptyString) {
    delete adminname_;
  }
  if (adminname) {
    set_has_adminname();
    adminname_ = adminname;
  } else {
    clear_has_adminname();
    adminname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint64 roleID = 5;
inline bool TransferMarshalBroadcast::has_roleid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TransferMarshalBroadcast::set_has_roleid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TransferMarshalBroadcast::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TransferMarshalBroadcast::clear_roleid() {
  roleid_ = GOOGLE_ULONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::uint64 TransferMarshalBroadcast::roleid() const {
  return roleid_;
}
inline void TransferMarshalBroadcast::set_roleid(::google::protobuf::uint64 value) {
  set_has_roleid();
  roleid_ = value;
}

// required string roleName = 6;
inline bool TransferMarshalBroadcast::has_rolename() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TransferMarshalBroadcast::set_has_rolename() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TransferMarshalBroadcast::clear_has_rolename() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TransferMarshalBroadcast::clear_rolename() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    rolename_->clear();
  }
  clear_has_rolename();
}
inline const ::std::string& TransferMarshalBroadcast::rolename() const {
  return *rolename_;
}
inline void TransferMarshalBroadcast::set_rolename(const ::std::string& value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void TransferMarshalBroadcast::set_rolename(const char* value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void TransferMarshalBroadcast::set_rolename(const char* value, size_t size) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TransferMarshalBroadcast::mutable_rolename() {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  return rolename_;
}
inline ::std::string* TransferMarshalBroadcast::release_rolename() {
  clear_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rolename_;
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TransferMarshalBroadcast::set_allocated_rolename(::std::string* rolename) {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (rolename) {
    set_has_rolename();
    rolename_ = rolename;
  } else {
    clear_has_rolename();
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// LevelUpYijunBroadcast

// required .sanguo.MsgID msgID = 1;
inline bool LevelUpYijunBroadcast::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LevelUpYijunBroadcast::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LevelUpYijunBroadcast::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LevelUpYijunBroadcast::clear_msgid() {
  msgid_ = 1;
  clear_has_msgid();
}
inline ::sanguo::MsgID LevelUpYijunBroadcast::msgid() const {
  return static_cast< ::sanguo::MsgID >(msgid_);
}
inline void LevelUpYijunBroadcast::set_msgid(::sanguo::MsgID value) {
  assert(::sanguo::MsgID_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// required .sanguo.StatusCode status = 2;
inline bool LevelUpYijunBroadcast::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LevelUpYijunBroadcast::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LevelUpYijunBroadcast::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LevelUpYijunBroadcast::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::sanguo::StatusCode LevelUpYijunBroadcast::status() const {
  return static_cast< ::sanguo::StatusCode >(status_);
}
inline void LevelUpYijunBroadcast::set_status(::sanguo::StatusCode value) {
  assert(::sanguo::StatusCode_IsValid(value));
  set_has_status();
  status_ = value;
}

// required uint64 adminID = 3;
inline bool LevelUpYijunBroadcast::has_adminid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LevelUpYijunBroadcast::set_has_adminid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LevelUpYijunBroadcast::clear_has_adminid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LevelUpYijunBroadcast::clear_adminid() {
  adminid_ = GOOGLE_ULONGLONG(0);
  clear_has_adminid();
}
inline ::google::protobuf::uint64 LevelUpYijunBroadcast::adminid() const {
  return adminid_;
}
inline void LevelUpYijunBroadcast::set_adminid(::google::protobuf::uint64 value) {
  set_has_adminid();
  adminid_ = value;
}

// required string yijunName = 4;
inline bool LevelUpYijunBroadcast::has_yijunname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LevelUpYijunBroadcast::set_has_yijunname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LevelUpYijunBroadcast::clear_has_yijunname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LevelUpYijunBroadcast::clear_yijunname() {
  if (yijunname_ != &::google::protobuf::internal::kEmptyString) {
    yijunname_->clear();
  }
  clear_has_yijunname();
}
inline const ::std::string& LevelUpYijunBroadcast::yijunname() const {
  return *yijunname_;
}
inline void LevelUpYijunBroadcast::set_yijunname(const ::std::string& value) {
  set_has_yijunname();
  if (yijunname_ == &::google::protobuf::internal::kEmptyString) {
    yijunname_ = new ::std::string;
  }
  yijunname_->assign(value);
}
inline void LevelUpYijunBroadcast::set_yijunname(const char* value) {
  set_has_yijunname();
  if (yijunname_ == &::google::protobuf::internal::kEmptyString) {
    yijunname_ = new ::std::string;
  }
  yijunname_->assign(value);
}
inline void LevelUpYijunBroadcast::set_yijunname(const char* value, size_t size) {
  set_has_yijunname();
  if (yijunname_ == &::google::protobuf::internal::kEmptyString) {
    yijunname_ = new ::std::string;
  }
  yijunname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LevelUpYijunBroadcast::mutable_yijunname() {
  set_has_yijunname();
  if (yijunname_ == &::google::protobuf::internal::kEmptyString) {
    yijunname_ = new ::std::string;
  }
  return yijunname_;
}
inline ::std::string* LevelUpYijunBroadcast::release_yijunname() {
  clear_has_yijunname();
  if (yijunname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = yijunname_;
    yijunname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LevelUpYijunBroadcast::set_allocated_yijunname(::std::string* yijunname) {
  if (yijunname_ != &::google::protobuf::internal::kEmptyString) {
    delete yijunname_;
  }
  if (yijunname) {
    set_has_yijunname();
    yijunname_ = yijunname;
  } else {
    clear_has_yijunname();
    yijunname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 yijunLevel = 5;
inline bool LevelUpYijunBroadcast::has_yijunlevel() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LevelUpYijunBroadcast::set_has_yijunlevel() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LevelUpYijunBroadcast::clear_has_yijunlevel() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LevelUpYijunBroadcast::clear_yijunlevel() {
  yijunlevel_ = 0u;
  clear_has_yijunlevel();
}
inline ::google::protobuf::uint32 LevelUpYijunBroadcast::yijunlevel() const {
  return yijunlevel_;
}
inline void LevelUpYijunBroadcast::set_yijunlevel(::google::protobuf::uint32 value) {
  set_has_yijunlevel();
  yijunlevel_ = value;
}

// -------------------------------------------------------------------

// LevelUpYijunBuildingBroadcast

// required .sanguo.MsgID msgID = 1;
inline bool LevelUpYijunBuildingBroadcast::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LevelUpYijunBuildingBroadcast::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LevelUpYijunBuildingBroadcast::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LevelUpYijunBuildingBroadcast::clear_msgid() {
  msgid_ = 1;
  clear_has_msgid();
}
inline ::sanguo::MsgID LevelUpYijunBuildingBroadcast::msgid() const {
  return static_cast< ::sanguo::MsgID >(msgid_);
}
inline void LevelUpYijunBuildingBroadcast::set_msgid(::sanguo::MsgID value) {
  assert(::sanguo::MsgID_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// required .sanguo.StatusCode status = 2;
inline bool LevelUpYijunBuildingBroadcast::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LevelUpYijunBuildingBroadcast::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LevelUpYijunBuildingBroadcast::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LevelUpYijunBuildingBroadcast::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::sanguo::StatusCode LevelUpYijunBuildingBroadcast::status() const {
  return static_cast< ::sanguo::StatusCode >(status_);
}
inline void LevelUpYijunBuildingBroadcast::set_status(::sanguo::StatusCode value) {
  assert(::sanguo::StatusCode_IsValid(value));
  set_has_status();
  status_ = value;
}

// required string adminName = 3;
inline bool LevelUpYijunBuildingBroadcast::has_adminname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LevelUpYijunBuildingBroadcast::set_has_adminname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LevelUpYijunBuildingBroadcast::clear_has_adminname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LevelUpYijunBuildingBroadcast::clear_adminname() {
  if (adminname_ != &::google::protobuf::internal::kEmptyString) {
    adminname_->clear();
  }
  clear_has_adminname();
}
inline const ::std::string& LevelUpYijunBuildingBroadcast::adminname() const {
  return *adminname_;
}
inline void LevelUpYijunBuildingBroadcast::set_adminname(const ::std::string& value) {
  set_has_adminname();
  if (adminname_ == &::google::protobuf::internal::kEmptyString) {
    adminname_ = new ::std::string;
  }
  adminname_->assign(value);
}
inline void LevelUpYijunBuildingBroadcast::set_adminname(const char* value) {
  set_has_adminname();
  if (adminname_ == &::google::protobuf::internal::kEmptyString) {
    adminname_ = new ::std::string;
  }
  adminname_->assign(value);
}
inline void LevelUpYijunBuildingBroadcast::set_adminname(const char* value, size_t size) {
  set_has_adminname();
  if (adminname_ == &::google::protobuf::internal::kEmptyString) {
    adminname_ = new ::std::string;
  }
  adminname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LevelUpYijunBuildingBroadcast::mutable_adminname() {
  set_has_adminname();
  if (adminname_ == &::google::protobuf::internal::kEmptyString) {
    adminname_ = new ::std::string;
  }
  return adminname_;
}
inline ::std::string* LevelUpYijunBuildingBroadcast::release_adminname() {
  clear_has_adminname();
  if (adminname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = adminname_;
    adminname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LevelUpYijunBuildingBroadcast::set_allocated_adminname(::std::string* adminname) {
  if (adminname_ != &::google::protobuf::internal::kEmptyString) {
    delete adminname_;
  }
  if (adminname) {
    set_has_adminname();
    adminname_ = adminname;
  } else {
    clear_has_adminname();
    adminname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 buildingId = 4;
inline bool LevelUpYijunBuildingBroadcast::has_buildingid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LevelUpYijunBuildingBroadcast::set_has_buildingid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LevelUpYijunBuildingBroadcast::clear_has_buildingid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LevelUpYijunBuildingBroadcast::clear_buildingid() {
  buildingid_ = 0u;
  clear_has_buildingid();
}
inline ::google::protobuf::uint32 LevelUpYijunBuildingBroadcast::buildingid() const {
  return buildingid_;
}
inline void LevelUpYijunBuildingBroadcast::set_buildingid(::google::protobuf::uint32 value) {
  set_has_buildingid();
  buildingid_ = value;
}

// required uint32 buildingLevel = 5;
inline bool LevelUpYijunBuildingBroadcast::has_buildinglevel() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LevelUpYijunBuildingBroadcast::set_has_buildinglevel() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LevelUpYijunBuildingBroadcast::clear_has_buildinglevel() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LevelUpYijunBuildingBroadcast::clear_buildinglevel() {
  buildinglevel_ = 0u;
  clear_has_buildinglevel();
}
inline ::google::protobuf::uint32 LevelUpYijunBuildingBroadcast::buildinglevel() const {
  return buildinglevel_;
}
inline void LevelUpYijunBuildingBroadcast::set_buildinglevel(::google::protobuf::uint32 value) {
  set_has_buildinglevel();
  buildinglevel_ = value;
}

// -------------------------------------------------------------------

// SendAppBroadcast

// required .sanguo.MsgID msgID = 1;
inline bool SendAppBroadcast::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SendAppBroadcast::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SendAppBroadcast::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SendAppBroadcast::clear_msgid() {
  msgid_ = 1;
  clear_has_msgid();
}
inline ::sanguo::MsgID SendAppBroadcast::msgid() const {
  return static_cast< ::sanguo::MsgID >(msgid_);
}
inline void SendAppBroadcast::set_msgid(::sanguo::MsgID value) {
  assert(::sanguo::MsgID_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// required .sanguo.StatusCode status = 2;
inline bool SendAppBroadcast::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SendAppBroadcast::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SendAppBroadcast::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SendAppBroadcast::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::sanguo::StatusCode SendAppBroadcast::status() const {
  return static_cast< ::sanguo::StatusCode >(status_);
}
inline void SendAppBroadcast::set_status(::sanguo::StatusCode value) {
  assert(::sanguo::StatusCode_IsValid(value));
  set_has_status();
  status_ = value;
}

// required string roleName = 3;
inline bool SendAppBroadcast::has_rolename() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SendAppBroadcast::set_has_rolename() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SendAppBroadcast::clear_has_rolename() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SendAppBroadcast::clear_rolename() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    rolename_->clear();
  }
  clear_has_rolename();
}
inline const ::std::string& SendAppBroadcast::rolename() const {
  return *rolename_;
}
inline void SendAppBroadcast::set_rolename(const ::std::string& value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void SendAppBroadcast::set_rolename(const char* value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void SendAppBroadcast::set_rolename(const char* value, size_t size) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SendAppBroadcast::mutable_rolename() {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  return rolename_;
}
inline ::std::string* SendAppBroadcast::release_rolename() {
  clear_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rolename_;
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SendAppBroadcast::set_allocated_rolename(::std::string* rolename) {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (rolename) {
    set_has_rolename();
    rolename_ = rolename;
  } else {
    clear_has_rolename();
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// DemoteGeneralBroadcast

// required .sanguo.MsgID msgID = 1;
inline bool DemoteGeneralBroadcast::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DemoteGeneralBroadcast::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DemoteGeneralBroadcast::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DemoteGeneralBroadcast::clear_msgid() {
  msgid_ = 1;
  clear_has_msgid();
}
inline ::sanguo::MsgID DemoteGeneralBroadcast::msgid() const {
  return static_cast< ::sanguo::MsgID >(msgid_);
}
inline void DemoteGeneralBroadcast::set_msgid(::sanguo::MsgID value) {
  assert(::sanguo::MsgID_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// required .sanguo.StatusCode status = 2;
inline bool DemoteGeneralBroadcast::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DemoteGeneralBroadcast::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DemoteGeneralBroadcast::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DemoteGeneralBroadcast::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::sanguo::StatusCode DemoteGeneralBroadcast::status() const {
  return static_cast< ::sanguo::StatusCode >(status_);
}
inline void DemoteGeneralBroadcast::set_status(::sanguo::StatusCode value) {
  assert(::sanguo::StatusCode_IsValid(value));
  set_has_status();
  status_ = value;
}

// required uint64 adminID = 3;
inline bool DemoteGeneralBroadcast::has_adminid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DemoteGeneralBroadcast::set_has_adminid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DemoteGeneralBroadcast::clear_has_adminid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DemoteGeneralBroadcast::clear_adminid() {
  adminid_ = GOOGLE_ULONGLONG(0);
  clear_has_adminid();
}
inline ::google::protobuf::uint64 DemoteGeneralBroadcast::adminid() const {
  return adminid_;
}
inline void DemoteGeneralBroadcast::set_adminid(::google::protobuf::uint64 value) {
  set_has_adminid();
  adminid_ = value;
}

// required string adminName = 4;
inline bool DemoteGeneralBroadcast::has_adminname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DemoteGeneralBroadcast::set_has_adminname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DemoteGeneralBroadcast::clear_has_adminname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DemoteGeneralBroadcast::clear_adminname() {
  if (adminname_ != &::google::protobuf::internal::kEmptyString) {
    adminname_->clear();
  }
  clear_has_adminname();
}
inline const ::std::string& DemoteGeneralBroadcast::adminname() const {
  return *adminname_;
}
inline void DemoteGeneralBroadcast::set_adminname(const ::std::string& value) {
  set_has_adminname();
  if (adminname_ == &::google::protobuf::internal::kEmptyString) {
    adminname_ = new ::std::string;
  }
  adminname_->assign(value);
}
inline void DemoteGeneralBroadcast::set_adminname(const char* value) {
  set_has_adminname();
  if (adminname_ == &::google::protobuf::internal::kEmptyString) {
    adminname_ = new ::std::string;
  }
  adminname_->assign(value);
}
inline void DemoteGeneralBroadcast::set_adminname(const char* value, size_t size) {
  set_has_adminname();
  if (adminname_ == &::google::protobuf::internal::kEmptyString) {
    adminname_ = new ::std::string;
  }
  adminname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DemoteGeneralBroadcast::mutable_adminname() {
  set_has_adminname();
  if (adminname_ == &::google::protobuf::internal::kEmptyString) {
    adminname_ = new ::std::string;
  }
  return adminname_;
}
inline ::std::string* DemoteGeneralBroadcast::release_adminname() {
  clear_has_adminname();
  if (adminname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = adminname_;
    adminname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DemoteGeneralBroadcast::set_allocated_adminname(::std::string* adminname) {
  if (adminname_ != &::google::protobuf::internal::kEmptyString) {
    delete adminname_;
  }
  if (adminname) {
    set_has_adminname();
    adminname_ = adminname;
  } else {
    clear_has_adminname();
    adminname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint64 roleID = 5;
inline bool DemoteGeneralBroadcast::has_roleid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DemoteGeneralBroadcast::set_has_roleid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DemoteGeneralBroadcast::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DemoteGeneralBroadcast::clear_roleid() {
  roleid_ = GOOGLE_ULONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::uint64 DemoteGeneralBroadcast::roleid() const {
  return roleid_;
}
inline void DemoteGeneralBroadcast::set_roleid(::google::protobuf::uint64 value) {
  set_has_roleid();
  roleid_ = value;
}

// required string roleName = 6;
inline bool DemoteGeneralBroadcast::has_rolename() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DemoteGeneralBroadcast::set_has_rolename() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DemoteGeneralBroadcast::clear_has_rolename() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DemoteGeneralBroadcast::clear_rolename() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    rolename_->clear();
  }
  clear_has_rolename();
}
inline const ::std::string& DemoteGeneralBroadcast::rolename() const {
  return *rolename_;
}
inline void DemoteGeneralBroadcast::set_rolename(const ::std::string& value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void DemoteGeneralBroadcast::set_rolename(const char* value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void DemoteGeneralBroadcast::set_rolename(const char* value, size_t size) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DemoteGeneralBroadcast::mutable_rolename() {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  return rolename_;
}
inline ::std::string* DemoteGeneralBroadcast::release_rolename() {
  clear_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rolename_;
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DemoteGeneralBroadcast::set_allocated_rolename(::std::string* rolename) {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (rolename) {
    set_has_rolename();
    rolename_ = rolename;
  } else {
    clear_has_rolename();
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// KickMemberBroadcast

// required .sanguo.MsgID msgID = 1;
inline bool KickMemberBroadcast::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KickMemberBroadcast::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KickMemberBroadcast::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KickMemberBroadcast::clear_msgid() {
  msgid_ = 1;
  clear_has_msgid();
}
inline ::sanguo::MsgID KickMemberBroadcast::msgid() const {
  return static_cast< ::sanguo::MsgID >(msgid_);
}
inline void KickMemberBroadcast::set_msgid(::sanguo::MsgID value) {
  assert(::sanguo::MsgID_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// required .sanguo.StatusCode status = 2;
inline bool KickMemberBroadcast::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KickMemberBroadcast::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KickMemberBroadcast::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KickMemberBroadcast::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::sanguo::StatusCode KickMemberBroadcast::status() const {
  return static_cast< ::sanguo::StatusCode >(status_);
}
inline void KickMemberBroadcast::set_status(::sanguo::StatusCode value) {
  assert(::sanguo::StatusCode_IsValid(value));
  set_has_status();
  status_ = value;
}

// required uint64 adminID = 3;
inline bool KickMemberBroadcast::has_adminid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void KickMemberBroadcast::set_has_adminid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void KickMemberBroadcast::clear_has_adminid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void KickMemberBroadcast::clear_adminid() {
  adminid_ = GOOGLE_ULONGLONG(0);
  clear_has_adminid();
}
inline ::google::protobuf::uint64 KickMemberBroadcast::adminid() const {
  return adminid_;
}
inline void KickMemberBroadcast::set_adminid(::google::protobuf::uint64 value) {
  set_has_adminid();
  adminid_ = value;
}

// required string adminName = 4;
inline bool KickMemberBroadcast::has_adminname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void KickMemberBroadcast::set_has_adminname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void KickMemberBroadcast::clear_has_adminname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void KickMemberBroadcast::clear_adminname() {
  if (adminname_ != &::google::protobuf::internal::kEmptyString) {
    adminname_->clear();
  }
  clear_has_adminname();
}
inline const ::std::string& KickMemberBroadcast::adminname() const {
  return *adminname_;
}
inline void KickMemberBroadcast::set_adminname(const ::std::string& value) {
  set_has_adminname();
  if (adminname_ == &::google::protobuf::internal::kEmptyString) {
    adminname_ = new ::std::string;
  }
  adminname_->assign(value);
}
inline void KickMemberBroadcast::set_adminname(const char* value) {
  set_has_adminname();
  if (adminname_ == &::google::protobuf::internal::kEmptyString) {
    adminname_ = new ::std::string;
  }
  adminname_->assign(value);
}
inline void KickMemberBroadcast::set_adminname(const char* value, size_t size) {
  set_has_adminname();
  if (adminname_ == &::google::protobuf::internal::kEmptyString) {
    adminname_ = new ::std::string;
  }
  adminname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* KickMemberBroadcast::mutable_adminname() {
  set_has_adminname();
  if (adminname_ == &::google::protobuf::internal::kEmptyString) {
    adminname_ = new ::std::string;
  }
  return adminname_;
}
inline ::std::string* KickMemberBroadcast::release_adminname() {
  clear_has_adminname();
  if (adminname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = adminname_;
    adminname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void KickMemberBroadcast::set_allocated_adminname(::std::string* adminname) {
  if (adminname_ != &::google::protobuf::internal::kEmptyString) {
    delete adminname_;
  }
  if (adminname) {
    set_has_adminname();
    adminname_ = adminname;
  } else {
    clear_has_adminname();
    adminname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint64 roleID = 5;
inline bool KickMemberBroadcast::has_roleid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void KickMemberBroadcast::set_has_roleid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void KickMemberBroadcast::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void KickMemberBroadcast::clear_roleid() {
  roleid_ = GOOGLE_ULONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::uint64 KickMemberBroadcast::roleid() const {
  return roleid_;
}
inline void KickMemberBroadcast::set_roleid(::google::protobuf::uint64 value) {
  set_has_roleid();
  roleid_ = value;
}

// required string roleName = 6;
inline bool KickMemberBroadcast::has_rolename() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void KickMemberBroadcast::set_has_rolename() {
  _has_bits_[0] |= 0x00000020u;
}
inline void KickMemberBroadcast::clear_has_rolename() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void KickMemberBroadcast::clear_rolename() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    rolename_->clear();
  }
  clear_has_rolename();
}
inline const ::std::string& KickMemberBroadcast::rolename() const {
  return *rolename_;
}
inline void KickMemberBroadcast::set_rolename(const ::std::string& value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void KickMemberBroadcast::set_rolename(const char* value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void KickMemberBroadcast::set_rolename(const char* value, size_t size) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* KickMemberBroadcast::mutable_rolename() {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  return rolename_;
}
inline ::std::string* KickMemberBroadcast::release_rolename() {
  clear_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rolename_;
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void KickMemberBroadcast::set_allocated_rolename(::std::string* rolename) {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (rolename) {
    set_has_rolename();
    rolename_ = rolename;
  } else {
    clear_has_rolename();
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ExitYijunBroadcast

// required .sanguo.MsgID msgID = 1;
inline bool ExitYijunBroadcast::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExitYijunBroadcast::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExitYijunBroadcast::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExitYijunBroadcast::clear_msgid() {
  msgid_ = 1;
  clear_has_msgid();
}
inline ::sanguo::MsgID ExitYijunBroadcast::msgid() const {
  return static_cast< ::sanguo::MsgID >(msgid_);
}
inline void ExitYijunBroadcast::set_msgid(::sanguo::MsgID value) {
  assert(::sanguo::MsgID_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// required .sanguo.StatusCode status = 2;
inline bool ExitYijunBroadcast::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExitYijunBroadcast::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExitYijunBroadcast::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExitYijunBroadcast::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::sanguo::StatusCode ExitYijunBroadcast::status() const {
  return static_cast< ::sanguo::StatusCode >(status_);
}
inline void ExitYijunBroadcast::set_status(::sanguo::StatusCode value) {
  assert(::sanguo::StatusCode_IsValid(value));
  set_has_status();
  status_ = value;
}

// required string roleName = 3;
inline bool ExitYijunBroadcast::has_rolename() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ExitYijunBroadcast::set_has_rolename() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ExitYijunBroadcast::clear_has_rolename() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ExitYijunBroadcast::clear_rolename() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    rolename_->clear();
  }
  clear_has_rolename();
}
inline const ::std::string& ExitYijunBroadcast::rolename() const {
  return *rolename_;
}
inline void ExitYijunBroadcast::set_rolename(const ::std::string& value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void ExitYijunBroadcast::set_rolename(const char* value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void ExitYijunBroadcast::set_rolename(const char* value, size_t size) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ExitYijunBroadcast::mutable_rolename() {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  return rolename_;
}
inline ::std::string* ExitYijunBroadcast::release_rolename() {
  clear_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rolename_;
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ExitYijunBroadcast::set_allocated_rolename(::std::string* rolename) {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (rolename) {
    set_has_rolename();
    rolename_ = rolename;
  } else {
    clear_has_rolename();
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SendYijunCaptureBroadcast

// required .sanguo.MsgID msgID = 1;
inline bool SendYijunCaptureBroadcast::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SendYijunCaptureBroadcast::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SendYijunCaptureBroadcast::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SendYijunCaptureBroadcast::clear_msgid() {
  msgid_ = 1;
  clear_has_msgid();
}
inline ::sanguo::MsgID SendYijunCaptureBroadcast::msgid() const {
  return static_cast< ::sanguo::MsgID >(msgid_);
}
inline void SendYijunCaptureBroadcast::set_msgid(::sanguo::MsgID value) {
  assert(::sanguo::MsgID_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// required .sanguo.StatusCode status = 2;
inline bool SendYijunCaptureBroadcast::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SendYijunCaptureBroadcast::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SendYijunCaptureBroadcast::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SendYijunCaptureBroadcast::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::sanguo::StatusCode SendYijunCaptureBroadcast::status() const {
  return static_cast< ::sanguo::StatusCode >(status_);
}
inline void SendYijunCaptureBroadcast::set_status(::sanguo::StatusCode value) {
  assert(::sanguo::StatusCode_IsValid(value));
  set_has_status();
  status_ = value;
}

// -------------------------------------------------------------------

// SendYijunCaptureResultBroadcast

// required .sanguo.MsgID msgID = 1;
inline bool SendYijunCaptureResultBroadcast::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SendYijunCaptureResultBroadcast::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SendYijunCaptureResultBroadcast::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SendYijunCaptureResultBroadcast::clear_msgid() {
  msgid_ = 1;
  clear_has_msgid();
}
inline ::sanguo::MsgID SendYijunCaptureResultBroadcast::msgid() const {
  return static_cast< ::sanguo::MsgID >(msgid_);
}
inline void SendYijunCaptureResultBroadcast::set_msgid(::sanguo::MsgID value) {
  assert(::sanguo::MsgID_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// required .sanguo.StatusCode status = 2;
inline bool SendYijunCaptureResultBroadcast::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SendYijunCaptureResultBroadcast::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SendYijunCaptureResultBroadcast::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SendYijunCaptureResultBroadcast::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::sanguo::StatusCode SendYijunCaptureResultBroadcast::status() const {
  return static_cast< ::sanguo::StatusCode >(status_);
}
inline void SendYijunCaptureResultBroadcast::set_status(::sanguo::StatusCode value) {
  assert(::sanguo::StatusCode_IsValid(value));
  set_has_status();
  status_ = value;
}

// optional uint32 result = 3;
inline bool SendYijunCaptureResultBroadcast::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SendYijunCaptureResultBroadcast::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SendYijunCaptureResultBroadcast::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SendYijunCaptureResultBroadcast::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 SendYijunCaptureResultBroadcast::result() const {
  return result_;
}
inline void SendYijunCaptureResultBroadcast::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
}

// optional uint64 weathePD = 4;
inline bool SendYijunCaptureResultBroadcast::has_weathepd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SendYijunCaptureResultBroadcast::set_has_weathepd() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SendYijunCaptureResultBroadcast::clear_has_weathepd() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SendYijunCaptureResultBroadcast::clear_weathepd() {
  weathepd_ = GOOGLE_ULONGLONG(0);
  clear_has_weathepd();
}
inline ::google::protobuf::uint64 SendYijunCaptureResultBroadcast::weathepd() const {
  return weathepd_;
}
inline void SendYijunCaptureResultBroadcast::set_weathepd(::google::protobuf::uint64 value) {
  set_has_weathepd();
  weathepd_ = value;
}

// optional string roleName = 5;
inline bool SendYijunCaptureResultBroadcast::has_rolename() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SendYijunCaptureResultBroadcast::set_has_rolename() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SendYijunCaptureResultBroadcast::clear_has_rolename() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SendYijunCaptureResultBroadcast::clear_rolename() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    rolename_->clear();
  }
  clear_has_rolename();
}
inline const ::std::string& SendYijunCaptureResultBroadcast::rolename() const {
  return *rolename_;
}
inline void SendYijunCaptureResultBroadcast::set_rolename(const ::std::string& value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void SendYijunCaptureResultBroadcast::set_rolename(const char* value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void SendYijunCaptureResultBroadcast::set_rolename(const char* value, size_t size) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SendYijunCaptureResultBroadcast::mutable_rolename() {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  return rolename_;
}
inline ::std::string* SendYijunCaptureResultBroadcast::release_rolename() {
  clear_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rolename_;
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SendYijunCaptureResultBroadcast::set_allocated_rolename(::std::string* rolename) {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (rolename) {
    set_has_rolename();
    rolename_ = rolename;
  } else {
    clear_has_rolename();
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 roleID = 6;
inline bool SendYijunCaptureResultBroadcast::has_roleid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SendYijunCaptureResultBroadcast::set_has_roleid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SendYijunCaptureResultBroadcast::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SendYijunCaptureResultBroadcast::clear_roleid() {
  roleid_ = GOOGLE_ULONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::uint64 SendYijunCaptureResultBroadcast::roleid() const {
  return roleid_;
}
inline void SendYijunCaptureResultBroadcast::set_roleid(::google::protobuf::uint64 value) {
  set_has_roleid();
  roleid_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sanguo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_yijun_5fbroadcast_2eproto__INCLUDED
