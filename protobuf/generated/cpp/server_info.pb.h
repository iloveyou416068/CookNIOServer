// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server_info.proto

#ifndef PROTOBUF_server_5finfo_2eproto__INCLUDED
#define PROTOBUF_server_5finfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "constants.pb.h"
// @@protoc_insertion_point(includes)

namespace sanguo {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_server_5finfo_2eproto();
void protobuf_AssignDesc_server_5finfo_2eproto();
void protobuf_ShutdownFile_server_5finfo_2eproto();

class MsgServerInfoData;

// ===================================================================

class MsgServerInfoData : public ::google::protobuf::MessageLite {
 public:
  MsgServerInfoData();
  virtual ~MsgServerInfoData();

  MsgServerInfoData(const MsgServerInfoData& from);

  inline MsgServerInfoData& operator=(const MsgServerInfoData& from) {
    CopyFrom(from);
    return *this;
  }

  static const MsgServerInfoData& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const MsgServerInfoData* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(MsgServerInfoData* other);

  // implements Message ----------------------------------------------

  MsgServerInfoData* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const MsgServerInfoData& from);
  void MergeFrom(const MsgServerInfoData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 serverID = 1;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIDFieldNumber = 1;
  inline ::google::protobuf::uint32 serverid() const;
  inline void set_serverid(::google::protobuf::uint32 value);

  // required string serverIP = 2;
  inline bool has_serverip() const;
  inline void clear_serverip();
  static const int kServerIPFieldNumber = 2;
  inline const ::std::string& serverip() const;
  inline void set_serverip(const ::std::string& value);
  inline void set_serverip(const char* value);
  inline void set_serverip(const char* value, size_t size);
  inline ::std::string* mutable_serverip();
  inline ::std::string* release_serverip();
  inline void set_allocated_serverip(::std::string* serverip);

  // required uint32 serverPort = 3;
  inline bool has_serverport() const;
  inline void clear_serverport();
  static const int kServerPortFieldNumber = 3;
  inline ::google::protobuf::uint32 serverport() const;
  inline void set_serverport(::google::protobuf::uint32 value);

  // required string serverName = 4;
  inline bool has_servername() const;
  inline void clear_servername();
  static const int kServerNameFieldNumber = 4;
  inline const ::std::string& servername() const;
  inline void set_servername(const ::std::string& value);
  inline void set_servername(const char* value);
  inline void set_servername(const char* value, size_t size);
  inline ::std::string* mutable_servername();
  inline ::std::string* release_servername();
  inline void set_allocated_servername(::std::string* servername);

  // required uint32 roleCount = 5;
  inline bool has_rolecount() const;
  inline void clear_rolecount();
  static const int kRoleCountFieldNumber = 5;
  inline ::google::protobuf::uint32 rolecount() const;
  inline void set_rolecount(::google::protobuf::uint32 value);

  // required uint32 status = 6;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 6;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:sanguo.MsgServerInfoData)
 private:
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_serverip();
  inline void clear_has_serverip();
  inline void set_has_serverport();
  inline void clear_has_serverport();
  inline void set_has_servername();
  inline void clear_has_servername();
  inline void set_has_rolecount();
  inline void clear_has_rolecount();
  inline void set_has_status();
  inline void clear_has_status();

  ::std::string* serverip_;
  ::google::protobuf::uint32 serverid_;
  ::google::protobuf::uint32 serverport_;
  ::std::string* servername_;
  ::google::protobuf::uint32 rolecount_;
  ::google::protobuf::uint32 status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_server_5finfo_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_server_5finfo_2eproto();
  #endif
  friend void protobuf_AssignDesc_server_5finfo_2eproto();
  friend void protobuf_ShutdownFile_server_5finfo_2eproto();

  void InitAsDefaultInstance();
  static MsgServerInfoData* default_instance_;
};
// ===================================================================


// ===================================================================

// MsgServerInfoData

// required uint32 serverID = 1;
inline bool MsgServerInfoData::has_serverid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgServerInfoData::set_has_serverid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgServerInfoData::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgServerInfoData::clear_serverid() {
  serverid_ = 0u;
  clear_has_serverid();
}
inline ::google::protobuf::uint32 MsgServerInfoData::serverid() const {
  return serverid_;
}
inline void MsgServerInfoData::set_serverid(::google::protobuf::uint32 value) {
  set_has_serverid();
  serverid_ = value;
}

// required string serverIP = 2;
inline bool MsgServerInfoData::has_serverip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgServerInfoData::set_has_serverip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgServerInfoData::clear_has_serverip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgServerInfoData::clear_serverip() {
  if (serverip_ != &::google::protobuf::internal::kEmptyString) {
    serverip_->clear();
  }
  clear_has_serverip();
}
inline const ::std::string& MsgServerInfoData::serverip() const {
  return *serverip_;
}
inline void MsgServerInfoData::set_serverip(const ::std::string& value) {
  set_has_serverip();
  if (serverip_ == &::google::protobuf::internal::kEmptyString) {
    serverip_ = new ::std::string;
  }
  serverip_->assign(value);
}
inline void MsgServerInfoData::set_serverip(const char* value) {
  set_has_serverip();
  if (serverip_ == &::google::protobuf::internal::kEmptyString) {
    serverip_ = new ::std::string;
  }
  serverip_->assign(value);
}
inline void MsgServerInfoData::set_serverip(const char* value, size_t size) {
  set_has_serverip();
  if (serverip_ == &::google::protobuf::internal::kEmptyString) {
    serverip_ = new ::std::string;
  }
  serverip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgServerInfoData::mutable_serverip() {
  set_has_serverip();
  if (serverip_ == &::google::protobuf::internal::kEmptyString) {
    serverip_ = new ::std::string;
  }
  return serverip_;
}
inline ::std::string* MsgServerInfoData::release_serverip() {
  clear_has_serverip();
  if (serverip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = serverip_;
    serverip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MsgServerInfoData::set_allocated_serverip(::std::string* serverip) {
  if (serverip_ != &::google::protobuf::internal::kEmptyString) {
    delete serverip_;
  }
  if (serverip) {
    set_has_serverip();
    serverip_ = serverip;
  } else {
    clear_has_serverip();
    serverip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 serverPort = 3;
inline bool MsgServerInfoData::has_serverport() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgServerInfoData::set_has_serverport() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgServerInfoData::clear_has_serverport() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgServerInfoData::clear_serverport() {
  serverport_ = 0u;
  clear_has_serverport();
}
inline ::google::protobuf::uint32 MsgServerInfoData::serverport() const {
  return serverport_;
}
inline void MsgServerInfoData::set_serverport(::google::protobuf::uint32 value) {
  set_has_serverport();
  serverport_ = value;
}

// required string serverName = 4;
inline bool MsgServerInfoData::has_servername() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgServerInfoData::set_has_servername() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgServerInfoData::clear_has_servername() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgServerInfoData::clear_servername() {
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    servername_->clear();
  }
  clear_has_servername();
}
inline const ::std::string& MsgServerInfoData::servername() const {
  return *servername_;
}
inline void MsgServerInfoData::set_servername(const ::std::string& value) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(value);
}
inline void MsgServerInfoData::set_servername(const char* value) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(value);
}
inline void MsgServerInfoData::set_servername(const char* value, size_t size) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgServerInfoData::mutable_servername() {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  return servername_;
}
inline ::std::string* MsgServerInfoData::release_servername() {
  clear_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = servername_;
    servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MsgServerInfoData::set_allocated_servername(::std::string* servername) {
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    delete servername_;
  }
  if (servername) {
    set_has_servername();
    servername_ = servername;
  } else {
    clear_has_servername();
    servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 roleCount = 5;
inline bool MsgServerInfoData::has_rolecount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MsgServerInfoData::set_has_rolecount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MsgServerInfoData::clear_has_rolecount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MsgServerInfoData::clear_rolecount() {
  rolecount_ = 0u;
  clear_has_rolecount();
}
inline ::google::protobuf::uint32 MsgServerInfoData::rolecount() const {
  return rolecount_;
}
inline void MsgServerInfoData::set_rolecount(::google::protobuf::uint32 value) {
  set_has_rolecount();
  rolecount_ = value;
}

// required uint32 status = 6;
inline bool MsgServerInfoData::has_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MsgServerInfoData::set_has_status() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MsgServerInfoData::clear_has_status() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MsgServerInfoData::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 MsgServerInfoData::status() const {
  return status_;
}
inline void MsgServerInfoData::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sanguo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_server_5finfo_2eproto__INCLUDED
