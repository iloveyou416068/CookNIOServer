// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: enter_main_city.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "enter_main_city.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace sanguo {

void protobuf_ShutdownFile_enter_5fmain_5fcity_2eproto() {
  delete EnterMainCityRequest::default_instance_;
  delete EnterMainCityResponse::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_enter_5fmain_5fcity_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_enter_5fmain_5fcity_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::sanguo::protobuf_AddDesc_msg_5fid_2eproto();
  ::sanguo::protobuf_AddDesc_msg_5fstatus_5fcode_2eproto();
  ::sanguo::protobuf_AddDesc_role_5fin_5fmain_5fcity_2eproto();
  ::sanguo::protobuf_AddDesc_statues_5fin_5fmain_5fcity_2eproto();
  ::sanguo::protobuf_AddDesc_pet_2eproto();
  EnterMainCityRequest::default_instance_ = new EnterMainCityRequest();
  EnterMainCityResponse::default_instance_ = new EnterMainCityResponse();
  EnterMainCityRequest::default_instance_->InitAsDefaultInstance();
  EnterMainCityResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_enter_5fmain_5fcity_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_enter_5fmain_5fcity_2eproto_once_);
void protobuf_AddDesc_enter_5fmain_5fcity_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_enter_5fmain_5fcity_2eproto_once_,
                 &protobuf_AddDesc_enter_5fmain_5fcity_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_enter_5fmain_5fcity_2eproto {
  StaticDescriptorInitializer_enter_5fmain_5fcity_2eproto() {
    protobuf_AddDesc_enter_5fmain_5fcity_2eproto();
  }
} static_descriptor_initializer_enter_5fmain_5fcity_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int EnterMainCityRequest::kMsgIDFieldNumber;
const int EnterMainCityRequest::kCityIDFieldNumber;
const int EnterMainCityRequest::kEnterCityTypeFieldNumber;
#endif  // !_MSC_VER

EnterMainCityRequest::EnterMainCityRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void EnterMainCityRequest::InitAsDefaultInstance() {
}

EnterMainCityRequest::EnterMainCityRequest(const EnterMainCityRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void EnterMainCityRequest::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 1;
  cityid_ = 0u;
  entercitytype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterMainCityRequest::~EnterMainCityRequest() {
  SharedDtor();
}

void EnterMainCityRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EnterMainCityRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EnterMainCityRequest& EnterMainCityRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_enter_5fmain_5fcity_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_enter_5fmain_5fcity_2eproto();
#endif
  return *default_instance_;
}

EnterMainCityRequest* EnterMainCityRequest::default_instance_ = NULL;

EnterMainCityRequest* EnterMainCityRequest::New() const {
  return new EnterMainCityRequest;
}

void EnterMainCityRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 1;
    cityid_ = 0u;
    entercitytype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool EnterMainCityRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sanguo.MsgID msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::sanguo::MsgID >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cityID;
        break;
      }

      // required uint32 cityID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cityID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cityid_)));
          set_has_cityid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_enterCityType;
        break;
      }

      // required uint32 enterCityType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enterCityType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &entercitytype_)));
          set_has_entercitytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EnterMainCityRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .sanguo.MsgID msgID = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // required uint32 cityID = 2;
  if (has_cityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cityid(), output);
  }

  // required uint32 enterCityType = 3;
  if (has_entercitytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->entercitytype(), output);
  }

}

int EnterMainCityRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .sanguo.MsgID msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // required uint32 cityID = 2;
    if (has_cityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cityid());
    }

    // required uint32 enterCityType = 3;
    if (has_entercitytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->entercitytype());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterMainCityRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EnterMainCityRequest*>(&from));
}

void EnterMainCityRequest::MergeFrom(const EnterMainCityRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_cityid()) {
      set_cityid(from.cityid());
    }
    if (from.has_entercitytype()) {
      set_entercitytype(from.entercitytype());
    }
  }
}

void EnterMainCityRequest::CopyFrom(const EnterMainCityRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterMainCityRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void EnterMainCityRequest::Swap(EnterMainCityRequest* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(cityid_, other->cityid_);
    std::swap(entercitytype_, other->entercitytype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EnterMainCityRequest::GetTypeName() const {
  return "sanguo.EnterMainCityRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int EnterMainCityResponse::kMsgIDFieldNumber;
const int EnterMainCityResponse::kStatusFieldNumber;
const int EnterMainCityResponse::kEnterCityTypeFieldNumber;
const int EnterMainCityResponse::kRoleInCityFieldNumber;
const int EnterMainCityResponse::kStatuesInCityFieldNumber;
const int EnterMainCityResponse::kAllPetFieldNumber;
#endif  // !_MSC_VER

EnterMainCityResponse::EnterMainCityResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void EnterMainCityResponse::InitAsDefaultInstance() {
}

EnterMainCityResponse::EnterMainCityResponse(const EnterMainCityResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void EnterMainCityResponse::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 1;
  status_ = 0;
  entercitytype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterMainCityResponse::~EnterMainCityResponse() {
  SharedDtor();
}

void EnterMainCityResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EnterMainCityResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EnterMainCityResponse& EnterMainCityResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_enter_5fmain_5fcity_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_enter_5fmain_5fcity_2eproto();
#endif
  return *default_instance_;
}

EnterMainCityResponse* EnterMainCityResponse::default_instance_ = NULL;

EnterMainCityResponse* EnterMainCityResponse::New() const {
  return new EnterMainCityResponse;
}

void EnterMainCityResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 1;
    status_ = 0;
    entercitytype_ = 0u;
  }
  roleincity_.Clear();
  statuesincity_.Clear();
  allpet_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool EnterMainCityResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sanguo.MsgID msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::sanguo::MsgID >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .sanguo.StatusCode status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::StatusCode_IsValid(value)) {
            set_status(static_cast< ::sanguo::StatusCode >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_enterCityType;
        break;
      }

      // optional uint32 enterCityType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enterCityType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &entercitytype_)));
          set_has_entercitytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_roleInCity;
        break;
      }

      // repeated .sanguo.MsgRoleInMainCity roleInCity = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleInCity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roleincity()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_roleInCity;
        if (input->ExpectTag(42)) goto parse_statuesInCity;
        break;
      }

      // repeated .sanguo.MsgStatuesInMainCity statuesInCity = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_statuesInCity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_statuesincity()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_statuesInCity;
        if (input->ExpectTag(50)) goto parse_allPet;
        break;
      }

      // repeated .sanguo.MsgPet allPet = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_allPet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_allpet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_allPet;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EnterMainCityResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .sanguo.MsgID msgID = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // required .sanguo.StatusCode status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // optional uint32 enterCityType = 3;
  if (has_entercitytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->entercitytype(), output);
  }

  // repeated .sanguo.MsgRoleInMainCity roleInCity = 4;
  for (int i = 0; i < this->roleincity_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->roleincity(i), output);
  }

  // repeated .sanguo.MsgStatuesInMainCity statuesInCity = 5;
  for (int i = 0; i < this->statuesincity_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->statuesincity(i), output);
  }

  // repeated .sanguo.MsgPet allPet = 6;
  for (int i = 0; i < this->allpet_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->allpet(i), output);
  }

}

int EnterMainCityResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .sanguo.MsgID msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // required .sanguo.StatusCode status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional uint32 enterCityType = 3;
    if (has_entercitytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->entercitytype());
    }

  }
  // repeated .sanguo.MsgRoleInMainCity roleInCity = 4;
  total_size += 1 * this->roleincity_size();
  for (int i = 0; i < this->roleincity_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roleincity(i));
  }

  // repeated .sanguo.MsgStatuesInMainCity statuesInCity = 5;
  total_size += 1 * this->statuesincity_size();
  for (int i = 0; i < this->statuesincity_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->statuesincity(i));
  }

  // repeated .sanguo.MsgPet allPet = 6;
  total_size += 1 * this->allpet_size();
  for (int i = 0; i < this->allpet_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->allpet(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterMainCityResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EnterMainCityResponse*>(&from));
}

void EnterMainCityResponse::MergeFrom(const EnterMainCityResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  roleincity_.MergeFrom(from.roleincity_);
  statuesincity_.MergeFrom(from.statuesincity_);
  allpet_.MergeFrom(from.allpet_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_entercitytype()) {
      set_entercitytype(from.entercitytype());
    }
  }
}

void EnterMainCityResponse::CopyFrom(const EnterMainCityResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterMainCityResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < roleincity_size(); i++) {
    if (!this->roleincity(i).IsInitialized()) return false;
  }
  for (int i = 0; i < statuesincity_size(); i++) {
    if (!this->statuesincity(i).IsInitialized()) return false;
  }
  for (int i = 0; i < allpet_size(); i++) {
    if (!this->allpet(i).IsInitialized()) return false;
  }
  return true;
}

void EnterMainCityResponse::Swap(EnterMainCityResponse* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(status_, other->status_);
    std::swap(entercitytype_, other->entercitytype_);
    roleincity_.Swap(&other->roleincity_);
    statuesincity_.Swap(&other->statuesincity_);
    allpet_.Swap(&other->allpet_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EnterMainCityResponse::GetTypeName() const {
  return "sanguo.EnterMainCityResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sanguo

// @@protoc_insertion_point(global_scope)
