// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: get_leaderboard.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "get_leaderboard.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace sanguo {

void protobuf_ShutdownFile_get_5fleaderboard_2eproto() {
  delete GetLeaderboardRequest::default_instance_;
  delete GetLeaderboardResponse::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_get_5fleaderboard_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_get_5fleaderboard_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::sanguo::protobuf_AddDesc_msg_5fid_2eproto();
  ::sanguo::protobuf_AddDesc_msg_5fstatus_5fcode_2eproto();
  ::sanguo::protobuf_AddDesc_role_5frank_2eproto();
  GetLeaderboardRequest::default_instance_ = new GetLeaderboardRequest();
  GetLeaderboardResponse::default_instance_ = new GetLeaderboardResponse();
  GetLeaderboardRequest::default_instance_->InitAsDefaultInstance();
  GetLeaderboardResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_get_5fleaderboard_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_get_5fleaderboard_2eproto_once_);
void protobuf_AddDesc_get_5fleaderboard_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_get_5fleaderboard_2eproto_once_,
                 &protobuf_AddDesc_get_5fleaderboard_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_get_5fleaderboard_2eproto {
  StaticDescriptorInitializer_get_5fleaderboard_2eproto() {
    protobuf_AddDesc_get_5fleaderboard_2eproto();
  }
} static_descriptor_initializer_get_5fleaderboard_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int GetLeaderboardRequest::kMsgIDFieldNumber;
#endif  // !_MSC_VER

GetLeaderboardRequest::GetLeaderboardRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GetLeaderboardRequest::InitAsDefaultInstance() {
}

GetLeaderboardRequest::GetLeaderboardRequest(const GetLeaderboardRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GetLeaderboardRequest::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetLeaderboardRequest::~GetLeaderboardRequest() {
  SharedDtor();
}

void GetLeaderboardRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetLeaderboardRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetLeaderboardRequest& GetLeaderboardRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_get_5fleaderboard_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_get_5fleaderboard_2eproto();
#endif
  return *default_instance_;
}

GetLeaderboardRequest* GetLeaderboardRequest::default_instance_ = NULL;

GetLeaderboardRequest* GetLeaderboardRequest::New() const {
  return new GetLeaderboardRequest;
}

void GetLeaderboardRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GetLeaderboardRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sanguo.MsgID msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::sanguo::MsgID >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetLeaderboardRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .sanguo.MsgID msgID = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

}

int GetLeaderboardRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .sanguo.MsgID msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetLeaderboardRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetLeaderboardRequest*>(&from));
}

void GetLeaderboardRequest::MergeFrom(const GetLeaderboardRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
}

void GetLeaderboardRequest::CopyFrom(const GetLeaderboardRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLeaderboardRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetLeaderboardRequest::Swap(GetLeaderboardRequest* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetLeaderboardRequest::GetTypeName() const {
  return "sanguo.GetLeaderboardRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int GetLeaderboardResponse::kMsgIDFieldNumber;
const int GetLeaderboardResponse::kStatusFieldNumber;
const int GetLeaderboardResponse::kRoleLevelBoardFieldNumber;
const int GetLeaderboardResponse::kRoleFightBoardFieldNumber;
const int GetLeaderboardResponse::kRoleOfficialBoardFieldNumber;
const int GetLeaderboardResponse::kYijunLevelBoardFieldNumber;
const int GetLeaderboardResponse::kYijunFightBoardFieldNumber;
const int GetLeaderboardResponse::kYijunWealthBoardFieldNumber;
const int GetLeaderboardResponse::kRoleLevelRankFieldNumber;
const int GetLeaderboardResponse::kRoleFightRankFieldNumber;
const int GetLeaderboardResponse::kRoleOfficialRankFieldNumber;
const int GetLeaderboardResponse::kYijunLevelRankFieldNumber;
const int GetLeaderboardResponse::kYijunFightRankFieldNumber;
const int GetLeaderboardResponse::kYijunWealthRankFieldNumber;
const int GetLeaderboardResponse::kYijunLevelFieldNumber;
const int GetLeaderboardResponse::kYijunFightFieldNumber;
const int GetLeaderboardResponse::kYijunWealthFieldNumber;
#endif  // !_MSC_VER

GetLeaderboardResponse::GetLeaderboardResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GetLeaderboardResponse::InitAsDefaultInstance() {
}

GetLeaderboardResponse::GetLeaderboardResponse(const GetLeaderboardResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GetLeaderboardResponse::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 1;
  status_ = 0;
  rolelevelrank_ = 0u;
  rolefightrank_ = 0u;
  roleofficialrank_ = 0u;
  yijunlevelrank_ = 0u;
  yijunfightrank_ = 0u;
  yijunwealthrank_ = 0u;
  yijunlevel_ = 0u;
  yijunfight_ = GOOGLE_ULONGLONG(0);
  yijunwealth_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetLeaderboardResponse::~GetLeaderboardResponse() {
  SharedDtor();
}

void GetLeaderboardResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetLeaderboardResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetLeaderboardResponse& GetLeaderboardResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_get_5fleaderboard_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_get_5fleaderboard_2eproto();
#endif
  return *default_instance_;
}

GetLeaderboardResponse* GetLeaderboardResponse::default_instance_ = NULL;

GetLeaderboardResponse* GetLeaderboardResponse::New() const {
  return new GetLeaderboardResponse;
}

void GetLeaderboardResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 1;
    status_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    rolelevelrank_ = 0u;
    rolefightrank_ = 0u;
    roleofficialrank_ = 0u;
    yijunlevelrank_ = 0u;
    yijunfightrank_ = 0u;
    yijunwealthrank_ = 0u;
    yijunlevel_ = 0u;
    yijunfight_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    yijunwealth_ = GOOGLE_ULONGLONG(0);
  }
  rolelevelboard_.Clear();
  rolefightboard_.Clear();
  roleofficialboard_.Clear();
  yijunlevelboard_.Clear();
  yijunfightboard_.Clear();
  yijunwealthboard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GetLeaderboardResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sanguo.MsgID msgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::MsgID_IsValid(value)) {
            set_msgid(static_cast< ::sanguo::MsgID >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .sanguo.StatusCode status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sanguo::StatusCode_IsValid(value)) {
            set_status(static_cast< ::sanguo::StatusCode >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_roleLevelBoard;
        break;
      }

      // repeated .sanguo.MsgRankItem roleLevelBoard = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleLevelBoard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rolelevelboard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_roleLevelBoard;
        if (input->ExpectTag(34)) goto parse_roleFightBoard;
        break;
      }

      // repeated .sanguo.MsgRankItem roleFightBoard = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleFightBoard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rolefightboard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_roleFightBoard;
        if (input->ExpectTag(42)) goto parse_roleOfficialBoard;
        break;
      }

      // repeated .sanguo.MsgRankItem roleOfficialBoard = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleOfficialBoard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roleofficialboard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_roleOfficialBoard;
        if (input->ExpectTag(50)) goto parse_yijunLevelBoard;
        break;
      }

      // repeated .sanguo.MsgRankItem yijunLevelBoard = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_yijunLevelBoard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_yijunlevelboard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_yijunLevelBoard;
        if (input->ExpectTag(58)) goto parse_yijunFightBoard;
        break;
      }

      // repeated .sanguo.MsgRankItem yijunFightBoard = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_yijunFightBoard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_yijunfightboard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_yijunFightBoard;
        if (input->ExpectTag(66)) goto parse_yijunWealthBoard;
        break;
      }

      // repeated .sanguo.MsgRankItem yijunWealthBoard = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_yijunWealthBoard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_yijunwealthboard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_yijunWealthBoard;
        if (input->ExpectTag(72)) goto parse_roleLevelRank;
        break;
      }

      // optional uint32 roleLevelRank = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleLevelRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rolelevelrank_)));
          set_has_rolelevelrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_roleFightRank;
        break;
      }

      // optional uint32 roleFightRank = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleFightRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rolefightrank_)));
          set_has_rolefightrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_roleOfficialRank;
        break;
      }

      // optional uint32 roleOfficialRank = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleOfficialRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roleofficialrank_)));
          set_has_roleofficialrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_yijunLevelRank;
        break;
      }

      // optional uint32 yijunLevelRank = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_yijunLevelRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &yijunlevelrank_)));
          set_has_yijunlevelrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_yijunFightRank;
        break;
      }

      // optional uint32 yijunFightRank = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_yijunFightRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &yijunfightrank_)));
          set_has_yijunfightrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_yijunWealthRank;
        break;
      }

      // optional uint32 yijunWealthRank = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_yijunWealthRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &yijunwealthrank_)));
          set_has_yijunwealthrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_yijunLevel;
        break;
      }

      // optional uint32 yijunLevel = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_yijunLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &yijunlevel_)));
          set_has_yijunlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_yijunFight;
        break;
      }

      // optional uint64 yijunFight = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_yijunFight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &yijunfight_)));
          set_has_yijunfight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_yijunWealth;
        break;
      }

      // optional uint64 yijunWealth = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_yijunWealth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &yijunwealth_)));
          set_has_yijunwealth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetLeaderboardResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .sanguo.MsgID msgID = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgid(), output);
  }

  // required .sanguo.StatusCode status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // repeated .sanguo.MsgRankItem roleLevelBoard = 3;
  for (int i = 0; i < this->rolelevelboard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->rolelevelboard(i), output);
  }

  // repeated .sanguo.MsgRankItem roleFightBoard = 4;
  for (int i = 0; i < this->rolefightboard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->rolefightboard(i), output);
  }

  // repeated .sanguo.MsgRankItem roleOfficialBoard = 5;
  for (int i = 0; i < this->roleofficialboard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->roleofficialboard(i), output);
  }

  // repeated .sanguo.MsgRankItem yijunLevelBoard = 6;
  for (int i = 0; i < this->yijunlevelboard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->yijunlevelboard(i), output);
  }

  // repeated .sanguo.MsgRankItem yijunFightBoard = 7;
  for (int i = 0; i < this->yijunfightboard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->yijunfightboard(i), output);
  }

  // repeated .sanguo.MsgRankItem yijunWealthBoard = 8;
  for (int i = 0; i < this->yijunwealthboard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->yijunwealthboard(i), output);
  }

  // optional uint32 roleLevelRank = 9;
  if (has_rolelevelrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->rolelevelrank(), output);
  }

  // optional uint32 roleFightRank = 10;
  if (has_rolefightrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->rolefightrank(), output);
  }

  // optional uint32 roleOfficialRank = 11;
  if (has_roleofficialrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->roleofficialrank(), output);
  }

  // optional uint32 yijunLevelRank = 12;
  if (has_yijunlevelrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->yijunlevelrank(), output);
  }

  // optional uint32 yijunFightRank = 13;
  if (has_yijunfightrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->yijunfightrank(), output);
  }

  // optional uint32 yijunWealthRank = 14;
  if (has_yijunwealthrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->yijunwealthrank(), output);
  }

  // optional uint32 yijunLevel = 15;
  if (has_yijunlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->yijunlevel(), output);
  }

  // optional uint64 yijunFight = 16;
  if (has_yijunfight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->yijunfight(), output);
  }

  // optional uint64 yijunWealth = 17;
  if (has_yijunwealth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->yijunwealth(), output);
  }

}

int GetLeaderboardResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .sanguo.MsgID msgID = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgid());
    }

    // required .sanguo.StatusCode status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 roleLevelRank = 9;
    if (has_rolelevelrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rolelevelrank());
    }

    // optional uint32 roleFightRank = 10;
    if (has_rolefightrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rolefightrank());
    }

    // optional uint32 roleOfficialRank = 11;
    if (has_roleofficialrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roleofficialrank());
    }

    // optional uint32 yijunLevelRank = 12;
    if (has_yijunlevelrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->yijunlevelrank());
    }

    // optional uint32 yijunFightRank = 13;
    if (has_yijunfightrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->yijunfightrank());
    }

    // optional uint32 yijunWealthRank = 14;
    if (has_yijunwealthrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->yijunwealthrank());
    }

    // optional uint32 yijunLevel = 15;
    if (has_yijunlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->yijunlevel());
    }

    // optional uint64 yijunFight = 16;
    if (has_yijunfight()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->yijunfight());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint64 yijunWealth = 17;
    if (has_yijunwealth()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->yijunwealth());
    }

  }
  // repeated .sanguo.MsgRankItem roleLevelBoard = 3;
  total_size += 1 * this->rolelevelboard_size();
  for (int i = 0; i < this->rolelevelboard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rolelevelboard(i));
  }

  // repeated .sanguo.MsgRankItem roleFightBoard = 4;
  total_size += 1 * this->rolefightboard_size();
  for (int i = 0; i < this->rolefightboard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rolefightboard(i));
  }

  // repeated .sanguo.MsgRankItem roleOfficialBoard = 5;
  total_size += 1 * this->roleofficialboard_size();
  for (int i = 0; i < this->roleofficialboard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roleofficialboard(i));
  }

  // repeated .sanguo.MsgRankItem yijunLevelBoard = 6;
  total_size += 1 * this->yijunlevelboard_size();
  for (int i = 0; i < this->yijunlevelboard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->yijunlevelboard(i));
  }

  // repeated .sanguo.MsgRankItem yijunFightBoard = 7;
  total_size += 1 * this->yijunfightboard_size();
  for (int i = 0; i < this->yijunfightboard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->yijunfightboard(i));
  }

  // repeated .sanguo.MsgRankItem yijunWealthBoard = 8;
  total_size += 1 * this->yijunwealthboard_size();
  for (int i = 0; i < this->yijunwealthboard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->yijunwealthboard(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetLeaderboardResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetLeaderboardResponse*>(&from));
}

void GetLeaderboardResponse::MergeFrom(const GetLeaderboardResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  rolelevelboard_.MergeFrom(from.rolelevelboard_);
  rolefightboard_.MergeFrom(from.rolefightboard_);
  roleofficialboard_.MergeFrom(from.roleofficialboard_);
  yijunlevelboard_.MergeFrom(from.yijunlevelboard_);
  yijunfightboard_.MergeFrom(from.yijunfightboard_);
  yijunwealthboard_.MergeFrom(from.yijunwealthboard_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_rolelevelrank()) {
      set_rolelevelrank(from.rolelevelrank());
    }
    if (from.has_rolefightrank()) {
      set_rolefightrank(from.rolefightrank());
    }
    if (from.has_roleofficialrank()) {
      set_roleofficialrank(from.roleofficialrank());
    }
    if (from.has_yijunlevelrank()) {
      set_yijunlevelrank(from.yijunlevelrank());
    }
    if (from.has_yijunfightrank()) {
      set_yijunfightrank(from.yijunfightrank());
    }
    if (from.has_yijunwealthrank()) {
      set_yijunwealthrank(from.yijunwealthrank());
    }
    if (from.has_yijunlevel()) {
      set_yijunlevel(from.yijunlevel());
    }
    if (from.has_yijunfight()) {
      set_yijunfight(from.yijunfight());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_yijunwealth()) {
      set_yijunwealth(from.yijunwealth());
    }
  }
}

void GetLeaderboardResponse::CopyFrom(const GetLeaderboardResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLeaderboardResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < rolelevelboard_size(); i++) {
    if (!this->rolelevelboard(i).IsInitialized()) return false;
  }
  for (int i = 0; i < rolefightboard_size(); i++) {
    if (!this->rolefightboard(i).IsInitialized()) return false;
  }
  for (int i = 0; i < roleofficialboard_size(); i++) {
    if (!this->roleofficialboard(i).IsInitialized()) return false;
  }
  for (int i = 0; i < yijunlevelboard_size(); i++) {
    if (!this->yijunlevelboard(i).IsInitialized()) return false;
  }
  for (int i = 0; i < yijunfightboard_size(); i++) {
    if (!this->yijunfightboard(i).IsInitialized()) return false;
  }
  for (int i = 0; i < yijunwealthboard_size(); i++) {
    if (!this->yijunwealthboard(i).IsInitialized()) return false;
  }
  return true;
}

void GetLeaderboardResponse::Swap(GetLeaderboardResponse* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(status_, other->status_);
    rolelevelboard_.Swap(&other->rolelevelboard_);
    rolefightboard_.Swap(&other->rolefightboard_);
    roleofficialboard_.Swap(&other->roleofficialboard_);
    yijunlevelboard_.Swap(&other->yijunlevelboard_);
    yijunfightboard_.Swap(&other->yijunfightboard_);
    yijunwealthboard_.Swap(&other->yijunwealthboard_);
    std::swap(rolelevelrank_, other->rolelevelrank_);
    std::swap(rolefightrank_, other->rolefightrank_);
    std::swap(roleofficialrank_, other->roleofficialrank_);
    std::swap(yijunlevelrank_, other->yijunlevelrank_);
    std::swap(yijunfightrank_, other->yijunfightrank_);
    std::swap(yijunwealthrank_, other->yijunwealthrank_);
    std::swap(yijunlevel_, other->yijunlevel_);
    std::swap(yijunfight_, other->yijunfight_);
    std::swap(yijunwealth_, other->yijunwealth_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetLeaderboardResponse::GetTypeName() const {
  return "sanguo.GetLeaderboardResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sanguo

// @@protoc_insertion_point(global_scope)
