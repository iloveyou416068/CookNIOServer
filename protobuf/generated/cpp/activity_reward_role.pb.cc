// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: activity_reward_role.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "activity_reward_role.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace sanguo {

void protobuf_ShutdownFile_activity_5freward_5frole_2eproto() {
  delete MsgActivityRewardRole::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_activity_5freward_5frole_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_activity_5freward_5frole_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  MsgActivityRewardRole::default_instance_ = new MsgActivityRewardRole();
  MsgActivityRewardRole::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_activity_5freward_5frole_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_activity_5freward_5frole_2eproto_once_);
void protobuf_AddDesc_activity_5freward_5frole_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_activity_5freward_5frole_2eproto_once_,
                 &protobuf_AddDesc_activity_5freward_5frole_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_activity_5freward_5frole_2eproto {
  StaticDescriptorInitializer_activity_5freward_5frole_2eproto() {
    protobuf_AddDesc_activity_5freward_5frole_2eproto();
  }
} static_descriptor_initializer_activity_5freward_5frole_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int MsgActivityRewardRole::kRewardTypeFieldNumber;
const int MsgActivityRewardRole::kRewardRankFieldNumber;
const int MsgActivityRewardRole::kRoleNameFieldNumber;
const int MsgActivityRewardRole::kProfessionFieldNumber;
#endif  // !_MSC_VER

MsgActivityRewardRole::MsgActivityRewardRole()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void MsgActivityRewardRole::InitAsDefaultInstance() {
}

MsgActivityRewardRole::MsgActivityRewardRole(const MsgActivityRewardRole& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void MsgActivityRewardRole::SharedCtor() {
  _cached_size_ = 0;
  rewardtype_ = 0u;
  rewardrank_ = 0u;
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  profession_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgActivityRewardRole::~MsgActivityRewardRole() {
  SharedDtor();
}

void MsgActivityRewardRole::SharedDtor() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgActivityRewardRole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgActivityRewardRole& MsgActivityRewardRole::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_activity_5freward_5frole_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_activity_5freward_5frole_2eproto();
#endif
  return *default_instance_;
}

MsgActivityRewardRole* MsgActivityRewardRole::default_instance_ = NULL;

MsgActivityRewardRole* MsgActivityRewardRole::New() const {
  return new MsgActivityRewardRole;
}

void MsgActivityRewardRole::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rewardtype_ = 0u;
    rewardrank_ = 0u;
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    profession_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool MsgActivityRewardRole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 rewardType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rewardtype_)));
          set_has_rewardtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rewardRank;
        break;
      }

      // required uint32 rewardRank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewardRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rewardrank_)));
          set_has_rewardrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_roleName;
        break;
      }

      // required string roleName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_profession;
        break;
      }

      // required uint32 profession = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &profession_)));
          set_has_profession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgActivityRewardRole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 rewardType = 1;
  if (has_rewardtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rewardtype(), output);
  }

  // required uint32 rewardRank = 2;
  if (has_rewardrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rewardrank(), output);
  }

  // required string roleName = 3;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->rolename(), output);
  }

  // required uint32 profession = 4;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->profession(), output);
  }

}

int MsgActivityRewardRole::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 rewardType = 1;
    if (has_rewardtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rewardtype());
    }

    // required uint32 rewardRank = 2;
    if (has_rewardrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rewardrank());
    }

    // required string roleName = 3;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }

    // required uint32 profession = 4;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->profession());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgActivityRewardRole::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgActivityRewardRole*>(&from));
}

void MsgActivityRewardRole::MergeFrom(const MsgActivityRewardRole& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rewardtype()) {
      set_rewardtype(from.rewardtype());
    }
    if (from.has_rewardrank()) {
      set_rewardrank(from.rewardrank());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
  }
}

void MsgActivityRewardRole::CopyFrom(const MsgActivityRewardRole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgActivityRewardRole::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void MsgActivityRewardRole::Swap(MsgActivityRewardRole* other) {
  if (other != this) {
    std::swap(rewardtype_, other->rewardtype_);
    std::swap(rewardrank_, other->rewardrank_);
    std::swap(rolename_, other->rolename_);
    std::swap(profession_, other->profession_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MsgActivityRewardRole::GetTypeName() const {
  return "sanguo.MsgActivityRewardRole";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sanguo

// @@protoc_insertion_point(global_scope)
