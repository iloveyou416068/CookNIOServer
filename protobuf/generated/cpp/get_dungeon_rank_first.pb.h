// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: get_dungeon_rank_first.proto

#ifndef PROTOBUF_get_5fdungeon_5frank_5ffirst_2eproto__INCLUDED
#define PROTOBUF_get_5fdungeon_5frank_5ffirst_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "msg_id.pb.h"
#include "msg_status_code.pb.h"
#include "role_rank.pb.h"
// @@protoc_insertion_point(includes)

namespace sanguo {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_get_5fdungeon_5frank_5ffirst_2eproto();
void protobuf_AssignDesc_get_5fdungeon_5frank_5ffirst_2eproto();
void protobuf_ShutdownFile_get_5fdungeon_5frank_5ffirst_2eproto();

class GetDungeonRankFirstRequest;
class GetDungeonRankFirstResponse;

// ===================================================================

class GetDungeonRankFirstRequest : public ::google::protobuf::MessageLite {
 public:
  GetDungeonRankFirstRequest();
  virtual ~GetDungeonRankFirstRequest();

  GetDungeonRankFirstRequest(const GetDungeonRankFirstRequest& from);

  inline GetDungeonRankFirstRequest& operator=(const GetDungeonRankFirstRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const GetDungeonRankFirstRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const GetDungeonRankFirstRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(GetDungeonRankFirstRequest* other);

  // implements Message ----------------------------------------------

  GetDungeonRankFirstRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GetDungeonRankFirstRequest& from);
  void MergeFrom(const GetDungeonRankFirstRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .sanguo.MsgID msgID = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline ::sanguo::MsgID msgid() const;
  inline void set_msgid(::sanguo::MsgID value);

  // required uint32 stageId = 2;
  inline bool has_stageid() const;
  inline void clear_stageid();
  static const int kStageIdFieldNumber = 2;
  inline ::google::protobuf::uint32 stageid() const;
  inline void set_stageid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:sanguo.GetDungeonRankFirstRequest)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_stageid();
  inline void clear_has_stageid();

  int msgid_;
  ::google::protobuf::uint32 stageid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_get_5fdungeon_5frank_5ffirst_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_get_5fdungeon_5frank_5ffirst_2eproto();
  #endif
  friend void protobuf_AssignDesc_get_5fdungeon_5frank_5ffirst_2eproto();
  friend void protobuf_ShutdownFile_get_5fdungeon_5frank_5ffirst_2eproto();

  void InitAsDefaultInstance();
  static GetDungeonRankFirstRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetDungeonRankFirstResponse : public ::google::protobuf::MessageLite {
 public:
  GetDungeonRankFirstResponse();
  virtual ~GetDungeonRankFirstResponse();

  GetDungeonRankFirstResponse(const GetDungeonRankFirstResponse& from);

  inline GetDungeonRankFirstResponse& operator=(const GetDungeonRankFirstResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const GetDungeonRankFirstResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const GetDungeonRankFirstResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(GetDungeonRankFirstResponse* other);

  // implements Message ----------------------------------------------

  GetDungeonRankFirstResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GetDungeonRankFirstResponse& from);
  void MergeFrom(const GetDungeonRankFirstResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .sanguo.MsgID msgID = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline ::sanguo::MsgID msgid() const;
  inline void set_msgid(::sanguo::MsgID value);

  // required .sanguo.StatusCode status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::sanguo::StatusCode status() const;
  inline void set_status(::sanguo::StatusCode value);

  // optional .sanguo.MsgRankItem minTimeBoard = 3;
  inline bool has_mintimeboard() const;
  inline void clear_mintimeboard();
  static const int kMinTimeBoardFieldNumber = 3;
  inline const ::sanguo::MsgRankItem& mintimeboard() const;
  inline ::sanguo::MsgRankItem* mutable_mintimeboard();
  inline ::sanguo::MsgRankItem* release_mintimeboard();
  inline void set_allocated_mintimeboard(::sanguo::MsgRankItem* mintimeboard);

  // optional .sanguo.MsgRankItem minFightBoard = 4;
  inline bool has_minfightboard() const;
  inline void clear_minfightboard();
  static const int kMinFightBoardFieldNumber = 4;
  inline const ::sanguo::MsgRankItem& minfightboard() const;
  inline ::sanguo::MsgRankItem* mutable_minfightboard();
  inline ::sanguo::MsgRankItem* release_minfightboard();
  inline void set_allocated_minfightboard(::sanguo::MsgRankItem* minfightboard);

  // optional .sanguo.MsgRankItem maxBattle = 5;
  inline bool has_maxbattle() const;
  inline void clear_maxbattle();
  static const int kMaxBattleFieldNumber = 5;
  inline const ::sanguo::MsgRankItem& maxbattle() const;
  inline ::sanguo::MsgRankItem* mutable_maxbattle();
  inline ::sanguo::MsgRankItem* release_maxbattle();
  inline void set_allocated_maxbattle(::sanguo::MsgRankItem* maxbattle);

  // @@protoc_insertion_point(class_scope:sanguo.GetDungeonRankFirstResponse)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_mintimeboard();
  inline void clear_has_mintimeboard();
  inline void set_has_minfightboard();
  inline void clear_has_minfightboard();
  inline void set_has_maxbattle();
  inline void clear_has_maxbattle();

  int msgid_;
  int status_;
  ::sanguo::MsgRankItem* mintimeboard_;
  ::sanguo::MsgRankItem* minfightboard_;
  ::sanguo::MsgRankItem* maxbattle_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_get_5fdungeon_5frank_5ffirst_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_get_5fdungeon_5frank_5ffirst_2eproto();
  #endif
  friend void protobuf_AssignDesc_get_5fdungeon_5frank_5ffirst_2eproto();
  friend void protobuf_ShutdownFile_get_5fdungeon_5frank_5ffirst_2eproto();

  void InitAsDefaultInstance();
  static GetDungeonRankFirstResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// GetDungeonRankFirstRequest

// required .sanguo.MsgID msgID = 1;
inline bool GetDungeonRankFirstRequest::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetDungeonRankFirstRequest::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetDungeonRankFirstRequest::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetDungeonRankFirstRequest::clear_msgid() {
  msgid_ = 1;
  clear_has_msgid();
}
inline ::sanguo::MsgID GetDungeonRankFirstRequest::msgid() const {
  return static_cast< ::sanguo::MsgID >(msgid_);
}
inline void GetDungeonRankFirstRequest::set_msgid(::sanguo::MsgID value) {
  assert(::sanguo::MsgID_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// required uint32 stageId = 2;
inline bool GetDungeonRankFirstRequest::has_stageid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetDungeonRankFirstRequest::set_has_stageid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetDungeonRankFirstRequest::clear_has_stageid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetDungeonRankFirstRequest::clear_stageid() {
  stageid_ = 0u;
  clear_has_stageid();
}
inline ::google::protobuf::uint32 GetDungeonRankFirstRequest::stageid() const {
  return stageid_;
}
inline void GetDungeonRankFirstRequest::set_stageid(::google::protobuf::uint32 value) {
  set_has_stageid();
  stageid_ = value;
}

// -------------------------------------------------------------------

// GetDungeonRankFirstResponse

// required .sanguo.MsgID msgID = 1;
inline bool GetDungeonRankFirstResponse::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetDungeonRankFirstResponse::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetDungeonRankFirstResponse::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetDungeonRankFirstResponse::clear_msgid() {
  msgid_ = 1;
  clear_has_msgid();
}
inline ::sanguo::MsgID GetDungeonRankFirstResponse::msgid() const {
  return static_cast< ::sanguo::MsgID >(msgid_);
}
inline void GetDungeonRankFirstResponse::set_msgid(::sanguo::MsgID value) {
  assert(::sanguo::MsgID_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// required .sanguo.StatusCode status = 2;
inline bool GetDungeonRankFirstResponse::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetDungeonRankFirstResponse::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetDungeonRankFirstResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetDungeonRankFirstResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::sanguo::StatusCode GetDungeonRankFirstResponse::status() const {
  return static_cast< ::sanguo::StatusCode >(status_);
}
inline void GetDungeonRankFirstResponse::set_status(::sanguo::StatusCode value) {
  assert(::sanguo::StatusCode_IsValid(value));
  set_has_status();
  status_ = value;
}

// optional .sanguo.MsgRankItem minTimeBoard = 3;
inline bool GetDungeonRankFirstResponse::has_mintimeboard() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetDungeonRankFirstResponse::set_has_mintimeboard() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetDungeonRankFirstResponse::clear_has_mintimeboard() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetDungeonRankFirstResponse::clear_mintimeboard() {
  if (mintimeboard_ != NULL) mintimeboard_->::sanguo::MsgRankItem::Clear();
  clear_has_mintimeboard();
}
inline const ::sanguo::MsgRankItem& GetDungeonRankFirstResponse::mintimeboard() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return mintimeboard_ != NULL ? *mintimeboard_ : *default_instance().mintimeboard_;
#else
  return mintimeboard_ != NULL ? *mintimeboard_ : *default_instance_->mintimeboard_;
#endif
}
inline ::sanguo::MsgRankItem* GetDungeonRankFirstResponse::mutable_mintimeboard() {
  set_has_mintimeboard();
  if (mintimeboard_ == NULL) mintimeboard_ = new ::sanguo::MsgRankItem;
  return mintimeboard_;
}
inline ::sanguo::MsgRankItem* GetDungeonRankFirstResponse::release_mintimeboard() {
  clear_has_mintimeboard();
  ::sanguo::MsgRankItem* temp = mintimeboard_;
  mintimeboard_ = NULL;
  return temp;
}
inline void GetDungeonRankFirstResponse::set_allocated_mintimeboard(::sanguo::MsgRankItem* mintimeboard) {
  delete mintimeboard_;
  mintimeboard_ = mintimeboard;
  if (mintimeboard) {
    set_has_mintimeboard();
  } else {
    clear_has_mintimeboard();
  }
}

// optional .sanguo.MsgRankItem minFightBoard = 4;
inline bool GetDungeonRankFirstResponse::has_minfightboard() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetDungeonRankFirstResponse::set_has_minfightboard() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetDungeonRankFirstResponse::clear_has_minfightboard() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetDungeonRankFirstResponse::clear_minfightboard() {
  if (minfightboard_ != NULL) minfightboard_->::sanguo::MsgRankItem::Clear();
  clear_has_minfightboard();
}
inline const ::sanguo::MsgRankItem& GetDungeonRankFirstResponse::minfightboard() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return minfightboard_ != NULL ? *minfightboard_ : *default_instance().minfightboard_;
#else
  return minfightboard_ != NULL ? *minfightboard_ : *default_instance_->minfightboard_;
#endif
}
inline ::sanguo::MsgRankItem* GetDungeonRankFirstResponse::mutable_minfightboard() {
  set_has_minfightboard();
  if (minfightboard_ == NULL) minfightboard_ = new ::sanguo::MsgRankItem;
  return minfightboard_;
}
inline ::sanguo::MsgRankItem* GetDungeonRankFirstResponse::release_minfightboard() {
  clear_has_minfightboard();
  ::sanguo::MsgRankItem* temp = minfightboard_;
  minfightboard_ = NULL;
  return temp;
}
inline void GetDungeonRankFirstResponse::set_allocated_minfightboard(::sanguo::MsgRankItem* minfightboard) {
  delete minfightboard_;
  minfightboard_ = minfightboard;
  if (minfightboard) {
    set_has_minfightboard();
  } else {
    clear_has_minfightboard();
  }
}

// optional .sanguo.MsgRankItem maxBattle = 5;
inline bool GetDungeonRankFirstResponse::has_maxbattle() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GetDungeonRankFirstResponse::set_has_maxbattle() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GetDungeonRankFirstResponse::clear_has_maxbattle() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GetDungeonRankFirstResponse::clear_maxbattle() {
  if (maxbattle_ != NULL) maxbattle_->::sanguo::MsgRankItem::Clear();
  clear_has_maxbattle();
}
inline const ::sanguo::MsgRankItem& GetDungeonRankFirstResponse::maxbattle() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return maxbattle_ != NULL ? *maxbattle_ : *default_instance().maxbattle_;
#else
  return maxbattle_ != NULL ? *maxbattle_ : *default_instance_->maxbattle_;
#endif
}
inline ::sanguo::MsgRankItem* GetDungeonRankFirstResponse::mutable_maxbattle() {
  set_has_maxbattle();
  if (maxbattle_ == NULL) maxbattle_ = new ::sanguo::MsgRankItem;
  return maxbattle_;
}
inline ::sanguo::MsgRankItem* GetDungeonRankFirstResponse::release_maxbattle() {
  clear_has_maxbattle();
  ::sanguo::MsgRankItem* temp = maxbattle_;
  maxbattle_ = NULL;
  return temp;
}
inline void GetDungeonRankFirstResponse::set_allocated_maxbattle(::sanguo::MsgRankItem* maxbattle) {
  delete maxbattle_;
  maxbattle_ = maxbattle;
  if (maxbattle) {
    set_has_maxbattle();
  } else {
    clear_has_maxbattle();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sanguo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_get_5fdungeon_5frank_5ffirst_2eproto__INCLUDED
