// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kungfu_info.proto

package com.cwa.sanguo.messages.dto;

public final class KungfuInfo {
  private KungfuInfo() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  public interface MsgKungFuInfoOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required uint32 kungfuMainID = 1;
    /**
     * <code>required uint32 kungfuMainID = 1;</code>
     */
    boolean hasKungfuMainID();
    /**
     * <code>required uint32 kungfuMainID = 1;</code>
     */
    int getKungfuMainID();

    // required uint32 kungfuSlotNum = 2;
    /**
     * <code>required uint32 kungfuSlotNum = 2;</code>
     *
     * <pre>
     * 表示对应按钮开启以及开启多少个槽数
     * </pre>
     */
    boolean hasKungfuSlotNum();
    /**
     * <code>required uint32 kungfuSlotNum = 2;</code>
     *
     * <pre>
     * 表示对应按钮开启以及开启多少个槽数
     * </pre>
     */
    int getKungfuSlotNum();

    // required string equipKungfuId = 3;
    /**
     * <code>required string equipKungfuId = 3;</code>
     *
     * <pre>
     * 格式:"100,100"
     * </pre>
     */
    boolean hasEquipKungfuId();
    /**
     * <code>required string equipKungfuId = 3;</code>
     *
     * <pre>
     * 格式:"100,100"
     * </pre>
     */
    java.lang.String getEquipKungfuId();
    /**
     * <code>required string equipKungfuId = 3;</code>
     *
     * <pre>
     * 格式:"100,100"
     * </pre>
     */
    com.google.protobuf.ByteString
        getEquipKungfuIdBytes();

    // required .sanguo.MsgOpenKungfuSlotCondition openSlotCondition = 4;
    /**
     * <code>required .sanguo.MsgOpenKungfuSlotCondition openSlotCondition = 4;</code>
     *
     * <pre>
     * 开启槽条件
     * </pre>
     */
    boolean hasOpenSlotCondition();
    /**
     * <code>required .sanguo.MsgOpenKungfuSlotCondition openSlotCondition = 4;</code>
     *
     * <pre>
     * 开启槽条件
     * </pre>
     */
    com.cwa.sanguo.messages.dto.OpenKungfuSlotCondition.MsgOpenKungfuSlotCondition getOpenSlotCondition();

    // required uint32 openStatus = 5;
    /**
     * <code>required uint32 openStatus = 5;</code>
     *
     * <pre>
     * 0表示未开启，1表示开启
     * </pre>
     */
    boolean hasOpenStatus();
    /**
     * <code>required uint32 openStatus = 5;</code>
     *
     * <pre>
     * 0表示未开启，1表示开启
     * </pre>
     */
    int getOpenStatus();

    // repeated uint32 slotChildrenLevel = 6;
    /**
     * <code>repeated uint32 slotChildrenLevel = 6;</code>
     *
     * <pre>
     * 套路下槽对应等级
     * </pre>
     */
    java.util.List<java.lang.Integer> getSlotChildrenLevelList();
    /**
     * <code>repeated uint32 slotChildrenLevel = 6;</code>
     *
     * <pre>
     * 套路下槽对应等级
     * </pre>
     */
    int getSlotChildrenLevelCount();
    /**
     * <code>repeated uint32 slotChildrenLevel = 6;</code>
     *
     * <pre>
     * 套路下槽对应等级
     * </pre>
     */
    int getSlotChildrenLevel(int index);

    // repeated uint32 slotChildrenProperty = 7;
    /**
     * <code>repeated uint32 slotChildrenProperty = 7;</code>
     *
     * <pre>
     * 套路下槽等级对应加成
     * </pre>
     */
    java.util.List<java.lang.Integer> getSlotChildrenPropertyList();
    /**
     * <code>repeated uint32 slotChildrenProperty = 7;</code>
     *
     * <pre>
     * 套路下槽等级对应加成
     * </pre>
     */
    int getSlotChildrenPropertyCount();
    /**
     * <code>repeated uint32 slotChildrenProperty = 7;</code>
     *
     * <pre>
     * 套路下槽等级对应加成
     * </pre>
     */
    int getSlotChildrenProperty(int index);
  }
  /**
   * Protobuf type {@code sanguo.MsgKungFuInfo}
   */
  public static final class MsgKungFuInfo extends
      com.google.protobuf.GeneratedMessageLite
      implements MsgKungFuInfoOrBuilder {
    // Use MsgKungFuInfo.newBuilder() to construct.
    private MsgKungFuInfo(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private MsgKungFuInfo(boolean noInit) {}

    private static final MsgKungFuInfo defaultInstance;
    public static MsgKungFuInfo getDefaultInstance() {
      return defaultInstance;
    }

    public MsgKungFuInfo getDefaultInstanceForType() {
      return defaultInstance;
    }

    private MsgKungFuInfo(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              kungfuMainID_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              kungfuSlotNum_ = input.readUInt32();
              break;
            }
            case 26: {
              bitField0_ |= 0x00000004;
              equipKungfuId_ = input.readBytes();
              break;
            }
            case 34: {
              com.cwa.sanguo.messages.dto.OpenKungfuSlotCondition.MsgOpenKungfuSlotCondition.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = openSlotCondition_.toBuilder();
              }
              openSlotCondition_ = input.readMessage(com.cwa.sanguo.messages.dto.OpenKungfuSlotCondition.MsgOpenKungfuSlotCondition.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(openSlotCondition_);
                openSlotCondition_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              openStatus_ = input.readUInt32();
              break;
            }
            case 48: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                slotChildrenLevel_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              slotChildrenLevel_.add(input.readUInt32());
              break;
            }
            case 50: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                slotChildrenLevel_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              while (input.getBytesUntilLimit() > 0) {
                slotChildrenLevel_.add(input.readUInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 56: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                slotChildrenProperty_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              slotChildrenProperty_.add(input.readUInt32());
              break;
            }
            case 58: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
                slotChildrenProperty_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              while (input.getBytesUntilLimit() > 0) {
                slotChildrenProperty_.add(input.readUInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          slotChildrenLevel_ = java.util.Collections.unmodifiableList(slotChildrenLevel_);
        }
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          slotChildrenProperty_ = java.util.Collections.unmodifiableList(slotChildrenProperty_);
        }
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<MsgKungFuInfo> PARSER =
        new com.google.protobuf.AbstractParser<MsgKungFuInfo>() {
      public MsgKungFuInfo parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new MsgKungFuInfo(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<MsgKungFuInfo> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required uint32 kungfuMainID = 1;
    public static final int KUNGFUMAINID_FIELD_NUMBER = 1;
    private int kungfuMainID_;
    /**
     * <code>required uint32 kungfuMainID = 1;</code>
     */
    public boolean hasKungfuMainID() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 kungfuMainID = 1;</code>
     */
    public int getKungfuMainID() {
      return kungfuMainID_;
    }

    // required uint32 kungfuSlotNum = 2;
    public static final int KUNGFUSLOTNUM_FIELD_NUMBER = 2;
    private int kungfuSlotNum_;
    /**
     * <code>required uint32 kungfuSlotNum = 2;</code>
     *
     * <pre>
     * 表示对应按钮开启以及开启多少个槽数
     * </pre>
     */
    public boolean hasKungfuSlotNum() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required uint32 kungfuSlotNum = 2;</code>
     *
     * <pre>
     * 表示对应按钮开启以及开启多少个槽数
     * </pre>
     */
    public int getKungfuSlotNum() {
      return kungfuSlotNum_;
    }

    // required string equipKungfuId = 3;
    public static final int EQUIPKUNGFUID_FIELD_NUMBER = 3;
    private java.lang.Object equipKungfuId_;
    /**
     * <code>required string equipKungfuId = 3;</code>
     *
     * <pre>
     * 格式:"100,100"
     * </pre>
     */
    public boolean hasEquipKungfuId() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required string equipKungfuId = 3;</code>
     *
     * <pre>
     * 格式:"100,100"
     * </pre>
     */
    public java.lang.String getEquipKungfuId() {
      java.lang.Object ref = equipKungfuId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          equipKungfuId_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string equipKungfuId = 3;</code>
     *
     * <pre>
     * 格式:"100,100"
     * </pre>
     */
    public com.google.protobuf.ByteString
        getEquipKungfuIdBytes() {
      java.lang.Object ref = equipKungfuId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        equipKungfuId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // required .sanguo.MsgOpenKungfuSlotCondition openSlotCondition = 4;
    public static final int OPENSLOTCONDITION_FIELD_NUMBER = 4;
    private com.cwa.sanguo.messages.dto.OpenKungfuSlotCondition.MsgOpenKungfuSlotCondition openSlotCondition_;
    /**
     * <code>required .sanguo.MsgOpenKungfuSlotCondition openSlotCondition = 4;</code>
     *
     * <pre>
     * 开启槽条件
     * </pre>
     */
    public boolean hasOpenSlotCondition() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required .sanguo.MsgOpenKungfuSlotCondition openSlotCondition = 4;</code>
     *
     * <pre>
     * 开启槽条件
     * </pre>
     */
    public com.cwa.sanguo.messages.dto.OpenKungfuSlotCondition.MsgOpenKungfuSlotCondition getOpenSlotCondition() {
      return openSlotCondition_;
    }

    // required uint32 openStatus = 5;
    public static final int OPENSTATUS_FIELD_NUMBER = 5;
    private int openStatus_;
    /**
     * <code>required uint32 openStatus = 5;</code>
     *
     * <pre>
     * 0表示未开启，1表示开启
     * </pre>
     */
    public boolean hasOpenStatus() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required uint32 openStatus = 5;</code>
     *
     * <pre>
     * 0表示未开启，1表示开启
     * </pre>
     */
    public int getOpenStatus() {
      return openStatus_;
    }

    // repeated uint32 slotChildrenLevel = 6;
    public static final int SLOTCHILDRENLEVEL_FIELD_NUMBER = 6;
    private java.util.List<java.lang.Integer> slotChildrenLevel_;
    /**
     * <code>repeated uint32 slotChildrenLevel = 6;</code>
     *
     * <pre>
     * 套路下槽对应等级
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getSlotChildrenLevelList() {
      return slotChildrenLevel_;
    }
    /**
     * <code>repeated uint32 slotChildrenLevel = 6;</code>
     *
     * <pre>
     * 套路下槽对应等级
     * </pre>
     */
    public int getSlotChildrenLevelCount() {
      return slotChildrenLevel_.size();
    }
    /**
     * <code>repeated uint32 slotChildrenLevel = 6;</code>
     *
     * <pre>
     * 套路下槽对应等级
     * </pre>
     */
    public int getSlotChildrenLevel(int index) {
      return slotChildrenLevel_.get(index);
    }

    // repeated uint32 slotChildrenProperty = 7;
    public static final int SLOTCHILDRENPROPERTY_FIELD_NUMBER = 7;
    private java.util.List<java.lang.Integer> slotChildrenProperty_;
    /**
     * <code>repeated uint32 slotChildrenProperty = 7;</code>
     *
     * <pre>
     * 套路下槽等级对应加成
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getSlotChildrenPropertyList() {
      return slotChildrenProperty_;
    }
    /**
     * <code>repeated uint32 slotChildrenProperty = 7;</code>
     *
     * <pre>
     * 套路下槽等级对应加成
     * </pre>
     */
    public int getSlotChildrenPropertyCount() {
      return slotChildrenProperty_.size();
    }
    /**
     * <code>repeated uint32 slotChildrenProperty = 7;</code>
     *
     * <pre>
     * 套路下槽等级对应加成
     * </pre>
     */
    public int getSlotChildrenProperty(int index) {
      return slotChildrenProperty_.get(index);
    }

    private void initFields() {
      kungfuMainID_ = 0;
      kungfuSlotNum_ = 0;
      equipKungfuId_ = "";
      openSlotCondition_ = com.cwa.sanguo.messages.dto.OpenKungfuSlotCondition.MsgOpenKungfuSlotCondition.getDefaultInstance();
      openStatus_ = 0;
      slotChildrenLevel_ = java.util.Collections.emptyList();
      slotChildrenProperty_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasKungfuMainID()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasKungfuSlotNum()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasEquipKungfuId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasOpenSlotCondition()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasOpenStatus()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getOpenSlotCondition().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, kungfuMainID_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, kungfuSlotNum_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(3, getEquipKungfuIdBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(4, openSlotCondition_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(5, openStatus_);
      }
      for (int i = 0; i < slotChildrenLevel_.size(); i++) {
        output.writeUInt32(6, slotChildrenLevel_.get(i));
      }
      for (int i = 0; i < slotChildrenProperty_.size(); i++) {
        output.writeUInt32(7, slotChildrenProperty_.get(i));
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, kungfuMainID_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, kungfuSlotNum_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, getEquipKungfuIdBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, openSlotCondition_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, openStatus_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < slotChildrenLevel_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(slotChildrenLevel_.get(i));
        }
        size += dataSize;
        size += 1 * getSlotChildrenLevelList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < slotChildrenProperty_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(slotChildrenProperty_.get(i));
        }
        size += dataSize;
        size += 1 * getSlotChildrenPropertyList().size();
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.cwa.sanguo.messages.dto.KungfuInfo.MsgKungFuInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.cwa.sanguo.messages.dto.KungfuInfo.MsgKungFuInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.cwa.sanguo.messages.dto.KungfuInfo.MsgKungFuInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.cwa.sanguo.messages.dto.KungfuInfo.MsgKungFuInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.cwa.sanguo.messages.dto.KungfuInfo.MsgKungFuInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.cwa.sanguo.messages.dto.KungfuInfo.MsgKungFuInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.cwa.sanguo.messages.dto.KungfuInfo.MsgKungFuInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.cwa.sanguo.messages.dto.KungfuInfo.MsgKungFuInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.cwa.sanguo.messages.dto.KungfuInfo.MsgKungFuInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.cwa.sanguo.messages.dto.KungfuInfo.MsgKungFuInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.cwa.sanguo.messages.dto.KungfuInfo.MsgKungFuInfo prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code sanguo.MsgKungFuInfo}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.cwa.sanguo.messages.dto.KungfuInfo.MsgKungFuInfo, Builder>
        implements com.cwa.sanguo.messages.dto.KungfuInfo.MsgKungFuInfoOrBuilder {
      // Construct using com.cwa.sanguo.messages.dto.KungfuInfo.MsgKungFuInfo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        kungfuMainID_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        kungfuSlotNum_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        equipKungfuId_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        openSlotCondition_ = com.cwa.sanguo.messages.dto.OpenKungfuSlotCondition.MsgOpenKungfuSlotCondition.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000008);
        openStatus_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        slotChildrenLevel_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        slotChildrenProperty_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.cwa.sanguo.messages.dto.KungfuInfo.MsgKungFuInfo getDefaultInstanceForType() {
        return com.cwa.sanguo.messages.dto.KungfuInfo.MsgKungFuInfo.getDefaultInstance();
      }

      public com.cwa.sanguo.messages.dto.KungfuInfo.MsgKungFuInfo build() {
        com.cwa.sanguo.messages.dto.KungfuInfo.MsgKungFuInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.cwa.sanguo.messages.dto.KungfuInfo.MsgKungFuInfo buildPartial() {
        com.cwa.sanguo.messages.dto.KungfuInfo.MsgKungFuInfo result = new com.cwa.sanguo.messages.dto.KungfuInfo.MsgKungFuInfo(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.kungfuMainID_ = kungfuMainID_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.kungfuSlotNum_ = kungfuSlotNum_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.equipKungfuId_ = equipKungfuId_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.openSlotCondition_ = openSlotCondition_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.openStatus_ = openStatus_;
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          slotChildrenLevel_ = java.util.Collections.unmodifiableList(slotChildrenLevel_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.slotChildrenLevel_ = slotChildrenLevel_;
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          slotChildrenProperty_ = java.util.Collections.unmodifiableList(slotChildrenProperty_);
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.slotChildrenProperty_ = slotChildrenProperty_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.cwa.sanguo.messages.dto.KungfuInfo.MsgKungFuInfo other) {
        if (other == com.cwa.sanguo.messages.dto.KungfuInfo.MsgKungFuInfo.getDefaultInstance()) return this;
        if (other.hasKungfuMainID()) {
          setKungfuMainID(other.getKungfuMainID());
        }
        if (other.hasKungfuSlotNum()) {
          setKungfuSlotNum(other.getKungfuSlotNum());
        }
        if (other.hasEquipKungfuId()) {
          bitField0_ |= 0x00000004;
          equipKungfuId_ = other.equipKungfuId_;
          
        }
        if (other.hasOpenSlotCondition()) {
          mergeOpenSlotCondition(other.getOpenSlotCondition());
        }
        if (other.hasOpenStatus()) {
          setOpenStatus(other.getOpenStatus());
        }
        if (!other.slotChildrenLevel_.isEmpty()) {
          if (slotChildrenLevel_.isEmpty()) {
            slotChildrenLevel_ = other.slotChildrenLevel_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureSlotChildrenLevelIsMutable();
            slotChildrenLevel_.addAll(other.slotChildrenLevel_);
          }
          
        }
        if (!other.slotChildrenProperty_.isEmpty()) {
          if (slotChildrenProperty_.isEmpty()) {
            slotChildrenProperty_ = other.slotChildrenProperty_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensureSlotChildrenPropertyIsMutable();
            slotChildrenProperty_.addAll(other.slotChildrenProperty_);
          }
          
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasKungfuMainID()) {
          
          return false;
        }
        if (!hasKungfuSlotNum()) {
          
          return false;
        }
        if (!hasEquipKungfuId()) {
          
          return false;
        }
        if (!hasOpenSlotCondition()) {
          
          return false;
        }
        if (!hasOpenStatus()) {
          
          return false;
        }
        if (!getOpenSlotCondition().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.cwa.sanguo.messages.dto.KungfuInfo.MsgKungFuInfo parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.cwa.sanguo.messages.dto.KungfuInfo.MsgKungFuInfo) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required uint32 kungfuMainID = 1;
      private int kungfuMainID_ ;
      /**
       * <code>required uint32 kungfuMainID = 1;</code>
       */
      public boolean hasKungfuMainID() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 kungfuMainID = 1;</code>
       */
      public int getKungfuMainID() {
        return kungfuMainID_;
      }
      /**
       * <code>required uint32 kungfuMainID = 1;</code>
       */
      public Builder setKungfuMainID(int value) {
        bitField0_ |= 0x00000001;
        kungfuMainID_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 kungfuMainID = 1;</code>
       */
      public Builder clearKungfuMainID() {
        bitField0_ = (bitField0_ & ~0x00000001);
        kungfuMainID_ = 0;
        
        return this;
      }

      // required uint32 kungfuSlotNum = 2;
      private int kungfuSlotNum_ ;
      /**
       * <code>required uint32 kungfuSlotNum = 2;</code>
       *
       * <pre>
       * 表示对应按钮开启以及开启多少个槽数
       * </pre>
       */
      public boolean hasKungfuSlotNum() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required uint32 kungfuSlotNum = 2;</code>
       *
       * <pre>
       * 表示对应按钮开启以及开启多少个槽数
       * </pre>
       */
      public int getKungfuSlotNum() {
        return kungfuSlotNum_;
      }
      /**
       * <code>required uint32 kungfuSlotNum = 2;</code>
       *
       * <pre>
       * 表示对应按钮开启以及开启多少个槽数
       * </pre>
       */
      public Builder setKungfuSlotNum(int value) {
        bitField0_ |= 0x00000002;
        kungfuSlotNum_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 kungfuSlotNum = 2;</code>
       *
       * <pre>
       * 表示对应按钮开启以及开启多少个槽数
       * </pre>
       */
      public Builder clearKungfuSlotNum() {
        bitField0_ = (bitField0_ & ~0x00000002);
        kungfuSlotNum_ = 0;
        
        return this;
      }

      // required string equipKungfuId = 3;
      private java.lang.Object equipKungfuId_ = "";
      /**
       * <code>required string equipKungfuId = 3;</code>
       *
       * <pre>
       * 格式:"100,100"
       * </pre>
       */
      public boolean hasEquipKungfuId() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required string equipKungfuId = 3;</code>
       *
       * <pre>
       * 格式:"100,100"
       * </pre>
       */
      public java.lang.String getEquipKungfuId() {
        java.lang.Object ref = equipKungfuId_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          equipKungfuId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string equipKungfuId = 3;</code>
       *
       * <pre>
       * 格式:"100,100"
       * </pre>
       */
      public com.google.protobuf.ByteString
          getEquipKungfuIdBytes() {
        java.lang.Object ref = equipKungfuId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          equipKungfuId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string equipKungfuId = 3;</code>
       *
       * <pre>
       * 格式:"100,100"
       * </pre>
       */
      public Builder setEquipKungfuId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        equipKungfuId_ = value;
        
        return this;
      }
      /**
       * <code>required string equipKungfuId = 3;</code>
       *
       * <pre>
       * 格式:"100,100"
       * </pre>
       */
      public Builder clearEquipKungfuId() {
        bitField0_ = (bitField0_ & ~0x00000004);
        equipKungfuId_ = getDefaultInstance().getEquipKungfuId();
        
        return this;
      }
      /**
       * <code>required string equipKungfuId = 3;</code>
       *
       * <pre>
       * 格式:"100,100"
       * </pre>
       */
      public Builder setEquipKungfuIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        equipKungfuId_ = value;
        
        return this;
      }

      // required .sanguo.MsgOpenKungfuSlotCondition openSlotCondition = 4;
      private com.cwa.sanguo.messages.dto.OpenKungfuSlotCondition.MsgOpenKungfuSlotCondition openSlotCondition_ = com.cwa.sanguo.messages.dto.OpenKungfuSlotCondition.MsgOpenKungfuSlotCondition.getDefaultInstance();
      /**
       * <code>required .sanguo.MsgOpenKungfuSlotCondition openSlotCondition = 4;</code>
       *
       * <pre>
       * 开启槽条件
       * </pre>
       */
      public boolean hasOpenSlotCondition() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required .sanguo.MsgOpenKungfuSlotCondition openSlotCondition = 4;</code>
       *
       * <pre>
       * 开启槽条件
       * </pre>
       */
      public com.cwa.sanguo.messages.dto.OpenKungfuSlotCondition.MsgOpenKungfuSlotCondition getOpenSlotCondition() {
        return openSlotCondition_;
      }
      /**
       * <code>required .sanguo.MsgOpenKungfuSlotCondition openSlotCondition = 4;</code>
       *
       * <pre>
       * 开启槽条件
       * </pre>
       */
      public Builder setOpenSlotCondition(com.cwa.sanguo.messages.dto.OpenKungfuSlotCondition.MsgOpenKungfuSlotCondition value) {
        if (value == null) {
          throw new NullPointerException();
        }
        openSlotCondition_ = value;

        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>required .sanguo.MsgOpenKungfuSlotCondition openSlotCondition = 4;</code>
       *
       * <pre>
       * 开启槽条件
       * </pre>
       */
      public Builder setOpenSlotCondition(
          com.cwa.sanguo.messages.dto.OpenKungfuSlotCondition.MsgOpenKungfuSlotCondition.Builder builderForValue) {
        openSlotCondition_ = builderForValue.build();

        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>required .sanguo.MsgOpenKungfuSlotCondition openSlotCondition = 4;</code>
       *
       * <pre>
       * 开启槽条件
       * </pre>
       */
      public Builder mergeOpenSlotCondition(com.cwa.sanguo.messages.dto.OpenKungfuSlotCondition.MsgOpenKungfuSlotCondition value) {
        if (((bitField0_ & 0x00000008) == 0x00000008) &&
            openSlotCondition_ != com.cwa.sanguo.messages.dto.OpenKungfuSlotCondition.MsgOpenKungfuSlotCondition.getDefaultInstance()) {
          openSlotCondition_ =
            com.cwa.sanguo.messages.dto.OpenKungfuSlotCondition.MsgOpenKungfuSlotCondition.newBuilder(openSlotCondition_).mergeFrom(value).buildPartial();
        } else {
          openSlotCondition_ = value;
        }

        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>required .sanguo.MsgOpenKungfuSlotCondition openSlotCondition = 4;</code>
       *
       * <pre>
       * 开启槽条件
       * </pre>
       */
      public Builder clearOpenSlotCondition() {
        openSlotCondition_ = com.cwa.sanguo.messages.dto.OpenKungfuSlotCondition.MsgOpenKungfuSlotCondition.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      // required uint32 openStatus = 5;
      private int openStatus_ ;
      /**
       * <code>required uint32 openStatus = 5;</code>
       *
       * <pre>
       * 0表示未开启，1表示开启
       * </pre>
       */
      public boolean hasOpenStatus() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required uint32 openStatus = 5;</code>
       *
       * <pre>
       * 0表示未开启，1表示开启
       * </pre>
       */
      public int getOpenStatus() {
        return openStatus_;
      }
      /**
       * <code>required uint32 openStatus = 5;</code>
       *
       * <pre>
       * 0表示未开启，1表示开启
       * </pre>
       */
      public Builder setOpenStatus(int value) {
        bitField0_ |= 0x00000010;
        openStatus_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 openStatus = 5;</code>
       *
       * <pre>
       * 0表示未开启，1表示开启
       * </pre>
       */
      public Builder clearOpenStatus() {
        bitField0_ = (bitField0_ & ~0x00000010);
        openStatus_ = 0;
        
        return this;
      }

      // repeated uint32 slotChildrenLevel = 6;
      private java.util.List<java.lang.Integer> slotChildrenLevel_ = java.util.Collections.emptyList();
      private void ensureSlotChildrenLevelIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          slotChildrenLevel_ = new java.util.ArrayList<java.lang.Integer>(slotChildrenLevel_);
          bitField0_ |= 0x00000020;
         }
      }
      /**
       * <code>repeated uint32 slotChildrenLevel = 6;</code>
       *
       * <pre>
       * 套路下槽对应等级
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getSlotChildrenLevelList() {
        return java.util.Collections.unmodifiableList(slotChildrenLevel_);
      }
      /**
       * <code>repeated uint32 slotChildrenLevel = 6;</code>
       *
       * <pre>
       * 套路下槽对应等级
       * </pre>
       */
      public int getSlotChildrenLevelCount() {
        return slotChildrenLevel_.size();
      }
      /**
       * <code>repeated uint32 slotChildrenLevel = 6;</code>
       *
       * <pre>
       * 套路下槽对应等级
       * </pre>
       */
      public int getSlotChildrenLevel(int index) {
        return slotChildrenLevel_.get(index);
      }
      /**
       * <code>repeated uint32 slotChildrenLevel = 6;</code>
       *
       * <pre>
       * 套路下槽对应等级
       * </pre>
       */
      public Builder setSlotChildrenLevel(
          int index, int value) {
        ensureSlotChildrenLevelIsMutable();
        slotChildrenLevel_.set(index, value);
        
        return this;
      }
      /**
       * <code>repeated uint32 slotChildrenLevel = 6;</code>
       *
       * <pre>
       * 套路下槽对应等级
       * </pre>
       */
      public Builder addSlotChildrenLevel(int value) {
        ensureSlotChildrenLevelIsMutable();
        slotChildrenLevel_.add(value);
        
        return this;
      }
      /**
       * <code>repeated uint32 slotChildrenLevel = 6;</code>
       *
       * <pre>
       * 套路下槽对应等级
       * </pre>
       */
      public Builder addAllSlotChildrenLevel(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureSlotChildrenLevelIsMutable();
        super.addAll(values, slotChildrenLevel_);
        
        return this;
      }
      /**
       * <code>repeated uint32 slotChildrenLevel = 6;</code>
       *
       * <pre>
       * 套路下槽对应等级
       * </pre>
       */
      public Builder clearSlotChildrenLevel() {
        slotChildrenLevel_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        
        return this;
      }

      // repeated uint32 slotChildrenProperty = 7;
      private java.util.List<java.lang.Integer> slotChildrenProperty_ = java.util.Collections.emptyList();
      private void ensureSlotChildrenPropertyIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          slotChildrenProperty_ = new java.util.ArrayList<java.lang.Integer>(slotChildrenProperty_);
          bitField0_ |= 0x00000040;
         }
      }
      /**
       * <code>repeated uint32 slotChildrenProperty = 7;</code>
       *
       * <pre>
       * 套路下槽等级对应加成
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getSlotChildrenPropertyList() {
        return java.util.Collections.unmodifiableList(slotChildrenProperty_);
      }
      /**
       * <code>repeated uint32 slotChildrenProperty = 7;</code>
       *
       * <pre>
       * 套路下槽等级对应加成
       * </pre>
       */
      public int getSlotChildrenPropertyCount() {
        return slotChildrenProperty_.size();
      }
      /**
       * <code>repeated uint32 slotChildrenProperty = 7;</code>
       *
       * <pre>
       * 套路下槽等级对应加成
       * </pre>
       */
      public int getSlotChildrenProperty(int index) {
        return slotChildrenProperty_.get(index);
      }
      /**
       * <code>repeated uint32 slotChildrenProperty = 7;</code>
       *
       * <pre>
       * 套路下槽等级对应加成
       * </pre>
       */
      public Builder setSlotChildrenProperty(
          int index, int value) {
        ensureSlotChildrenPropertyIsMutable();
        slotChildrenProperty_.set(index, value);
        
        return this;
      }
      /**
       * <code>repeated uint32 slotChildrenProperty = 7;</code>
       *
       * <pre>
       * 套路下槽等级对应加成
       * </pre>
       */
      public Builder addSlotChildrenProperty(int value) {
        ensureSlotChildrenPropertyIsMutable();
        slotChildrenProperty_.add(value);
        
        return this;
      }
      /**
       * <code>repeated uint32 slotChildrenProperty = 7;</code>
       *
       * <pre>
       * 套路下槽等级对应加成
       * </pre>
       */
      public Builder addAllSlotChildrenProperty(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureSlotChildrenPropertyIsMutable();
        super.addAll(values, slotChildrenProperty_);
        
        return this;
      }
      /**
       * <code>repeated uint32 slotChildrenProperty = 7;</code>
       *
       * <pre>
       * 套路下槽等级对应加成
       * </pre>
       */
      public Builder clearSlotChildrenProperty() {
        slotChildrenProperty_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:sanguo.MsgKungFuInfo)
    }

    static {
      defaultInstance = new MsgKungFuInfo(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:sanguo.MsgKungFuInfo)
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
